{
"project": "Crails Framework",
"icon": "https://crails-framework.github.io/images/logo.png",
"packages": [{"package": "libbacktrace","excerpt": "<p>This library written by <a href=\"https://github.com/artyom-beilis\">Artyom Beilis</a> enables backtraces on your exceptions.A bunch of overloads of the standard exceptions types are provided, as well as tools to walk theirtraces when thrown.</p>"},{"package": "libcrails","excerpt": "<p><a href=\"https://www.boost.org/doc/libs/1_73_0/libs/beast/doc/html/index.html\">Beast</a> based library providing [Crails::Server] and the <a href=\"https://crails-framework.github.io/website/request_pipeline\">Request Pipeline</a>,listening on an interfa...</p>"},{"package": "libcrails-action","excerpt": "<p>Provides a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/routers\">router</a> for requests on the server-side, dispatchingrequests to your callbacks according to an HTTP request path.</p>"},{"package": "libcrails-archive","excerpt": "<p>Integrates libtext-archive into Crails with a [Crails::RequestParser] and a [Crails::Renderer].</p>"},{"package": "libcrails-attachment","excerpt": "<p>Helps you store files in a local storage and assign them to models.</p>"},{"package": "libcrails-captcha","excerpt": "<p>Simple Captcha generator with support for custom captchas using <a href=\"https://github.com/crails-framework/libcapt\">libcapt</a> or <a href=\"https://developers.google.com/recaptcha\">reCAPTCHA</a>.</p>"},{"package": "libcrails-cli","excerpt": "<p>Shared utilities used by the Command Line Interface tools for the Crails Framework.</p>"},{"package": "libcrails-controllers","excerpt": "<p>Controller layer for Crails' MVC design. It builds on <code>libcrails-action</code> to use acontroller interface and method pointers instead of plain callbacks.</p>"},{"package": "libcrails-cookies","excerpt": "<p>Cookie-based [SessionStore].</p>"},{"package": "libcrails-crontab","excerpt": "<p>A simple utility library for programmatically managing <a href=\"https://fr.wikipedia.org/wiki/Cron\">Cron</a> jobs.</p>"},{"package": "libcrails-crud","excerpt": "<p>Helper classes for <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a> related designs.</p>"},{"package": "libcrails-database-url"},{"package": "libcrails-databases","excerpt": "<p>Database-agnostic configuration and connection management for your databases. Speeds upyour response time by sharing a single database connection for requests coming fromthe same thread.</p>"},{"package": "libcrails-design-patterns"},{"package": "libcrails-encrypt","excerpt": "<p>OpenSSL based classes for encryption.</p>"},{"package": "libcrails-fonticons"},{"package": "libcrails-form-parser","excerpt": "<p>Loads <code>application/x-www-form-urlencoded</code> request bodies into [Crails::Params] with an implementation of [Crails::RequestParser].</p>"},{"package": "libcrails-html-views","excerpt": "<p>Implements [Crails::Renderer] and [Crails::Template] for HTML documents, including several helpers for building formHTML templates can be generated using the <a href=\"https://github.com/crails-framework/ecpp\">ecpp</a> generator:</p>"},{"package": "libcrails-http-client","excerpt": "<p><a href=\"https://www.boost.org/doc/libs/1_73_0/libs/beast/doc/html/index.html\">Beast</a> based library providing HTTP clients with both synchronous and asynchronous request support.</p>"},{"package": "libcrails-i18n"},{"package": "libcrails-image","excerpt": "<p>Helps you store and transform image files in a local storage and assign them to models, using libcrails-attachment and ImageMagick.</p>"},{"package": "libcrails-json-parser","excerpt": "<p>Loads <code>application/json</code> request bodies into [Crails::Params] with an implementation of [Crails::RequestParser].</p>"},{"package": "libcrails-json-views","excerpt": "<p>Implements [Crails::Renderer] and [Crails::Template] for JSON documents, including a Domain-Specific Language for generating JSON with the <a href=\"https://github.com/crails-framework/ecpp\">ecpp</a> generator:</p>"},{"package": "libcrails-logger","excerpt": "<p>Logger and log rotation tools.</p>"},{"package": "libcrails-mail","excerpt": "<p>Sends email using SMTP or MailGrid.</p>"},{"package": "libcrails-mongodb"},{"package": "libcrails-multimedia"},{"package": "libcrails-multipart-parser","excerpt": "<p>Loads <code>multipart/form-data</code> request bodies into [Crails::Params] with an implementation of [Crails::RequestParser].</p>"},{"package": "libcrails-oauth","excerpt": "<p>OAuth support for <a href=\"#/packages/libcrails-signin\">libcrails-signin</a>. Includes implementations for Google, Live (Microsoft) and Facebook.</p>"},{"package": "libcrails-odb"},{"package": "libcrails-paginator"},{"package": "libcrails-proxy","excerpt": "<p>Provides an implementation of [Crails::RequestHandler] proxyfing queries according to a custom set of static rules. See the [Crails::ProxyRequestHandler] class and [Crails::ProxyRequestHandler::Rule] struct for more details.</p>"},{"package": "libcrails-random","excerpt": "<p>Small toolbox for generating random strings of characters.</p>"},{"package": "libcrails-readfile","excerpt": "<p>Efficient file-reading made simple with the <a href=\"#/functions/::Crails::read_file\">Crails::read_file</a> function.</p>"},{"package": "libcrails-redis"},{"package": "libcrails-renderer","excerpt": "<p>Provides the [Crails::Renderer] and [Crails::RenderTarget] interfaces. Applications can then register renderers for various <code>Content-Type</code> target, and for each of those, register a series of [Crails::Renderer::Generator] callbacks.</p>"},{"package": "libcrails-router","excerpt": "<p>Provides a template class for building <em>URL mapping</em> through a <em>routing</em> system, with our own custom URL parameter and callback types.</p>"},{"package": "libcrails-rss-views","excerpt": "<p>Implements [Crails::Renderer] and [Crails::Template] for RSS documents, using XML templates generated using the <a href=\"https://github.com/crails-framework/ecpp\">ecpp</a> generator:</p>"},{"package": "libcrails-selenium"},{"package": "libcrails-semantics","excerpt": "<p>String manipulation library, providing a set of functions for splitting, joining strings,base64 encoding and decoding, but also functions to convert strings to a case style (camel-case, snake-case, kebab-case).</p>"},{"package": "libcrails-sentry","excerpt": "<p>Adds error monitoring by capturing exceptions and sending them to a <a href=\"https://sentry.io\">Sentry</a> server.</p>"},{"package": "libcrails-sidekix","excerpt": "<p>Simple background jobs system. It's designed with simplicity in mind, but can also become more efficient and reliable when paired with a Redis database. Brings tools to simply write tasks separated from your Crails application, scheduling their executio...</p>"},{"package": "libcrails-signin"},{"package": "libcrails-ssh","excerpt": "<p>Object-Oriented wrapper for <a href=\"https://www.libssh.org\">libssh</a> with stream redirection.</p>"},{"package": "libcrails-sync","excerpt": "<p>Toolset for real-time communication between client and server, using <a href=\"https://en.wikipedia.org/wiki/WebSocket\">WebSockets</a>.</p>"},{"package": "libcrails-templates","excerpt": "<p>Provides the [Crails::Template] class, used as a base for classes generated by the <a href=\"https://github.com/crails-framework/ecpp\">ecpp</a> template system.</p>"},{"package": "libcrails-tests","excerpt": "<p>Components for writing and running a test suite.</p>"},{"package": "libcrails-url-parser","excerpt": "<p>Loads URL query parameters into [Crails::Params] with an implementation of [Crails::RequestParser].</p>"},{"package": "libcrails-xml-parser","excerpt": "<p>Loads <code>application/xml</code> or <code>text/xml</code> request bodies into [Crails::Params] with an implementation of [Crails::RequestParser] leveraging <a href=\"https://www.boost.org/doc/libs/1_80_0/doc/html/property_tree.html\">boost::property_tre...</p>"},{"package": "libcrails-xmlrpc","excerpt": "<p>Implements client and server tools for the <a href=\"https://en.wikipedia.org/wiki/XML-RPC\">XML-RPC</a> protocol, allowing you to perform queries to XML-RPC services, or to implement an XML-RPC endpoint that integrates into your Crails router and control...</p>"},{"package": "libcrails-yaml-parser","excerpt": "<p>Loads <a href=\"https://fr.wikipedia.org/wiki/YAML\">YAML</a> request bodies into [Crails::Params] with an implementation of [Crails::RequestParser] using <a href=\"https://github.com/jbeder/yaml-cpp\">yaml-cpp</a>.</p>"},{"package": "libdatatree","excerpt": "<p>Libdatatree provides types to dynamically create, walk and edit nested trees of values. [DataTree] and [Data] allow safely walking over nodes, independently of whether they actually exist or not. Each branch can then be converted to arbitrary types (str...</p>"},{"package": "libtext-archive","excerpt": "<p>Text-based serializer, providing a concise way to exchange messages over HTTP, with an Object-Oriented API making it easy to serialize and unserialize:</p>"}]
,  "types": [
{
"kind": 3,
"raw_name": "Crails::HttpRequest",
"name": "HttpRequest",
"scopes": ["Crails"],
"full_name": "boost::beast::http::request<boost::beast::http::buffer_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::HttpResponse",
"name": "HttpResponse",
"scopes": ["Crails"],
"full_name": "boost::beast::http::response<boost::beast::http::string_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::HttpStatus",
"name": "HttpStatus",
"scopes": ["Crails"],
"full_name": "boost::beast::http::status",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::HttpHeader",
"name": "HttpHeader",
"scopes": ["Crails"],
"full_name": "boost::beast::http::field",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::HttpVerb",
"name": "HttpVerb",
"scopes": ["Crails"],
"full_name": "boost::beast::http::verb",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Flyweight",
"scopes": [],
"full_name": "::Flyweight",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Flyweight::Instances",
"name": "Instances",
"scopes": ["Flyweight"],
"full_name": "std::list<Instance>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FileCache",
"scopes": ["Crails"],
"full_name": "::Crails::FileCache",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Lock",
"scopes": ["Crails","FileCache"],
"full_name": "::Crails::FileCache::Lock",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "backtrace",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::backtrace",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "exception",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::exception",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "bad_cast",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::bad_cast",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "runtime_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::runtime_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "range_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::range_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "overflow_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::overflow_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "underflow_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::underflow_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "logic_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::logic_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "domain_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::domain_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "length_error",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::length_error",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "invalid_argument",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::invalid_argument",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "out_of_range",
"scopes": ["boost_ext"],
"full_name": "::boost_ext::out_of_range",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "trace_manip",
"scopes": ["boost_ext","details"],
"full_name": "::boost_ext::details::trace_manip",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Context",
"scopes": ["Crails"],
"full_name": "::Crails::Context",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Server",
"scopes": ["Crails"],
"full_name": "::Crails::Server",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ExceptionCatcher",
"scopes": ["Crails"],
"full_name": "::Crails::ExceptionCatcher",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ExceptionCatcher::Function",
"name": "Function",
"scopes": ["Crails","ExceptionCatcher"],
"full_name": "std::function<void (Context)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ExceptionCatcher::Functions",
"name": "Functions",
"scopes": ["Crails","ExceptionCatcher"],
"full_name": "std::vector<Function>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Environment",
"scopes": ["Crails"],
"full_name": "::Crails::Environment",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Singleton",
"scopes": [],
"full_name": "::Singleton",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SingletonImplementation",
"scopes": [],
"full_name": "::SingletonImplementation",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SingletonInstantiator",
"scopes": [],
"full_name": "::SingletonInstantiator",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "DataTree",
"scopes": [],
"full_name": "::DataTree",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Data",
"scopes": [],
"full_name": "::Data",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "iterator",
"scopes": ["Data"],
"full_name": "::Data::iterator",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Params",
"scopes": ["Crails"],
"full_name": "::Crails::Params",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestHandler",
"scopes": ["Crails"],
"full_name": "::Crails::RequestHandler",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Connection",
"scopes": ["Crails"],
"full_name": "::Crails::Connection",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Server::singleton",
"name": "singleton",
"scopes": ["Crails","Server"],
"full_name": "::Singleton<Server>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Server::RequestParsers",
"name": "RequestParsers",
"scopes": ["Crails","Server"],
"full_name": "std::vector<RequestParser *>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Server::RequestHandlers",
"name": "RequestHandlers",
"scopes": ["Crails","Server"],
"full_name": "std::vector<RequestHandler *>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Server::Directories",
"name": "Directories",
"scopes": ["Crails","Server"],
"full_name": "std::vector<std::string>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Crash",
"scopes": ["Crails","Server"],
"full_name": "::Crails::Server::Crash",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BuildingResponse",
"scopes": ["Crails"],
"full_name": "::Crails::BuildingResponse",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SessionStore",
"scopes": ["Crails"],
"full_name": "::Crails::SessionStore",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Factory",
"scopes": ["Crails","SessionStore"],
"full_name": "::Crails::SessionStore::Factory",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::SessionStore::Factory::singleton",
"name": "singleton",
"scopes": ["Crails","SessionStore","Factory"],
"full_name": "::Singleton<Factory>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "MultipartParser",
"scopes": ["Crails"],
"full_name": "::Crails::MultipartParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ActionRequestHandler",
"scopes": ["Crails"],
"full_name": "::Crails::ActionRequestHandler",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BodyParser",
"scopes": ["Crails"],
"full_name": "::Crails::BodyParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestMultipartParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestMultipartParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "File",
"scopes": ["Crails","Params"],
"full_name": "::Crails::Params::File",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Params::Files",
"name": "Files",
"scopes": ["Crails","Params"],
"full_name": "std::list<File>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Connection::RequestHandler",
"name": "RequestHandler",
"scopes": ["Crails","Connection"],
"full_name": "std::function<void (Connection &)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Connection::HttpParser",
"name": "HttpParser",
"scopes": ["Crails","Connection"],
"full_name": "boost::beast::http::request_parser<boost::beast::http::buffer_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RenderTarget",
"scopes": ["Crails"],
"full_name": "::Crails::RenderTarget",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RenderString",
"scopes": ["Crails"],
"full_name": "::Crails::RenderString",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RenderStream",
"scopes": ["Crails"],
"full_name": "::Crails::RenderStream",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Timer",
"scopes": ["Utils"],
"full_name": "::Utils::Timer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "TimeGuard",
"scopes": ["Utils"],
"full_name": "::Utils::TimeGuard",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Request",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::Request",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "NullPointerException",
"scopes": [],
"full_name": "::NullPointerException",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "safe_ptr",
"scopes": [],
"full_name": "::safe_ptr",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "WebSocket",
"scopes": ["Crails"],
"full_name": "::Crails::WebSocket",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "MessageType",
"scopes": ["Crails","WebSocket"],
"full_name": "::Crails::WebSocket::MessageType",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::WebSocket::Message",
"name": "Message",
"scopes": ["Crails","WebSocket"],
"full_name": "std::pair<std::string, MessageType>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Status",
"scopes": ["Crails","RequestParser"],
"full_name": "::Crails::RequestParser::Status",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "NoSessionStore",
"scopes": ["Crails"],
"full_name": "::Crails::NoSessionStore",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Factory",
"scopes": ["Crails","NoSessionStore"],
"full_name": "::Crails::NoSessionStore::Factory",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::NoSessionStore::Factory::singleton",
"name": "singleton",
"scopes": ["Crails","NoSessionStore","Factory"],
"full_name": "::SingletonImplementation<NoSessionStore::Factory, SessionStore::Factory>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ProgramOptions",
"scopes": ["Crails"],
"full_name": "::Crails::ProgramOptions",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Options",
"scopes": ["Crails","ProgramOptions"],
"full_name": "::Crails::ProgramOptions::Options",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "LogRotate",
"scopes": ["Crails"],
"full_name": "::Crails::LogRotate",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "LogFiles",
"scopes": ["Crails"],
"full_name": "::Crails::LogFiles",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::LogFiles::singleton",
"name": "singleton",
"scopes": ["Crails","LogFiles"],
"full_name": "::Singleton<LogFiles>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FileRequestHandler",
"scopes": ["Crails"],
"full_name": "::Crails::FileRequestHandler",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::FileRequestHandler::Range",
"name": "Range",
"scopes": ["Crails","FileRequestHandler"],
"full_name": "std::pair<unsigned int, unsigned int>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "BuiltinAsset",
"scopes": ["Crails"],
"full_name": "::Crails::BuiltinAsset",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BuiltinAssets",
"scopes": ["Crails"],
"full_name": "::Crails::BuiltinAssets",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BuiltinAssetsHandler",
"scopes": ["Crails"],
"full_name": "::Crails::BuiltinAssetsHandler",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Url",
"scopes": ["Crails"],
"full_name": "::Crails::Url",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "UrlFragmentEncode",
"scopes": ["Crails"],
"full_name": "::Crails::UrlFragmentEncode",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "UrlBuilder",
"scopes": ["Crails"],
"full_name": "::Crails::UrlBuilder",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "is_specialization",
"scopes": ["Crails"],
"full_name": "::Crails::is_specialization",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ArrayCollector",
"scopes": ["Crails"],
"full_name": "::Crails::ArrayCollector",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Listener",
"scopes": ["Crails"],
"full_name": "::Crails::Listener",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ArchiveException",
"scopes": [],
"full_name": "::ArchiveException",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ArchiveNullPointerError",
"scopes": [],
"full_name": "::ArchiveNullPointerError",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ArchiveUnmatchingTypeError",
"scopes": [],
"full_name": "::ArchiveUnmatchingTypeError",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ArchiveUnimplementedSerializer",
"scopes": [],
"full_name": "::ArchiveUnimplementedSerializer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ArchiveUnimplementedUnserializer",
"scopes": [],
"full_name": "::ArchiveUnimplementedUnserializer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "OArchive",
"scopes": [],
"full_name": "::OArchive",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "IArchive",
"scopes": [],
"full_name": "::IArchive",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Archivable",
"scopes": [],
"full_name": "::Archivable",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Archive",
"scopes": [],
"full_name": "::Archive",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "CamelizeOption",
"scopes": ["Crails"],
"full_name": "::Crails::CamelizeOption",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RouterBase",
"scopes": ["Crails"],
"full_name": "::Crails::RouterBase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::RouterBase::Action",
"name": "Action",
"scopes": ["Crails","RouterBase"],
"full_name": "::ACTION",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Item",
"scopes": ["Crails","RouterBase"],
"full_name": "::Crails::RouterBase::Item",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::RouterBase::Items",
"name": "Items",
"scopes": ["Crails","RouterBase"],
"full_name": "std::vector<Item>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ActionRoute",
"scopes": ["Crails"],
"full_name": "::Crails::ActionRoute",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ActionController",
"scopes": ["Crails"],
"full_name": "::Crails::ActionController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Logger",
"scopes": ["Crails"],
"full_name": "::Crails::Logger",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Symbol",
"scopes": ["Crails","Logger"],
"full_name": "::Crails::Logger::Symbol",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Buffer",
"scopes": ["Crails","Logger"],
"full_name": "::Crails::Logger::Buffer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ActionRoute::Method",
"name": "Method",
"scopes": ["Crails","ActionRoute"],
"full_name": "void (CONTROLLER::*)()",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "WebSocketRoute",
"scopes": ["Crails"],
"full_name": "::Crails::WebSocketRoute",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::WebSocketRoute::Method",
"name": "Method",
"scopes": ["Crails","WebSocketRoute"],
"full_name": "void (WEBSOCKET::*)()",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Router",
"scopes": ["Crails"],
"full_name": "::Crails::Router",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Router::singleton",
"name": "singleton",
"scopes": ["Crails","Router"],
"full_name": "::Singleton<Router>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Renderer",
"scopes": ["Crails"],
"full_name": "::Crails::Renderer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "MissingTemplate",
"scopes": ["Crails"],
"full_name": "::Crails::MissingTemplate",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Renderers",
"scopes": ["Crails"],
"full_name": "::Crails::Renderers",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Renderers::singleton",
"name": "singleton",
"scopes": ["Crails","Renderers"],
"full_name": "::Singleton<Renderers>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Renderers::RendererList",
"name": "RendererList",
"scopes": ["Crails","Renderers"],
"full_name": "std::list<std::unique_ptr<const Renderer>>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Renderer::Generator",
"name": "Generator",
"scopes": ["Crails","Renderer"],
"full_name": "::void (*)(const Renderer &, RenderTarget &, SharedVars &)",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Renderer::Templates",
"name": "Templates",
"scopes": ["Crails","Renderer"],
"full_name": "std::map<std::string, Generator>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ArchiveRenderer",
"scopes": ["Crails"],
"full_name": "::Crails::ArchiveRenderer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestArchiveParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestArchiveParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Attachment",
"scopes": ["Crails"],
"full_name": "::Crails::Attachment",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Challenge",
"scopes": ["Crails","Captcha"],
"full_name": "::Crails::Captcha::Challenge",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Default",
"scopes": ["Crails","Captcha"],
"full_name": "::Crails::Captcha::Default",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Google",
"scopes": ["Crails","Captcha"],
"full_name": "::Crails::Captcha::Google",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ScaffoldModel",
"scopes": ["Crails"],
"full_name": "::Crails::ScaffoldModel",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "WithPath",
"scopes": ["Crails"],
"full_name": "::Crails::WithPath",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ExecutableCommand",
"scopes": ["Crails"],
"full_name": "::Crails::ExecutableCommand",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "BuildOptions",
"scopes": [],
"full_name": "::BuildOptions",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "CMakeBuilder",
"scopes": [],
"full_name": "::CMakeBuilder",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Build2Builder",
"scopes": [],
"full_name": "::Build2Builder",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FileRendererBase",
"scopes": ["Crails"],
"full_name": "::Crails::FileRendererBase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Command",
"scopes": ["Crails"],
"full_name": "::Crails::Command",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "NamingConvention",
"scopes": ["Crails"],
"full_name": "::Crails::NamingConvention",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::NamingConvention::Transformation",
"name": "Transformation",
"scopes": ["Crails","NamingConvention"],
"full_name": "std::function<std::string (const std::string &)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Scaffold",
"scopes": ["Crails"],
"full_name": "::Crails::Scaffold",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Scaffold::Scaffolds",
"name": "Scaffolds",
"scopes": ["Crails","Scaffold"],
"full_name": "std::map<std::string, std::function<ScaffoldModel *()>>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Notifier",
"scopes": ["Crails"],
"full_name": "::Crails::Notifier",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "KDialogNotifier",
"scopes": ["Crails"],
"full_name": "::Crails::KDialogNotifier",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "NotifySendNotifier",
"scopes": ["Crails"],
"full_name": "::Crails::NotifySendNotifier",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "TerminalNotifier",
"scopes": ["Crails"],
"full_name": "::Crails::TerminalNotifier",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Terminal",
"scopes": ["Crails"],
"full_name": "::Crails::Terminal",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Color",
"scopes": ["Crails","Terminal"],
"full_name": "::Crails::Terminal::Color",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Background",
"scopes": ["Crails","Terminal"],
"full_name": "::Crails::Terminal::Background",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ProjectVariables",
"scopes": ["Crails"],
"full_name": "::Crails::ProjectVariables",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "CommandIndex",
"scopes": ["Crails"],
"full_name": "::Crails::CommandIndex",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::CommandIndex::CommandCtor",
"name": "CommandCtor",
"scopes": ["Crails","CommandIndex"],
"full_name": "std::function<std::shared_ptr<Command> ()>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::CommandIndex::CommandCtors",
"name": "CommandCtors",
"scopes": ["Crails","CommandIndex"],
"full_name": "std::unordered_map<std::string_view, CommandCtor>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BasicAuthenticationController",
"scopes": ["Crails"],
"full_name": "::Crails::BasicAuthenticationController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ExceptionCSRF",
"scopes": ["Crails"],
"full_name": "::Crails::ExceptionCSRF",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "CsrfController",
"scopes": ["Crails"],
"full_name": "::Crails::CsrfController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RenderController",
"scopes": ["Crails"],
"full_name": "::Crails::RenderController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "RenderType",
"scopes": ["Crails","RenderController"],
"full_name": "::Crails::RenderController::RenderType",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FlashController",
"scopes": ["Crails"],
"full_name": "::Crails::FlashController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::FlashController::Super",
"name": "Super",
"scopes": ["Crails","FlashController"],
"full_name": "::RenderController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Controller",
"name": "Controller",
"scopes": ["Crails"],
"full_name": "::Crails::FlashController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "CookieData",
"scopes": ["Crails"],
"full_name": "::Crails::CookieData",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "CookieStore",
"scopes": ["Crails"],
"full_name": "::Crails::CookieStore",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Factory",
"scopes": ["Crails","CookieStore"],
"full_name": "::Crails::CookieStore::Factory",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::CookieStore::Factory::singleton",
"name": "singleton",
"scopes": ["Crails","CookieStore","Factory"],
"full_name": "::SingletonImplementation<CookieStore::Factory, SessionStore::Factory>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Crontab",
"scopes": ["Crails"],
"full_name": "::Crails::Crontab",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Task",
"scopes": ["Crails","Crontab"],
"full_name": "::Crails::Crontab::Task",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Crontab::iterator",
"name": "iterator",
"scopes": ["Crails","Crontab"],
"full_name": "std::vector<Task>:iterator",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Crontab::const_iterator",
"name": "const_iterator",
"scopes": ["Crails","Crontab"],
"full_name": "std::vector<Task>:const_iterator",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Paginator",
"scopes": ["Crails"],
"full_name": "::Crails::Paginator",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Paginator::CountCallback",
"name": "CountCallback",
"scopes": ["Crails","Paginator"],
"full_name": "std::function<unsigned long ()>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Options",
"scopes": ["Crails","Paginator"],
"full_name": "::Crails::Paginator::Options",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BaseController",
"scopes": ["Crud"],
"full_name": "::Crud::BaseController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Databases",
"scopes": ["Crails"],
"full_name": "::Crails::Databases",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Databases::DatabaseSettings",
"name": "DatabaseSettings",
"scopes": ["Crails","Databases"],
"full_name": "std::map<std::string, std::any>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Databases::DatabasesMap",
"name": "DatabasesMap",
"scopes": ["Crails","Databases"],
"full_name": "std::map<std::string, DatabaseSettings>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Databases::SettingsMap",
"name": "SettingsMap",
"scopes": ["Crails","Databases"],
"full_name": "std::map<Environment, DatabasesMap>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Settings",
"scopes": ["Crails","Databases"],
"full_name": "::Crails::Databases::Settings",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Databases::Settings::singleton",
"name": "singleton",
"scopes": ["Crails","Databases","Settings"],
"full_name": "::Singleton<Settings>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Database",
"scopes": ["Crails","Databases"],
"full_name": "::Crails::Databases::Database",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Databases::DatabaseList",
"name": "DatabaseList",
"scopes": ["Crails","Databases"],
"full_name": "std::vector<Database *>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Exception",
"scopes": ["Crails","Databases"],
"full_name": "::Crails::Databases::Exception",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "DatabaseUrl",
"scopes": ["Crails"],
"full_name": "::Crails::DatabaseUrl",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Cipher",
"scopes": [],
"full_name": "::Cipher",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Cipher::uint",
"name": "uint",
"scopes": ["Cipher"],
"full_name": "::unsigned int",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Cipher::uchar",
"name": "uchar",
"scopes": ["Cipher"],
"full_name": "::unsigned char",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Cipher::aes_key_t",
"name": "aes_key_t",
"scopes": ["Cipher"],
"full_name": "::uchar[32]",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Cipher::aes_iv_t",
"name": "aes_iv_t",
"scopes": ["Cipher"],
"full_name": "::uchar[32]",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Cipher::aes_salt_t",
"name": "aes_salt_t",
"scopes": ["Cipher"],
"full_name": "::uchar[8]",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Cipher::kv1_t",
"name": "kv1_t",
"scopes": ["Cipher"],
"full_name": "std::pair<uchar *, uint>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Digest",
"scopes": ["Crails"],
"full_name": "::Crails::Digest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "MessageDigest",
"scopes": ["Crails"],
"full_name": "::Crails::MessageDigest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "HmacDigest",
"scopes": ["Crails"],
"full_name": "::Crails::HmacDigest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Md5Digest",
"scopes": ["Crails"],
"full_name": "::Crails::Md5Digest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "HmacMd5Digest",
"scopes": ["Crails"],
"full_name": "::Crails::HmacMd5Digest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Pbkdf2HmacDigest",
"scopes": ["Crails"],
"full_name": "::Crails::Pbkdf2HmacDigest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "IconIdentity",
"scopes": ["Crails","FontIcon"],
"full_name": "::Crails::FontIcon::IconIdentity",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FontIconTheme",
"scopes": ["Crails"],
"full_name": "::Crails::FontIconTheme",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::FontIconTheme::singleton",
"name": "singleton",
"scopes": ["Crails","FontIconTheme"],
"full_name": "::Singleton<FontIconTheme>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Style",
"scopes": ["Crails","FontAwesome"],
"full_name": "::Crails::FontAwesome::Style",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ThemeBase",
"scopes": ["Crails","FontAwesome"],
"full_name": "::Crails::FontAwesome::ThemeBase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "V6",
"scopes": ["Crails","FontAwesome"],
"full_name": "::Crails::FontAwesome::V6",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::FontAwesome::V6::singleton",
"name": "singleton",
"scopes": ["Crails","FontAwesome","V6"],
"full_name": "::SingletonImplementation<V6, FontIconTheme>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "V5",
"scopes": ["Crails","FontAwesome"],
"full_name": "::Crails::FontAwesome::V5",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::FontAwesome::V5::singleton",
"name": "singleton",
"scopes": ["Crails","FontAwesome","V5"],
"full_name": "::SingletonImplementation<V5, FontIconTheme>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestFormParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestFormParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "HtmlRenderer",
"scopes": ["Crails"],
"full_name": "::Crails::HtmlRenderer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Template",
"scopes": ["Crails"],
"full_name": "::Crails::Template",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "HtmlTemplate",
"scopes": ["Crails"],
"full_name": "::Crails::HtmlTemplate",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::HtmlTemplate::Yieldable",
"name": "Yieldable",
"scopes": ["Crails","HtmlTemplate"],
"full_name": "std::function<std::string ()>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FormBuilderBase",
"scopes": ["Crails"],
"full_name": "::Crails::FormBuilderBase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FormBuilder",
"scopes": ["Crails"],
"full_name": "::Crails::FormBuilder",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ClientInterface",
"scopes": ["Crails"],
"full_name": "::Crails::ClientInterface",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ClientInterface::Request",
"name": "Request",
"scopes": ["Crails","ClientInterface"],
"full_name": "boost::beast::http::request<boost::beast::http::string_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ClientInterface::Response",
"name": "Response",
"scopes": ["Crails","ClientInterface"],
"full_name": "boost::beast::http::response<boost::beast::http::string_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ClientInterface::AsyncCallback",
"name": "AsyncCallback",
"scopes": ["Crails","ClientInterface"],
"full_name": "std::function<void (const Response &, boost::beast::error_code)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Client",
"scopes": ["Crails"],
"full_name": "::Crails::Client",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Client::Resolver",
"name": "Resolver",
"scopes": ["Crails","Client"],
"full_name": "boost::asio::ip::tcp::resolver",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Client",
"scopes": ["Crails","Ssl"],
"full_name": "::Crails::Ssl::Client",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "QueryController",
"scopes": ["Crails"],
"full_name": "::Crails::QueryController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Settings",
"scopes": ["i18n"],
"full_name": "::i18n::Settings",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "I18nData",
"scopes": ["i18n"],
"full_name": "::i18n::I18nData",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "i18n::Settings::singleton",
"name": "singleton",
"scopes": ["i18n","Settings"],
"full_name": "::Singleton<Settings>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "I18nController",
"scopes": ["Crails"],
"full_name": "::Crails::I18nController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::I18nController::Super",
"name": "Super",
"scopes": ["Crails","I18nController"],
"full_name": "::Crails::FlashController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "String",
"scopes": ["i18n"],
"full_name": "::i18n::String",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BasicImage",
"scopes": ["Crails"],
"full_name": "::Crails::BasicImage",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Option",
"scopes": ["Crails","BasicImage"],
"full_name": "::Crails::BasicImage::Option",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestJsonParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestJsonParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "JsonRenderer",
"scopes": ["Crails"],
"full_name": "::Crails::JsonRenderer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "JsonTemplate",
"scopes": ["Crails"],
"full_name": "::Crails::JsonTemplate",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Server",
"scopes": ["Smtp"],
"full_name": "::Smtp::Server",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Mail",
"scopes": ["Crails"],
"full_name": "::Crails::Mail",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Identity",
"scopes": ["Crails","Mail"],
"full_name": "::Crails::Mail::Identity",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Recipient",
"scopes": ["Crails","Mail"],
"full_name": "::Crails::Mail::Recipient",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Mail::Sender",
"name": "Sender",
"scopes": ["Crails","Mail"],
"full_name": "::Crails::Mail::Identity",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Mail::Recipients",
"name": "Recipients",
"scopes": ["Crails","Mail"],
"full_name": "std::vector<Recipient>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "RecipientType",
"scopes": ["Crails","Mail"],
"full_name": "::Crails::Mail::RecipientType",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Smtp::Server::SslSocket",
"name": "SslSocket",
"scopes": ["Smtp","Server"],
"full_name": "boost::asio::ssl::stream<boost::asio::ip::tcp::socket>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Smtp::Server::ErrorCallback",
"name": "ErrorCallback",
"scopes": ["Smtp","Server"],
"full_name": "std::function<void (const std::exception &)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Smtp::Server::AsyncHandler",
"name": "AsyncHandler",
"scopes": ["Smtp","Server"],
"full_name": "std::function<void (const boost::system::error_code &, std::size_t)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "AuthenticationProtocol",
"scopes": ["Smtp","Server"],
"full_name": "::Smtp::Server::AuthenticationProtocol",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Smtp::Server::SmtpAuthMethod",
"name": "SmtpAuthMethod",
"scopes": ["Smtp","Server"],
"full_name": "void (Smtp::Server::*)(const std::string &, const std::string &, std::function<void ()>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "MailServer",
"scopes": ["Crails"],
"full_name": "::Crails::MailServer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "MailServiceInterface",
"scopes": ["Crails"],
"full_name": "::Crails::MailServiceInterface",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "MailServers",
"scopes": ["Crails"],
"full_name": "::Crails::MailServers",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::MailServers::singleton",
"name": "singleton",
"scopes": ["Crails","MailServers"],
"full_name": "::Singleton<MailServers>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Backend",
"scopes": ["Crails","MailServers"],
"full_name": "::Crails::MailServers::Backend",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Conf",
"scopes": ["Crails","MailServers"],
"full_name": "::Crails::MailServers::Conf",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::MailServers::List",
"name": "List",
"scopes": ["Crails","MailServers"],
"full_name": "std::map<std::string, Conf>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "SmtpMailService",
"scopes": ["Crails"],
"full_name": "::Crails::SmtpMailService",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Mailer",
"scopes": ["Crails"],
"full_name": "::Crails::Mailer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "MailgunService",
"scopes": ["Crails"],
"full_name": "::Crails::MailgunService",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "MultimediaConvertFailure",
"scopes": ["Crails"],
"full_name": "::Crails::MultimediaConvertFailure",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "VideoFile",
"scopes": ["Crails"],
"full_name": "::Crails::VideoFile",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Format",
"scopes": ["Crails","VideoFile"],
"full_name": "::Crails::VideoFile::Format",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "AudioFile",
"scopes": ["Crails"],
"full_name": "::Crails::AudioFile",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Format",
"scopes": ["Crails","AudioFile"],
"full_name": "::Crails::AudioFile::Format",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Settings",
"scopes": ["Crails","OAuth"],
"full_name": "::Crails::OAuth::Settings",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Api",
"scopes": ["Crails","OAuth"],
"full_name": "::Crails::OAuth::Api",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Session",
"scopes": ["Crails"],
"full_name": "::Crails::Session",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Session::UserPtr",
"name": "UserPtr",
"scopes": ["Crails","Session"],
"full_name": "std::shared_ptr<USER>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Controller",
"scopes": ["Crails","OAuth"],
"full_name": "::Crails::OAuth::Controller",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Google",
"scopes": ["Crails","OAuth"],
"full_name": "::Crails::OAuth::Google",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Facebook",
"scopes": ["Crails","OAuth"],
"full_name": "::Crails::OAuth::Facebook",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Live",
"scopes": ["Crails","OAuth"],
"full_name": "::Crails::OAuth::Live",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ProxyRequestHandler",
"scopes": ["Crails"],
"full_name": "::Crails::ProxyRequestHandler",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "Mode",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "::Crails::ProxyRequestHandler::Mode",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ProxyRequestHandler::ClientRequest",
"name": "ClientRequest",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "boost::beast::http::request<boost::beast::http::string_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ProxyRequestHandler::ClientResponse",
"name": "ClientResponse",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "boost::beast::http::response<boost::beast::http::string_body>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ProxyRequest",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "::Crails::ProxyRequestHandler::ProxyRequest",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ProxyRequestHandler::RuleSolver",
"name": "RuleSolver",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "std::function<ProxyRequest (const HttpRequest &, const std::string &, const std::smatch &)>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Rule",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "::Crails::ProxyRequestHandler::Rule",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::ProxyRequestHandler::Rules",
"name": "Rules",
"scopes": ["Crails","ProxyRequestHandler"],
"full_name": "std::vector<Rule>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Database",
"scopes": ["Crails","Redis"],
"full_name": "::Crails::Redis::Database",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SortedList",
"scopes": ["Crails","Redis"],
"full_name": "::Crails::Redis::SortedList",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Redis::SortedList::value_type",
"name": "value_type",
"scopes": ["Crails","Redis","SortedList"],
"full_name": "std::pair<VALUE_TYPE, double>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "List",
"scopes": ["Crails","Redis"],
"full_name": "::Crails::Redis::List",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Redis::List::value_type",
"name": "value_type",
"scopes": ["Crails","Redis","List"],
"full_name": "::VALUE_TYPE",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Connection",
"scopes": ["Crails","Redis"],
"full_name": "::Crails::Redis::Connection",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Controller",
"scopes": ["Crails","Redis"],
"full_name": "::Crails::Redis::Controller",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RenderFile",
"scopes": ["Crails"],
"full_name": "::Crails::RenderFile",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RssTemplate",
"scopes": ["Crails"],
"full_name": "::Crails::RssTemplate",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::RssTemplate::Yieldable",
"name": "Yieldable",
"scopes": ["Crails","RssTemplate"],
"full_name": "std::function<std::string ()>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RssRenderer",
"scopes": ["Crails"],
"full_name": "::Crails::RssRenderer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SeleniumServer",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::SeleniumServer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SeleniumDriver",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::SeleniumDriver",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SeleniumExpectation",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::SeleniumExpectation",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BackgroundServer",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::BackgroundServer",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ExpectationFailed",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::ExpectationFailed",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Helper",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::Helper",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Tests::Helper::Groups",
"name": "Groups",
"scopes": ["Crails","Tests","Helper"],
"full_name": "std::list<Group>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "SeleniumHelper",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::SeleniumHelper",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SentrySettings",
"scopes": ["Crails"],
"full_name": "::Crails::SentrySettings",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::SentrySettings::singleton",
"name": "singleton",
"scopes": ["Crails","SentrySettings"],
"full_name": "::Singleton<SentrySettings>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Sentry",
"scopes": ["Crails"],
"full_name": "::Crails::Sentry",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SideTaskDatabase",
"scopes": ["Sidekix"],
"full_name": "::Sidekix::SideTaskDatabase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Sidekix::Sidetasks",
"name": "Sidetasks",
"scopes": ["Sidekix"],
"full_name": "std::map<std::string, std::function<void (Crails::Params &)>>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "FileDatabase",
"scopes": ["Sidekix"],
"full_name": "::Sidekix::FileDatabase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Database",
"scopes": ["Sidekix","Tests"],
"full_name": "::Sidekix::Tests::Database",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SidetaskLogger",
"scopes": ["Sidekix"],
"full_name": "::Sidekix::SidetaskLogger",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RedisDatabase",
"scopes": ["Sidekix"],
"full_name": "::Sidekix::RedisDatabase",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Sidekix::RedisDatabase::List",
"name": "List",
"scopes": ["Sidekix","RedisDatabase"],
"full_name": "Crails::Redis::SortedList<std::string, Crails::Redis::Connection>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Process",
"scopes": ["Sidekix"],
"full_name": "::Sidekix::Process",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Sidekix::Process::singleton",
"name": "singleton",
"scopes": ["Sidekix","Process"],
"full_name": "::Singleton<Process>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "AuthController",
"scopes": ["Crails"],
"full_name": "::Crails::AuthController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "AuthenticableModel",
"scopes": ["Crails"],
"full_name": "::Crails::AuthenticableModel",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "SessionController",
"scopes": ["Crails"],
"full_name": "::Crails::SessionController",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::SessionController::UserPtr",
"name": "UserPtr",
"scopes": ["Crails","SessionController"],
"full_name": "std::shared_ptr<USER>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Password",
"scopes": ["Crails"],
"full_name": "::Crails::Password",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "ScpMode",
"scopes": ["Crails","Ssh"],
"full_name": "::Crails::Ssh::ScpMode",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Scp",
"scopes": ["Crails","Ssh"],
"full_name": "::Crails::Ssh::Scp",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Session",
"scopes": ["Crails","Ssh"],
"full_name": "::Crails::Ssh::Session",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Channel",
"scopes": ["Crails","Ssh"],
"full_name": "::Crails::Ssh::Channel",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "InputType",
"scopes": ["Crails","Ssh","Channel"],
"full_name": "::Crails::Ssh::Channel::InputType",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Channel",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::Channel",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Sync::Channel::Listener",
"name": "Listener",
"scopes": ["Crails","Sync","Channel"],
"full_name": "::Crails::WebSocket",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 4,
"raw_name": "",
"name": "ClientMode",
"scopes": ["Crails","Sync","Channel"],
"full_name": "::Crails::Sync::Channel::ClientMode",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "ChannelHandle",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::ChannelHandle",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "IUpdate",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::IUpdate",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Update",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::Update",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Transaction",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::Transaction",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Sync::Transaction::UpdateList",
"name": "UpdateList",
"scopes": ["Crails","Sync","Transaction"],
"full_name": "std::list<std::shared_ptr<IUpdate>>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Connection",
"scopes": ["Crails","Odb","Sync"],
"full_name": "::Crails::Odb::Sync::Connection",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ConnectionHandle",
"scopes": ["Crails","Odb","Sync"],
"full_name": "::Crails::Odb::Sync::ConnectionHandle",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Channels",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::Channels",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Sync::Channels::singleton",
"name": "singleton",
"scopes": ["Crails","Sync","Channels"],
"full_name": "::Singleton<Channels>",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ChannelListener",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::ChannelListener",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ChannelClient",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::ChannelClient",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "ChannelRoute",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::ChannelRoute",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "Crails::Sync::ChannelRoute::WebSocketType",
"name": "WebSocketType",
"scopes": ["Crails","Sync","ChannelRoute"],
"full_name": "::WEBSOCKET",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "BroadcastRoute",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::BroadcastRoute",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Task",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::Task",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Settings",
"scopes": ["Crails","Sync","Task"],
"full_name": "::Crails::Sync::Task::Settings",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Stream",
"scopes": ["Crails","Sync"],
"full_name": "::Crails::Sync::Stream",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Runner",
"scopes": ["Crails","Tests"],
"full_name": "::Crails::Tests::Runner",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestUrlParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestUrlParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestXmlParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestXmlParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "RequestYamlParser",
"scopes": ["Crails"],
"full_name": "::Crails::RequestYamlParser",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "CastMethod",
"scopes": ["XmlRpc"],
"full_name": "::XmlRpc::CastMethod",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 2,
"raw_name": "",
"name": "Variable",
"scopes": ["XmlRpc"],
"full_name": "::XmlRpc::Variable",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "XmlRpc::CastMethod::Type",
"name": "Type",
"scopes": ["XmlRpc","CastMethod"],
"full_name": "T (XmlRpc::Variable::*)() const",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 3,
"raw_name": "XmlRpc::CastMethod::TypeRef",
"name": "TypeRef",
"scopes": ["XmlRpc","CastMethod"],
"full_name": "T &(XmlRpc::Variable::*)() const",
"is_const": true,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Controller",
"scopes": ["XmlRpc"],
"full_name": "::XmlRpc::Controller",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Struct",
"scopes": ["XmlRpc"],
"full_name": "::XmlRpc::Struct",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Client",
"scopes": ["XmlRpc"],
"full_name": "::XmlRpc::Client",
"is_const": false,
"ref": 0,
"ptr": 0
}
,
{
"kind": 1,
"raw_name": "",
"name": "Fault",
"scopes": ["XmlRpc"],
"full_name": "::XmlRpc::Fault",
"is_const": false,
"ref": 0,
"ptr": 0
}
  ],  "classes": [
{
"type": "class",
"name": "Flyweight",
"full_name": "::Flyweight",
"inherits": [],
"module": "libcrails-design-patterns",
"include": "crails/utils/flyweight.hpp",
"template_params": [{"type": "typename","name": "TYPE"},{"type": "typename","name": "KEY_TYPE"}],
"doc": "docs/Flyweight.html",
"excerpt": "<p>Template implementation for the <a href=\"https://en.wikipedia.org/wiki/Flyweight_pattern\">Flyweight design pattern</a>.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<TYPE>","alias": "shared_ptr<TYPE>"},
  "virtual": 2,
  "static": false,
  "name": "create_instance",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::KEY_TYPE","name": "key","alias": "KEY_TYPE"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<TYPE>","alias": "shared_ptr<TYPE>"},
  "static": false,
  "name": "require",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::KEY_TYPE","name": "key","alias": "KEY_TYPE"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "contains",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::KEY_TYPE","name": "key","alias": "KEY_TYPE"}]
}
,{
  "static": false,
  "name": "release",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::KEY_TYPE","name": "key","alias": "KEY_TYPE"}]
}
,{
  "static": false,
  "name": "garbage_collect",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Instances","visibility": "private","static": false,"name": "instances","alias": "Instances"}]
}
,
{
"type": "class",
"name": "FileCache",
"full_name": "::Crails::FileCache",
"inherits": ["::Flyweight"],
"module": "libcrails",
"include": "crails/file_cache.hpp",
"doc": "docs/Crails/FileCache.html",
"excerpt": "<p>Loads file from the filesystem, and caches them until <code>garbage_collect</code> is called. The [FileCache::Lock] class should be usedas a <a href=\"https://stackoverflow.com/questions/31365013/what-is-scopeguard-in-c\">scope guard</a> to ensure thread...</p>",
"constructors": [
]
,
"methods": [
{
  "static": false,
  "name": "lock",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "unlock",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<std::string>","alias": "shared_ptr<std::string>"},
  "virtual": 1,
  "static": false,
  "name": "create_instance",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "private","static": false,"name": "mutex","alias": "mutex"}]
}
,
{
"type": "struct",
"name": "Lock",
"full_name": "::Crails::FileCache::Lock",
"inherits": [],
"module": "libcrails",
"include": "crails/file_cache.hpp",
"constructors": [
{
  "static": false,
  "name": "Lock",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::FileCache","name": "cache","alias": "FileCache"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::FileCache","visibility": "private","static": false,"name": "self","alias": "FileCache"}]
}
,
{
"type": "class",
"name": "backtrace",
"full_name": "::boost_ext::backtrace",
"inherits": [],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "backtrace",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "frames_no","alias": "size_t"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "stack_size",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"},
  "const": true,
  "static": false,
  "name": "return_address",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "frame_no"}]
}
,{
  "const": true,
  "static": false,
  "name": "trace_line",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "frame_no"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "out","alias": "ostream"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "trace_line",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "frame_no"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "trace",
  "visibility": "public",
  "params": []
}
,{
  "const": true,
  "static": false,
  "name": "trace",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "out","alias": "ostream"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::size_t","visibility": "public","static": true,"name": "default_stack_size","alias": "size_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<void *>","visibility": "private","static": false,"name": "frames_","alias": "vector<void *>"}]
}
,
{
"type": "class",
"name": "exception",
"full_name": "::boost_ext::exception",
"inherits": ["std::exception","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "bad_cast",
"full_name": "::boost_ext::bad_cast",
"inherits": ["std::bad_cast","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "runtime_error",
"full_name": "::boost_ext::runtime_error",
"inherits": ["std::runtime_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "runtime_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "range_error",
"full_name": "::boost_ext::range_error",
"inherits": ["std::range_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "range_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "overflow_error",
"full_name": "::boost_ext::overflow_error",
"inherits": ["std::overflow_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "overflow_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "underflow_error",
"full_name": "::boost_ext::underflow_error",
"inherits": ["std::underflow_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "underflow_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "logic_error",
"full_name": "::boost_ext::logic_error",
"inherits": ["std::logic_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "logic_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "domain_error",
"full_name": "::boost_ext::domain_error",
"inherits": ["std::domain_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "domain_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "length_error",
"full_name": "::boost_ext::length_error",
"inherits": ["std::length_error","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "length_error",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "invalid_argument",
"full_name": "::boost_ext::invalid_argument",
"inherits": ["std::invalid_argument","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "invalid_argument",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "out_of_range",
"full_name": "::boost_ext::out_of_range",
"inherits": ["std::out_of_range","::boost_ext::backtrace"],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "out_of_range",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "s","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "trace_manip",
"full_name": "::boost_ext::details::trace_manip",
"inherits": [],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp",
"constructors": [
{
  "static": false,
  "name": "trace_manip",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::backtrace","name": "tr","alias": "backtrace"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
  "const": true,
  "static": false,
  "name": "write",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "out","alias": "ostream"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 1,"type": "::backtrace","visibility": "private","static": false,"name": "tr_","alias": "backtrace"}]
}
,
{
"type": "class",
"name": "Context",
"full_name": "::Crails::Context",
"inherits": ["std::enable_shared_from_this"],
"module": "libcrails",
"include": "crails/context.hpp",
"doc": "docs/Crails/Context.html",
"excerpt": "<p>The <code>Context</code> object is at the core of the Crails Framework, and represents a Request/Response transaction with an HTTP client. It provides both a [Params] and a [BuildingResponse] as attributes, so you can inspect the content of a request, a...</p>",
"constructors": [
{
  "static": false,
  "name": "Context",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Server","name": "server","alias": "Server"},{"const": false,"ref": 1,"ptr": 0,"type": "::Connection","name": "connection","alias": "Connection"}]
}
]
,
"methods": [
{
"doc": "docs/Crails/Context/protect.html",
  "static": false,
  "name": "protect",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::future<unsigned short>","alias": "future<unsigned short>"},
"doc": "docs/Crails/Context/get_future.html",
  "static": false,
  "name": "get_future",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "run",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "run_parser",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "Server::RequestParsers::const_iterator","alias": "const_iterator"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","alias": "function<void (bool)>"}]
}
,{
  "static": false,
  "name": "run_handler",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "Server::RequestHandlers::const_iterator","alias": "const_iterator"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","alias": "function<void (bool)>"}]
}
,{
  "static": false,
  "name": "on_parsed",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "parsed"}]
}
,{
  "static": false,
  "name": "on_handled",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "handled"}]
}
,{
  "static": false,
  "name": "on_finished",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "handled"},{"const": false,"ref": 0,"ptr": 0,"type": "ExceptionCatcher::Context","visibility": "private","static": false,"name": "exception_context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "::Server","visibility": "private","static": false,"name": "server","alias": "Server"},{"const": false,"ref": 0,"ptr": 0,"type": "std::promise<unsigned short>","visibility": "private","static": false,"name": "end_promise","alias": "promise<unsigned short>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Connection>","visibility": "public","static": false,"name": "connection","alias": "shared_ptr<Connection>"},{"const": false,"ref": 0,"ptr": 0,"type": "::BuildingResponse","visibility": "public","static": false,"name": "response","alias": "BuildingResponse"},{"const": false,"ref": 0,"ptr": 0,"type": "::Params","visibility": "public","static": false,"name": "params","alias": "Params"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","visibility": "public","static": false,"name": "vars","alias": "SharedVars"},{"const": false,"ref": 0,"ptr": 0,"type": "::Utils::Timer","visibility": "public","static": false,"name": "timer","alias": "Timer"},{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "public","static": false,"name": "mutex","alias": "mutex"}]
}
,
{
"type": "class",
"name": "Server",
"full_name": "::Crails::Server",
"inherits": [],
"module": "libcrails",
"include": "crails/server.hpp",
"doc": "docs/Crails/Server.html",
"excerpt": "<p>The central piece of the framework. Listens on a given hostname and port, accepts connections and dispatches them to a [Context].</p>",
"constructors": [
{
  "static": false,
  "name": "Server",
  "visibility": "protected",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "launch",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
,{
  "static": false,
  "name": "stop",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "restart",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::RequestHandler","alias": "RequestHandler"},
  "static": true,
  "name": "get_request_handler",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::FileCache","alias": "FileCache"},
  "static": true,
  "name": "get_file_cache",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Directories","alias": "Directories"},
  "static": true,
  "name": "get_public_paths",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "get_temporary_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "boost::asio::io_context","alias": "io_context"},
  "static": true,
  "name": "get_io_context",
  "visibility": "public",
  "params": []
}
,{
  "static": true,
  "name": "set_environment",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}]
}
,{
  "static": false,
  "name": "add_request_handler",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::RequestHandler","name": "request_handler","alias": "RequestHandler"}]
}
,{
  "static": false,
  "name": "add_request_parser",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::RequestParser","name": "request_parser","alias": "RequestParser"}]
}
,{
  "static": true,
  "name": "throw_crash_segv",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "initialize_exception_catcher",
  "visibility": "private",
  "params": []
}
,{
  "const": true,
  "static": false,
  "name": "initialize_pid_file",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "do_restart",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "::Directories","visibility": "protected","static": true,"name": "public_paths","alias": "Directories"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": true,"name": "temporary_path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ExceptionCatcher","visibility": "protected","static": false,"name": "exception_catcher","alias": "ExceptionCatcher"},{"const": false,"ref": 0,"ptr": 0,"type": "::RequestParsers","visibility": "private","static": true,"name": "request_parsers","alias": "RequestParsers"},{"const": false,"ref": 0,"ptr": 0,"type": "::RequestHandlers","visibility": "private","static": true,"name": "request_handlers","alias": "RequestHandlers"},{"const": false,"ref": 0,"ptr": 0,"type": "::FileCache","visibility": "private","static": true,"name": "file_cache","alias": "FileCache"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "running"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "marked_for_restart"}]
}
,
{
"type": "class",
"name": "ExceptionCatcher",
"full_name": "::Crails::ExceptionCatcher",
"inherits": [],
"module": "libcrails",
"include": "crails/exception_catcher.hpp",
"doc": "docs/Crails/ExceptionCatcher.html",
"excerpt": "<p>Dynamic try/catch mechanism. Define catch blocks using [std::function], then run protected code anywhere else in your application.</p>",
"constructors": [
{
  "static": false,
  "name": "ExceptionCatcher",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "const": true,
"doc": "docs/Crails/ExceptionCatcher/run.html",
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "const": true,
"doc": "docs/Crails/ExceptionCatcher/run_protected.html",
  "static": false,
  "name": "run_protected",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "template_params": [{"type": "typename","name": "EXCEPTION"}],
"doc": "docs/Crails/ExceptionCatcher/add_exception_catcher.html",
  "static": false,
  "name": "add_exception_catcher",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "EXCEPTION"}],
"doc": "docs/Crails/ExceptionCatcher/add_exception_catcher.html",
  "static": false,
  "name": "add_exception_catcher",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (Crails::Context &, const EXCEPTION)>","alias": "function<void (Crails::Context &, const EXCEPTION)>"}]
}
,{
  "static": false,
  "name": "default_exception_handler",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "exception_name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "trace","alias": "string"}]
}
,{
  "const": true,
  "static": false,
  "name": "response_exception",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","name": "exception_name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Functions","visibility": "private","static": false,"name": "functions","alias": "Functions"}]
}
,
{
"type": "class",
"name": "Singleton",
"full_name": "::Singleton",
"inherits": [],
"module": "libcrails-design-patterns",
"include": "crails/utils/singleton.hpp",
"template_params": [{"type": "typename","name": "TYPE"}],
"doc": "docs/Singleton.html",
"excerpt": "<p>Template implementation for the <a href=\"https://en.wikipedia.org/wiki/Singleton_pattern\">Singleton design pattern</a>. It can be used on its own,or with the [SingletonInstantiator].</p>",
"constructors": [
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "Args"}],
  "static": true,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}]
}
,{
  "template_params": [{"type": "typename","name": "IMPLEMENTATION"},{"type": "typename","name": "Args"}],
  "static": true,
  "name": "implement",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}]
}
,{
  "static": true,
  "name": "finalize",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::TYPE","alias": "TYPE"},
  "static": true,
  "name": "get",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::TYPE","alias": "TYPE"},
  "static": true,
  "name": "require",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 1,"type": "::TYPE","visibility": "private","static": true,"name": "ptr","alias": "TYPE"}]
}
,
{
"type": "class",
"name": "SingletonImplementation",
"full_name": "::SingletonImplementation",
"inherits": [],
"module": "libcrails-design-patterns",
"include": "crails/utils/singleton.hpp",
"template_params": [{"type": "typename","name": "TYPE"},{"type": "typename","name": "FROM"}],
"constructors": [
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "Args"}],
  "static": true,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}]
}
,{
  "static": true,
  "name": "finalize",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::TYPE","alias": "TYPE"},
  "static": true,
  "name": "get",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::TYPE","alias": "TYPE"},
  "static": true,
  "name": "require",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "SingletonInstantiator",
"full_name": "::SingletonInstantiator",
"inherits": [],
"module": "libcrails-design-patterns",
"include": "crails/utils/singleton.hpp",
"template_params": [{"type": "typename","name": "TYPE"}],
"doc": "docs/SingletonInstantiator.html",
"excerpt": "<p><a href=\"https://stackoverflow.com/questions/31365013/what-is-scopeguard-in-c\">Scope guard</a> for singleton classes using the [Singleton] template.</p>",
"constructors": [
{
  "static": false,
  "name": "SingletonInstantiator<TYPE>",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::SingletonInstantiator<TYPE>","alias": "SingletonInstantiator<TYPE>"}]
}
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "Args"}],
  "static": false,
  "name": "SingletonInstantiator<TYPE>",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::TYPE","alias": "TYPE"},
  "const": true,
  "static": false,
  "name": "operator->",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::TYPE","alias": "TYPE"},
  "const": true,
  "static": false,
  "name": "operator*",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "DataTree",
"full_name": "::DataTree",
"inherits": [],
"module": "libdatatree",
"include": "crails/std/datatree.hpp",
"doc": "docs/DataTree.html",
"excerpt": "<p>The <code>DataTree</code> class provides a data structure that stores an arbitrarily deeply nested tree of values, indexed at each level by some key. Each node of the tree stores its own value, or a list of subnodes and their keys.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "static": false,
  "name": "as_data",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "const": true,
  "static": false,
  "name": "as_data",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "const": true,
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "static": false,
  "name": "clear",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_json",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::stringstream","alias": "stringstream"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_json",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_json_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_json",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_xml",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::stringstream","alias": "stringstream"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_xml",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "from_xml_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_xml",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data::iterator","alias": "iterator"},
  "const": true,
  "static": false,
  "name": "begin",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data::iterator","alias": "iterator"},
  "const": true,
  "static": false,
  "name": "end",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data::iterator","alias": "iterator"},
  "static": false,
  "name": "erase",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data::iterator","name": "it","alias": "iterator"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","alias": "ptree"},
  "static": false,
  "name": "get_ptree",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","alias": "ptree"},
  "const": true,
  "static": false,
  "name": "get_ptree",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "boost::property_tree::ptree","visibility": "private","static": false,"name": "tree","alias": "ptree"}]
}
,
{
"type": "class",
"name": "Data",
"full_name": "::Data",
"inherits": [],
"module": "libdatatree",
"include": "crails/std/datatree.hpp",
"doc": "docs/Data.html",
"excerpt": "<p>Represents a node in a [DataTree], and allows evaluating, modifying the content of the node, or exploring its children.</p>",
"constructors": [
{
  "static": false,
  "name": "Data",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","name": "tree","alias": "ptree"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "static": false,
  "name": "Data",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","name": "tree","alias": "ptree"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "context","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "overload_path",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
"doc": "docs/Data/operator[].html",
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "const": true,
"doc": "docs/Data/operator[].html",
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
"doc": "docs/Data/operator[].html",
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "const": true,
"doc": "docs/Data/operator[].html",
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "const": true,
"doc": "docs/Data/at.html",
  "static": false,
  "name": "at",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "i"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "const": true,
"doc": "docs/Data/find_missing_keys.html",
  "static": false,
  "name": "find_missing_keys",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","name": "keys","alias": "vector<std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
"doc": "docs/Data/require.html",
  "static": false,
  "name": "require",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","name": "keys","alias": "vector<std::string>"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Data/get_path.html",
  "static": false,
  "name": "get_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Data/get_key.html",
  "static": false,
  "name": "get_key",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
"doc": "docs/Data/count.html",
  "static": false,
  "name": "count",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "as",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "defaults_to",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "operator type-parameter-0-0",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"},
  "const": true,
  "static": false,
  "name": "to_vector",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "from_vector",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"},
  "const": true,
  "static": false,
  "name": "operator vector<type-parameter-0-0, allocator<type-parameter-0-0>>",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::Data"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},
"doc": "docs/Data/operator=.html",
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::Data"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},
"doc": "docs/Data/operator=.html",
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},
"doc": "docs/Data/operator=.html",
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","name": "copy","alias": "Data"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator!=",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "const": true,
  "static": false,
  "name": "operator||",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "value","alias": "Data"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "operator||",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "static": false,
  "name": "push_back",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "push_back",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
"doc": "docs/Data/is_null.html",
  "static": false,
  "name": "is_null",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
"doc": "docs/Data/is_blank.html",
  "static": false,
  "name": "is_blank",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "is_array",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
"doc": "docs/Data/exists.html",
  "static": false,
  "name": "exists",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Data/destroy.html",
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Data/each.html",
  "static": false,
  "name": "each",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (Data)>","name": "functor","alias": "function<bool (Data)>"}]
}
,{
  "const": true,
"doc": "docs/Data/each.html",
  "static": false,
  "name": "each",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (const Data)>","name": "functor","alias": "function<bool (const Data)>"}]
}
,{
  "const": true,
"doc": "docs/Data/output.html",
  "static": false,
  "name": "output",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "out","alias": "ostream"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_json",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_xml",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Data/merge.html",
  "static": false,
  "name": "merge",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
,{
"doc": "docs/Data/merge.html",
  "static": false,
  "name": "merge",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","name": "data_tree","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","alias": "ptree"},
  "static": false,
  "name": "require_ptree",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","alias": "ptree"},
"doc": "docs/Data/get_ptree.html",
  "static": false,
  "name": "get_ptree",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "boost::property_tree::ptree","alias": "ptree"},
  "const": true,
"doc": "docs/Data/get_ptree.html",
  "static": false,
  "name": "get_ptree",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "const": true,
"doc": "docs/Data/get_keys.html",
  "static": false,
  "name": "get_keys",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::iterator","alias": "iterator"},
  "const": true,
  "static": false,
  "name": "begin",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::iterator","alias": "iterator"},
  "const": true,
  "static": false,
  "name": "end",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::iterator","alias": "iterator"},
  "static": false,
  "name": "erase",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::iterator","name": "deleted","alias": "iterator"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 1,"type": "boost::property_tree::ptree","visibility": "private","static": false,"name": "tree","alias": "ptree"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "context","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "key","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "path","alias": "string"}]
}
,
{
"type": "class",
"name": "iterator",
"full_name": "::Data::iterator",
"inherits": [],
"module": "libdatatree",
"include": "crails/std/datatree.hpp",
"constructors": [
{
  "static": false,
  "name": "iterator",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::iterator","name": "copy","alias": "iterator"}]
}
,{
  "static": false,
  "name": "iterator",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::property_tree::ptree::iterator","name": "it","alias": "iterator"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "static": false,
  "name": "operator*",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::iterator","alias": "iterator"},
  "static": false,
  "name": "operator++",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::iterator","name": "other","alias": "iterator"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator!=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::iterator","name": "other","alias": "iterator"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "boost::property_tree::ptree::iterator","visibility": "private","static": false,"name": "internal_iterator","alias": "iterator"}]
}
,
{
"type": "class",
"name": "Params",
"full_name": "::Crails::Params",
"inherits": ["::DataTree"],
"module": "libcrails",
"include": "crails/params.hpp",
"doc": "docs/Crails/Params.html",
"excerpt": "<p>Represents the parameters of an HTTP query as an arbitrarily deeply neested tree of values. <code>Params</code> extends on the [DataTree] class, using the same API to access its contents.</p>",
"constructors": [
{
  "static": false,
  "name": "Params",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::File","alias": "File"},
  "const": true,
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "key","alias": "char"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::File","alias": "File"},
  "const": true,
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "key","alias": "char"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::File","alias": "File"},
  "const": true,
  "static": false,
  "name": "get_upload",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Files","alias": "Files"},
  "const": true,
  "static": false,
  "name": "get_files",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "static": false,
  "name": "get_session",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SessionStore>","visibility": "private","static": false,"name": "session","alias": "unique_ptr<SessionStore>"},{"const": false,"ref": 0,"ptr": 0,"type": "::Files","visibility": "private","static": false,"name": "files","alias": "Files"}]
}
,
{
"type": "class",
"name": "RequestParser",
"full_name": "::Crails::RequestParser",
"inherits": [],
"module": "libcrails",
"include": "crails/request_parser.hpp",
"doc": "docs/Crails/RequestParser.html",
"excerpt": "<p>Interface for request parsers. Request parsers are <a href=\"https://www.geeksforgeeks.org/functors-in-cpp\">functors</a> which receive a [Context] and a callback as parameters.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (Status)>","alias": "function<void (Status)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "content_type_matches",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"},{"const": true,"ref": 0,"ptr": 0,"type": "std::regex","alias": "regex"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestHandler",
"full_name": "::Crails::RequestHandler",
"inherits": [],
"module": "libcrails",
"include": "crails/request_handler.hpp",
"doc": "docs/Crails/RequestHandler.html",
"excerpt": "<p>Interface for request handlers. Request handlers are <a href=\"https://www.geeksforgeeks.org/functors-in-cpp\">functors</a> which receive a [Context] and a callback as parameters.</p>",
"constructors": [
{
  "static": false,
  "name": "RequestHandler",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "name","alias": "string"}]
}
,
{
"type": "class",
"name": "Connection",
"full_name": "::Crails::Connection",
"inherits": ["std::enable_shared_from_this"],
"module": "libcrails",
"include": "crails/server/connection.hpp",
"doc": "docs/Crails/Connection.html",
"excerpt": "<p>Represents a connection with an HTTP client. When a query is received, the connection instantiates a [Context] and let it run the query through the <a href=\"https://crails-framework.github.io/website/request_pipeline\">Request Pipeline</a>.</p>",
"constructors": [
{
  "static": false,
  "name": "Connection",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Server","alias": "Server"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ip::tcp::socket","alias": "socket"}]
}
,{
  "static": false,
  "name": "Connection",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Server","alias": "Server"},{"const": false,"ref": 0,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "start",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "write",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/Connection/close.html",
  "static": false,
  "name": "close",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::HttpParser","alias": "HttpParser"},
  "static": false,
  "name": "get_parser",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"},
  "const": true,
  "static": false,
  "name": "get_request",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::HttpResponse","alias": "HttpResponse"},
  "static": false,
  "name": "get_response",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "boost::beast::tcp_stream","alias": "tcp_stream"},
"doc": "docs/Crails/Connection/get_stream.html",
  "static": false,
  "name": "get_stream",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/Connection/get_connection_id.html",
  "static": false,
  "name": "get_connection_id",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/Connection/expires_after.html",
  "static": false,
  "name": "expires_after",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::duration<int>","alias": "duration<int>"}]
}
,{
"doc": "docs/Crails/Connection/on_received_body_chunk.html",
  "static": false,
  "name": "on_received_body_chunk",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string_view)>","name": "callback","alias": "function<void (std::string_view)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "get_content_length_remaining",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "get_body",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string_view)>","alias": "function<void (std::string_view)>"}]
}
,{
  "template_params": [{"type": "typename","name": "CONNECTION"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<CONNECTION>","alias": "shared_ptr<CONNECTION>"},
  "static": false,
  "name": "move_to",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "expect_read",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "expect_body",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "read",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "ec","alias": "error_code"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","name": "bytes_transferred","alias": "size_t"}]
}
,{
  "static": false,
  "name": "read_header",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "ec","alias": "error_code"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","name": "bytes_transferred","alias": "size_t"}]
}
,{
  "static": false,
  "name": "on_write",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "keep_alive"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "ec","alias": "error_code"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"}]
}
,{
  "static": false,
  "name": "on_read_error",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","alias": "error_code"}]
}
,{
  "static": false,
  "name": "reset_body_chunk_callback",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "::Server","visibility": "private","static": false,"name": "server","alias": "Server"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::tcp_stream","visibility": "private","static": false,"name": "stream","alias": "tcp_stream"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::flat_buffer","visibility": "private","static": false,"name": "buffer","alias": "flat_buffer"},{"const": false,"ref": 0,"ptr": 0,"type": "::HttpRequest","visibility": "private","static": false,"name": "request","alias": "HttpRequest"},{"const": false,"ref": 0,"ptr": 0,"type": "::HttpResponse","visibility": "private","static": false,"name": "response","alias": "HttpResponse"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "connection_id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::optional<HttpParser>","visibility": "private","static": false,"name": "parser","alias": "optional<HttpParser>"},{"const": false,"ref": 0,"ptr": 0,"type": "::char[8192]","visibility": "private","static": false,"name": "body_buffer","alias": "char[8192]"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "max_body_size"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string_view)>","visibility": "private","static": false,"name": "body_chunk_callback","alias": "function<void (std::string_view)>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "body","alias": "string"}]
}
,
{
"type": "struct",
"name": "Crash",
"full_name": "::Crails::Server::Crash",
"inherits": ["::boost_ext::exception"],
"module": "libcrails",
"include": "crails/server.hpp",
"constructors": [
{
  "static": false,
  "name": "Crash",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "details","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "details","alias": "string"}]
}
,
{
"type": "class",
"name": "BuildingResponse",
"full_name": "::Crails::BuildingResponse",
"inherits": ["::Crails::RenderTarget"],
"module": "libcrails",
"include": "crails/http_response.hpp",
"doc": "docs/Crails/BuildingResponse.html",
"excerpt": "<p>Represents the transient state of an HTTP repsonse that may be sent to a client at any moment. It wraps a [HttpResponse] object, and can progressively edit it until the <code>send</code> method gets called.</p>",
"constructors": [
{
  "static": false,
  "name": "BuildingResponse",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Connection","name": "connection","alias": "Connection"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "set_response",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::HttpStatus","name": "code","alias": "HttpStatus"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
,{
  "static": false,
  "name": "set_response",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::HttpStatus","name": "code","alias": "HttpStatus"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "body","alias": "string_view"}]
}
,{
  "static": false,
  "name": "set_status_code",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::HttpStatus","name": "code","alias": "HttpStatus"}]
}
,{
"doc": "docs/Crails/BuildingResponse/set_header.html",
  "static": false,
  "name": "set_header",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::http::field","name": "key","alias": "field"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "virtual": 1,
"doc": "docs/Crails/BuildingResponse/set_header.html",
  "static": false,
  "name": "set_header",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "size","alias": "size_t"}]
}
,{
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "value","alias": "string_view"}]
}
,{
"doc": "docs/Crails/BuildingResponse/send.html",
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "sent",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::HttpStatus","alias": "HttpStatus"},
  "const": true,
  "static": false,
  "name": "get_status_code",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::HttpResponse","alias": "HttpResponse"},
  "static": false,
  "name": "get_raw_response",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::HttpResponse","alias": "HttpResponse"},
  "const": true,
  "static": false,
  "name": "get_raw_response",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::Connection","visibility": "private","static": false,"name": "connection","alias": "Connection"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "already_sent"}]
}
,
{
"type": "class",
"name": "SessionStore",
"full_name": "::Crails::SessionStore",
"inherits": [],
"module": "libcrails",
"include": "crails/session_store.hpp",
"doc": "docs/Crails/SessionStore.html",
"excerpt": "<p>Interface for <code>SessionStore</code> backends, providing session data based on cookies - or anything else depending on the implementation.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
  "static": false,
  "name": "load",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"}]
}
,{
  "virtual": 2,
  "static": false,
  "name": "finalize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","alias": "BuildingResponse"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 2,
  "static": false,
  "name": "to_data",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "to_data",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Factory",
"full_name": "::Crails::SessionStore::Factory",
"inherits": [],
"module": "libcrails",
"include": "crails/session_store.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SessionStore>","alias": "unique_ptr<SessionStore>"},
  "static": true,
  "name": "create",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SessionStore>","alias": "unique_ptr<SessionStore>"},
  "virtual": 1,
  "static": false,
  "name": "make",
  "visibility": "protected",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"}]
}
,
{
"type": "struct",
"name": "MultipartParser",
"full_name": "::Crails::MultipartParser",
"inherits": [],
"module": "libcrails-multipart-parser",
"include": "crails/multipart.hpp",
"constructors": [
]
,
"methods": [
{
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
,{
  "static": false,
  "name": "parse",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Params","alias": "Params"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "read_buffer","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "public","static": false,"name": "to_read"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "public","static": false,"name": "total_read"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "boundary","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "short","visibility": "public","static": false,"name": "parsed_state"},{"const": false,"ref": 0,"ptr": 0,"type": "std::ofstream","visibility": "public","static": false,"name": "file","alias": "ofstream"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "mimetype","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "public","static": false,"name": "content_data","alias": "DataTree"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "content_disposition","alias": "string"}]
}
,
{
"type": "class",
"name": "ActionRequestHandler",
"full_name": "::Crails::ActionRequestHandler",
"inherits": ["::Crails::RequestHandler"],
"module": "libcrails-action",
"include": "crails/request_handlers/action.hpp",
"doc": "docs/Crails/ActionRequestHandler.html",
"excerpt": "<p>Implementation of the [RequestHandler] interface that forwards queries to the [Router], and exists the <a href=\"https://crails-framework.github.io/website/request_pipeline\">Request Pipeline</a> if the router was able to trigger an <em>action</em> from t...</p>",
"constructors": [
{
  "static": false,
  "name": "ActionRequestHandler",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "BodyParser",
"full_name": "::Crails::BodyParser",
"inherits": ["::Crails::RequestParser"],
"module": "libcrails",
"include": "crails/request_parser.hpp",
"doc": "docs/Crails/BodyParser.html",
"excerpt": "<p>Interface for [RequestParser] implementations that need the body of an [HttpRequest] to be available before performing their task.</p>",
"constructors": [
]
,
"methods": [
{
  "const": true,
  "static": false,
  "name": "wait_for_body",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_too_large",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestMultipartParser",
"full_name": "::Crails::RequestMultipartParser",
"inherits": ["::Crails::RequestParser"],
"module": "libcrails-multipart-parser",
"include": "crails/request_parsers/multipart_parser.hpp",
"doc": "docs/Crails/RequestMultipartParser.html",
"excerpt": "<p>Implementation of the [RequestParser] interface that parses variables from a request body provided using the <code>multipart/form-data</code> format, typically used for sending HTML forms including files.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "const": true,
  "static": false,
  "name": "parse_multipart",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "const": true,
  "static": false,
  "name": "on_receive",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<PendingBody>","alias": "shared_ptr<PendingBody>"},{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "chunk","alias": "string_view"}]
}
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "File",
"full_name": "::Crails::Params::File",
"inherits": [],
"module": "libcrails",
"include": "crails/params.hpp",
"doc": "docs/Crails/Params/File.html",
"excerpt": "<p>Represents a file uploaded by the client request.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "comp","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "temporary_path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "key","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "mimetype","alias": "string"}]
}
,
{
"type": "class",
"name": "RenderTarget",
"full_name": "::Crails::RenderTarget",
"inherits": [],
"module": "libcrails-renderer",
"include": "crails/render_target.hpp",
"doc": "docs/Crails/RenderTarget.html",
"excerpt": "<p>Interface for targets of a [Renderer]. A render target can be a file, a string, an HTTP response, a mail.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "set_header",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "virtual": 2,
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "size","alias": "size_t"}]
}
,{
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
,{
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "body","alias": "string_view"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RenderString",
"full_name": "::Crails::RenderString",
"inherits": ["::Crails::RenderTarget"],
"module": "libcrails-renderer",
"include": "crails/render_target.hpp",
"doc": "docs/Crails/RenderString.html",
"excerpt": "<p>A [RenderTarget] implementation that stores rendered content into a string, which you can then access as a [std::string_view] using the <code>value</code> method, or as <code>const char*</code> using the <code>c_str</code> method.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","name": "size","alias": "size_t"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "const": true,
  "static": false,
  "name": "value",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "const": true,
  "static": false,
  "name": "c_str",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "length",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "body","alias": "string"}]
}
,
{
"type": "class",
"name": "RenderStream",
"full_name": "::Crails::RenderStream",
"inherits": ["::Crails::RenderTarget"],
"module": "libcrails-renderer",
"include": "crails/render_target.hpp",
"constructors": [
{
  "static": false,
  "name": "RenderStream",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "a","alias": "ostream"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "size","alias": "size_t"}]
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","visibility": "private","static": false,"name": "sink","alias": "ostream"}]
}
,
{
"type": "class",
"name": "Timer",
"full_name": "::Utils::Timer",
"inherits": [],
"module": "libcrails",
"include": "crails/utils/timer.hpp",
"constructors": [
{
  "static": false,
  "name": "Timer",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "float"},
  "const": true,
  "static": false,
  "name": "GetElapsedMilliseconds",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "float"},
  "const": true,
  "static": false,
  "name": "GetElapsedSeconds",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Restart",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::struct timeval","visibility": "private","static": false,"name": "_lastTime","alias": "struct timeval"}]
}
,
{
"type": "class",
"name": "TimeGuard",
"full_name": "::Utils::TimeGuard",
"inherits": ["::Utils::Timer"],
"module": "libcrails",
"include": "crails/utils/timer.hpp",
"constructors": [
{
  "static": false,
  "name": "TimeGuard",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::float","name": "out","alias": "float"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::float","visibility": "private","static": false,"name": "out","alias": "float"}]
}
,
{
"type": "class",
"name": "Request",
"full_name": "::Crails::Tests::Request",
"inherits": [],
"module": "libcrails-tests",
"include": "crails/tests/request.hpp",
"constructors": [
{
  "static": false,
  "name": "Request",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::http::verb","name": "method","alias": "verb"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uri","alias": "string"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "public","static": false,"name": "params","alias": "DataTree"},{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "public","static": false,"name": "session","alias": "DataTree"},{"const": false,"ref": 0,"ptr": 0,"type": "::HttpRequest","visibility": "public","static": false,"name": "request","alias": "HttpRequest"},{"const": false,"ref": 0,"ptr": 0,"type": "::HttpResponse","visibility": "public","static": false,"name": "response","alias": "HttpResponse"}]
}
,
{
"type": "struct",
"name": "NullPointerException",
"full_name": "::NullPointerException",
"inherits": ["::boost_ext::exception"],
"module": "libcrails",
"include": "crails/safe_ptr.hpp",
"doc": "docs/NullPointerException.html",
"excerpt": "<p>Thrown by [safe_ptr] when trying to dereference a null pointer.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "safe_ptr",
"full_name": "::safe_ptr",
"inherits": ["std::shared_ptr"],
"module": "libcrails",
"include": "crails/safe_ptr.hpp",
"template_params": [{"type": "typename","name": "T"}],
"doc": "docs/safe_ptr.html",
"excerpt": "<p>Convenience implementation of [std::shared_ptr] that avoid crashes when trying to dereference null pointers. Instead of triggering undefined behaviors, trying to dereference a null pointer using <code>safe_ptr</code> will throw a [NullPointerException]....</p>",
"constructors": [
{
  "static": false,
  "name": "safe_ptr<T>",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "safe_ptr<T>",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::T","name": "ptr","alias": "T"}]
}
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "CPY"}],
  "static": false,
  "name": "safe_ptr<T>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::CPY","alias": "CPY"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::safe_ptr<T>","alias": "safe_ptr<T>"},
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::shared_ptr<T>","name": "cpy","alias": "shared_ptr<T>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "operator->",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "operator*",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "WebSocket",
"full_name": "::Crails::WebSocket",
"inherits": ["std::enable_shared_from_this"],
"module": "libcrails",
"include": "crails/websocket.hpp",
"doc": "docs/Crails/WebSocket.html",
"excerpt": "<p>Represents an on-going connection with a <a href=\"https://en.wikipedia.org/wiki/WebSocket\">WebSocket</a>.</p>",
"constructors": [
{
  "static": false,
  "name": "WebSocket",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","name": "connection","alias": "Context"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "accept",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"}]
}
,{
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "read",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/WebSocket/send.html",
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::MessageType","name": "type","alias": "MessageType"}]
}
,{
"doc": "docs/Crails/WebSocket/send.html",
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "message","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","name": "length","alias": "size_t"},{"const": false,"ref": 0,"ptr": 0,"type": "::MessageType","name": "type","alias": "MessageType"}]
}
,{
  "virtual": 1,
  "const": true,
"doc": "docs/Crails/WebSocket/disconnected.html",
  "static": false,
  "name": "disconnected",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
"doc": "docs/Crails/WebSocket/received.html",
  "static": false,
  "name": "received",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::MessageType","alias": "MessageType"}]
}
,{
  "static": false,
  "name": "on_run",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "on_accept",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "ec","alias": "error_code"}]
}
,{
  "static": false,
  "name": "on_read",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "ec","alias": "error_code"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"}]
}
,{
  "static": false,
  "name": "on_write",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "ec","alias": "error_code"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"}]
}
,{
  "static": false,
  "name": "write_next_message",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::websocket::stream<boost::beast::tcp_stream>","visibility": "private","static": false,"name": "stream","alias": "stream<boost::beast::tcp_stream>"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::dynamic_string_buffer<char, std::char_traits<char>, std::allocator<char>>","visibility": "private","static": false,"name": "dynamic_buffer","alias": "dynamic_string_buffer<char, std::char_traits<char>, std::allocator<char>>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "receive_buffer","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::list<Message>","visibility": "private","static": false,"name": "send_buffers","alias": "list<Message>"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "reading"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "writing"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "closed"},{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "private","static": false,"name": "write_mutex","alias": "mutex"}]
}
,
{
"type": "class",
"name": "NoSessionStore",
"full_name": "::Crails::NoSessionStore",
"inherits": ["::Crails::SessionStore"],
"module": "libcrails",
"include": "crails/session_store/no_session_store.hpp",
"doc": "docs/Crails/NoSessionStore.html",
"excerpt": "<p>Stub implementation for [SessionStore] that doesn't store or load any session variables.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "load",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "finalize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","alias": "BuildingResponse"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 1,
  "static": false,
  "name": "to_data",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "to_data",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "private","static": false,"name": "stub","alias": "DataTree"}]
}
,
{
"type": "class",
"name": "Factory",
"full_name": "::Crails::NoSessionStore::Factory",
"inherits": ["::Crails::SessionStore::Factory"],
"module": "libcrails",
"include": "crails/session_store/no_session_store.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SessionStore>","alias": "unique_ptr<SessionStore>"},
  "virtual": 1,
  "static": false,
  "name": "make",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "ProgramOptions",
"full_name": "::Crails::ProgramOptions",
"inherits": [],
"module": "libcrails",
"include": "crails/program_options.hpp",
"doc": "docs/Crails/ProgramOptions.html",
"excerpt": "<p>Parses an argument list (<code>int argc, const char** argv</code>) for a Crails server and provides an easy interface to consult each of the option. Based on <a href=\"https://www.boost.org/doc/libs/master/doc/html/program_options.html\">boost::program_op...</p>",
"constructors": [
{
  "static": false,
  "name": "ProgramOptions",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "options"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ip::tcp::endpoint","alias": "endpoint"},
  "const": true,
  "static": false,
  "name": "get_endpoint",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"},
  "const": true,
  "static": false,
  "name": "get_thread_count",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_pidfile_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_log_file",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_error_log_file",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
  "const": true,
  "static": false,
  "name": "get_value",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "boost::program_options::variables_map","visibility": "private","static": false,"name": "vm","alias": "variables_map"}]
}
,
{
"type": "class",
"name": "LogRotate",
"full_name": "::Crails::LogRotate",
"inherits": [],
"module": "libcrails-logger",
"include": "crails/log_rotate.hpp",
"doc": "docs/Crails/LogRotate.html",
"excerpt": "<p>Manages the output of the [Logger], handling an history of log files, and swapping the current log files to new ones at launch, or possibly at runtime.</p>",
"constructors": [
]
,
"methods": [
{
"doc": "docs/Crails/LogRotate/initialize.html",
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "event_filepath","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "error_filepath","alias": "string"}]
}
,{
"doc": "docs/Crails/LogRotate/set_history_size.html",
  "static": false,
  "name": "set_history_size",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}]
}
,{
"doc": "docs/Crails/LogRotate/swap_log_files.html",
  "static": false,
  "name": "swap_log_files",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "load_log_files",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "log_rotate",
  "visibility": "protected",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::ofstream","visibility": "protected","static": false,"name": "event_log","alias": "ofstream"},{"const": false,"ref": 0,"ptr": 0,"type": "std::ofstream","visibility": "protected","static": false,"name": "error_log","alias": "ofstream"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "event_filepath","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "error_filepath","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "protected","static": false,"name": "history_size"}]
}
,
{
"type": "class",
"name": "LogFiles",
"full_name": "::Crails::LogFiles",
"inherits": ["::Crails::LogRotate"],
"module": "libcrails",
"include": "crails/log_files.hpp",
"doc": "docs/Crails/LogFiles.html",
"excerpt": "<p>Initializes [LogRotate] for a Crails application using the options defined for the Crails [Server]. It can be initialized with [ProgramOptions] for a more direct approach, or with <code>int argc, const char** argv</code> for implementations that merely ...</p>",
"constructors": [
{
  "static": false,
  "name": "LogFiles",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
,{
  "static": false,
  "name": "LogFiles",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ProgramOptions","alias": "ProgramOptions"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "load_from_program_options",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ProgramOptions","alias": "ProgramOptions"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"}]
}
,
{
"type": "class",
"name": "FileRequestHandler",
"full_name": "::Crails::FileRequestHandler",
"inherits": ["::Crails::RequestHandler"],
"module": "libcrails",
"include": "crails/request_handlers/file.hpp",
"doc": "docs/Crails/FileRequestHandler.html",
"excerpt": "<p>Implementation of [RequestHandler] that tries to respond to a query by looking up files in the application's <em>public</em> directory (matching a [Server]'s <code>public_path</code> attribute).</p>",
"constructors": [
{
  "static": false,
  "name": "FileRequestHandler",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "process",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "send_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","name": "response","alias": "BuildingResponse"},{"const": false,"ref": 0,"ptr": 0,"type": "::HttpStatus","name": "code","alias": "HttpStatus"},{"const": false,"ref": 0,"ptr": 0,"type": "::Range","name": "range","alias": "Range"}]
}
,{
  "static": false,
  "name": "set_cache_enabled",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "enable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "is_cache_enabled",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "set_headers_for_file",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","name": "response","alias": "BuildingResponse"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "fullpath","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "cache_enabled"},{"const": false,"ref": 1,"ptr": 0,"type": "::FileCache","visibility": "private","static": false,"name": "file_cache","alias": "FileCache"},{"const": false,"ref": 0,"ptr": 0,"type": "std::uintmax_t","visibility": "private","static": false,"name": "cacheable_max_size","alias": "uintmax_t"}]
}
,
{
"type": "struct",
"name": "BuiltinAsset",
"full_name": "::Crails::BuiltinAsset",
"inherits": [],
"module": "libcrails",
"include": "crails/request_handlers/builtin_assets.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": false,"name": "data","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","visibility": "public","static": false,"name": "length","alias": "size_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "mimetype","alias": "string"}]
}
,
{
"type": "class",
"name": "BuiltinAssets",
"full_name": "::Crails::BuiltinAssets",
"inherits": ["std::map"],
"module": "libcrails",
"include": "crails/request_handlers/builtin_assets.hpp",
"doc": "docs/Crails/BuiltinAssets.html",
"excerpt": "<p>Stores a collection of file cached in memory, designed to be served by the [BuiltinAssetsHandler] request handler. Every asset in this collection should be compressed using the same method (eg: gzip, brotli). Assets can also be served uncompressed,</p>",
"constructors": [
{
  "static": false,
  "name": "BuiltinAssets",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "path","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "compression_strategy","alias": "string_view"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
"doc": "docs/Crails/BuiltinAssets/accepts.html",
  "static": false,
  "name": "accepts",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","name": "request","alias": "HttpRequest"}]
}
,{
  "static": false,
  "name": "add",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "data","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "length","alias": "size_t"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "const": true,
  "static": false,
  "name": "get_root_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "const": true,
  "static": false,
  "name": "get_content_encoding",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "path","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "compression_strategy","alias": "string_view"}]
}
,
{
"type": "class",
"name": "BuiltinAssetsHandler",
"full_name": "::Crails::BuiltinAssetsHandler",
"inherits": ["::Crails::RequestHandler"],
"module": "libcrails",
"include": "crails/request_handlers/builtin_assets.hpp",
"doc": "docs/Crails/BuiltinAssetsHandler.html",
"excerpt": "<p>Implementation of [RequestHandler] that serves assets from a [BuiltinAssets] object. It is meant to serve a role similar to [FileRequestHandler], but for handling small static files in the most efficient fashion possible.</p>",
"constructors": [
{
  "static": false,
  "name": "BuiltinAssetsHandler",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::BuiltinAssets","name": "library","alias": "BuiltinAssets"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","name": "context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "process",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","name": "response","alias": "BuildingResponse"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "path","alias": "string_view"},{"const": true,"ref": 1,"ptr": 0,"type": "::BuiltinAssets","visibility": "private","static": false,"name": "library","alias": "BuiltinAssets"}]
}
,
{
"type": "struct",
"name": "Url",
"full_name": "::Crails::Url",
"inherits": [],
"module": "libcrails",
"include": "crails/url.hpp",
"doc": "docs/Crails/Url.html",
"excerpt": "<p>Represents a <a href=\"https://en.wikipedia.org/wiki/URL\">URL</a> using the HTTP scheme, providing an easy way to access the host, port, and path of an URL.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/Url/encode.html",
  "static": true,
  "name": "encode",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/Url/decode.html",
  "static": true,
  "name": "decode",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Url","alias": "Url"},
  "static": true,
  "name": "from_string",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_string",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "ssl"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "host","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": false,"name": "port"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "target","alias": "string"}]
}
,
{
"type": "class",
"name": "UrlFragmentEncode",
"full_name": "::Crails::UrlFragmentEncode",
"inherits": [],
"module": "libcrails",
"include": "crails/url.hpp",
"template_params": [{"type": "typename","name": "T"}],
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "run",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::T","name": "fragment","alias": "T"}]
}
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "UrlBuilder",
"full_name": "::Crails::UrlBuilder",
"inherits": [],
"module": "libcrails",
"include": "crails/url.hpp",
"constructors": [
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "T"},{"type": "typename","name": "ARGS"}],
  "static": true,
  "name": "fragments",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::stringstream","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": true,
  "name": "fragments",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::stringstream","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "static": true,
  "name": "fragments",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::stringstream","alias": "stringstream"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "is_specialization",
"full_name": "::Crails::is_specialization",
"inherits": ["std::false_type"],
"module": "libcrails",
"include": "crails/utils/type_traits.hpp",
"template_params": [{"type": "typename","name": "Test"}],
"constructors": [
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "ArrayCollector",
"full_name": "::Crails::ArrayCollector",
"inherits": [],
"module": "libcrails",
"include": "crails/utils/arrays.hpp",
"template_params": [{"type": "typename","name": "LIST"},{"type": "typename","name": "ARGS"}],
"constructors": [
{
  "static": false,
  "name": "ArrayCollector<LIST, IS_POINTER, ARGS...>",
  "visibility": "private",
  "params": []
}
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "RETURN_TYPE"},{"type": "typename","name": "METHOD_SCOPE"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<RETURN_TYPE>","alias": "vector<RETURN_TYPE>"},
  "static": true,
  "name": "collect",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "RETURN_TYPE (METHOD_SCOPE::*)(ARGS...) const","alias": "*)(ARGS...) const"},{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Listener",
"full_name": "::Crails::Listener",
"inherits": ["std::enable_shared_from_this"],
"module": "libcrails",
"include": "crails/server/listener.hpp",
"doc": "docs/Crails/Listener.html",
"excerpt": "<p>Listener used by the [Server] class. Listens on a network interface and port, accepts new connections and dispatches them to a [Connection] object.</p>",
"constructors": [
{
  "static": false,
  "name": "Listener",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Server","alias": "Server"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "listen",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ip::tcp::endpoint","alias": "endpoint"},{"const": false,"ref": 1,"ptr": 0,"type": "boost::beast::error_code","alias": "error_code"}]
}
,{
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "stop",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "wait_accept",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "on_accept",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","alias": "error_code"}]
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "::Server","visibility": "private","static": false,"name": "server","alias": "Server"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ip::tcp::acceptor","visibility": "private","static": false,"name": "acceptor","alias": "acceptor"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ip::tcp::socket","visibility": "private","static": false,"name": "socket","alias": "socket"}]
}
,
{
"type": "struct",
"name": "ArchiveException",
"full_name": "::ArchiveException",
"inherits": ["std::exception"],
"module": "libtext-archive",
"include": "crails/errors.hpp",
"constructors": [
{
  "static": false,
  "name": "ArchiveException",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "ArchiveException",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "d","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "dump","alias": "string"}]
}
,
{
"type": "struct",
"name": "ArchiveNullPointerError",
"full_name": "::ArchiveNullPointerError",
"inherits": ["::ArchiveException"],
"module": "libtext-archive",
"include": "crails/errors.hpp",
"constructors": [
{
  "static": false,
  "name": "ArchiveNullPointerError",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "dump","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "dump","alias": "string"}]
}
,
{
"type": "struct",
"name": "ArchiveUnmatchingTypeError",
"full_name": "::ArchiveUnmatchingTypeError",
"inherits": ["::ArchiveException"],
"module": "libtext-archive",
"include": "crails/errors.hpp",
"constructors": [
{
  "static": false,
  "name": "ArchiveUnmatchingTypeError",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "dump","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","name": "receive"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","name": "expected"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","visibility": "public","static": false,"name": "received_type"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","visibility": "public","static": false,"name": "expected_type"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "error","alias": "string"}]
}
,
{
"type": "struct",
"name": "ArchiveUnimplementedSerializer",
"full_name": "::ArchiveUnimplementedSerializer",
"inherits": ["::ArchiveException"],
"module": "libtext-archive",
"include": "crails/errors.hpp",
"constructors": [
{
  "static": false,
  "name": "ArchiveUnimplementedSerializer",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "type","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "message","alias": "string"}]
}
,
{
"type": "struct",
"name": "ArchiveUnimplementedUnserializer",
"full_name": "::ArchiveUnimplementedUnserializer",
"inherits": ["::ArchiveException"],
"module": "libtext-archive",
"include": "crails/errors.hpp",
"constructors": [
{
  "static": false,
  "name": "ArchiveUnimplementedUnserializer",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "type","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "message","alias": "string"}]
}
,
{
"type": "class",
"name": "OArchive",
"full_name": "::OArchive",
"inherits": ["::Archive"],
"module": "libtext-archive",
"include": "crails/serializer.hpp",
"constructors": [
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "T","default": "::OArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::OArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::OArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::list<T>","alias": "list<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::OArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::set<T>","alias": "set<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "KEY"},{"type": "typename","name": "VALUE","default": "::OArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::map<KEY, VALUE>","alias": "map<KEY, VALUE>"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "serialize",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "IArchive",
"full_name": "::IArchive",
"inherits": ["::Archive"],
"module": "libtext-archive",
"include": "crails/unserializer.hpp",
"constructors": [
{
  "static": false,
  "name": "IArchive",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "set_data",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::list<T>","alias": "list<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::set<T>","alias": "set<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "KEY"},{"type": "typename","name": "VALUE","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::map<KEY, VALUE>","alias": "map<KEY, VALUE>"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::shared_ptr<T>","alias": "shared_ptr<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::IArchive"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
  "static": false,
  "name": "operator&",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::unique_ptr<T>","alias": "unique_ptr<T>"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "unserialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "static": false,
  "name": "output_next_value",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}]
}
,{
  "template_params": [{"type": "typename","name": "NUMERICAL_TYPE"}],
  "static": false,
  "name": "unserialize_number",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::NUMERICAL_TYPE","alias": "NUMERICAL_TYPE"}]
}
,{
  "template_params": [{"type": "typename","name": "CHAR_TYPE"}],
  "static": false,
  "name": "unserialize_char",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::CHAR_TYPE","alias": "CHAR_TYPE"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "protected","static": false,"name": "offset"}]
}
,
{
"type": "struct",
"name": "Archivable",
"full_name": "::Archivable",
"inherits": [],
"module": "libtext-archive",
"include": "crails/archivable.hpp",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
  "static": false,
  "name": "serialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"}]
}
,{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "serialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Archive",
"full_name": "::Archive",
"inherits": [],
"module": "libtext-archive",
"include": "crails/archive.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "as_string",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},
  "static": true,
  "name": "typecode",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "description",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "offset"}]
}
,{
  "const": true,
  "static": false,
  "name": "description",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "offset"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": true,"name": "mimetype","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::char","visibility": "public","static": true,"name": "array_typecode","alias": "char"},{"const": true,"ref": 0,"ptr": 0,"type": "::char","visibility": "public","static": true,"name": "map_typecode","alias": "char"},{"const": true,"ref": 0,"ptr": 0,"type": "::char","visibility": "public","static": true,"name": "null_typecode","alias": "char"},{"const": true,"ref": 0,"ptr": 0,"type": "::char","visibility": "public","static": true,"name": "pointer_typecode","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "str","alias": "string"}]
}
,
{
"type": "class",
"name": "RouterBase",
"full_name": "::Crails::RouterBase",
"inherits": [],
"module": "libcrails-router",
"include": "crails/router_base.hpp",
"template_params": [{"type": "typename","name": "PARAMS"},{"type": "typename","name": "ACTION"}],
"doc": "docs/Crails/RouterBase.html",
"excerpt": "<p>RouterBase is a template allowing you to quickly build routing systems for your application.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::Action","alias": "Action"},
  "const": true,
  "static": false,
  "name": "get_action",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uri","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::PARAMS","name": "query_params","alias": "PARAMS"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::Action","alias": "Action"},
  "const": true,
  "static": false,
  "name": "get_action",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "method","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uri","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::PARAMS","name": "query_params","alias": "PARAMS"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::RouterBase<PARAMS, ACTION>","alias": "RouterBase<PARAMS, ACTION>"},
  "static": false,
  "name": "match",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "route","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Action","name": "callback","alias": "Action"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::RouterBase<PARAMS, ACTION>","alias": "RouterBase<PARAMS, ACTION>"},
  "static": false,
  "name": "match",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "method","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "route","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Action","name": "callback","alias": "Action"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::RouterBase<PARAMS, ACTION>","alias": "RouterBase<PARAMS, ACTION>"},
  "static": false,
  "name": "match",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "priority"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "method","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "route","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Action","name": "callback","alias": "Action"}]
}
,{
  "static": false,
  "name": "scope",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_current_scope",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "description",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "item_initialize_regex",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Item","name": "item","alias": "Item"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "route","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "full_route",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "current_scope","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Items","visibility": "public","static": false,"name": "routes","alias": "Items"},{"const": false,"ref": 0,"ptr": 0,"type": "short","visibility": "public","static": false,"name": "incremental_order"}]
}
,
{
"type": "struct",
"name": "Item",
"full_name": "::Crails::RouterBase::Item",
"inherits": [],
"module": "libcrails-router",
"include": "crails/router_base.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator<",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Item","name": "item","alias": "Item"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Action","visibility": "public","static": false,"name": "run","alias": "Action"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "method","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::regex","visibility": "public","static": false,"name": "regexp","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","visibility": "public","static": false,"name": "param_names","alias": "vector<std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "description","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "short","visibility": "public","static": false,"name": "priority"}]
}
,
{
"type": "class",
"name": "ActionRoute",
"full_name": "::Crails::ActionRoute",
"inherits": [],
"module": "libcrails-action",
"include": "crails/actions/controller.hpp",
"template_params": [{"type": "typename","name": "CONTROLLER"},{"type": "typename","name": "CONTROLLER"}],
"doc": "docs/Crails/ActionRoute.html",
"excerpt": "<p>Route handler for controllers based on the [ActionController].</p>",
"constructors": [
]
,
"methods": [
{
  "static": true,
  "name": "trigger",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "::Method","name": "method","alias": "Method"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": true,
  "name": "finalize",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::CONTROLLER","name": "controller","alias": "CONTROLLER"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "ActionController",
"full_name": "::Crails::ActionController",
"inherits": ["std::enable_shared_from_this"],
"module": "libcrails-controllers",
"include": "crails/controller/action.hpp",
"doc": "docs/Crails/ActionController.html",
"excerpt": "<p><code>ActionController</code> is the basis for all the controllers from the <code>libcrails-controllers</code> module. It brings a simple MVC API to interact with [Crails::Context] and populates its [Crails::BuildingResponse] before it is sent to the cl...</p>",
"constructors": [
{
  "static": false,
  "name": "ActionController",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_controller_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_action_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::SharedVars","alias": "SharedVars"},
  "const": true,
  "static": false,
  "name": "get_vars",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/ActionController/redirect_to.html",
  "static": false,
  "name": "redirect_to",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::http::status","name": "status","alias": "HttpStatus"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uri","alias": "string"}]
}
,{
"doc": "docs/Crails/ActionController/redirect_to.html",
  "static": false,
  "name": "redirect_to",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uri","alias": "string"}]
}
,{
"doc": "docs/Crails/ActionController/respond_with.html",
  "static": false,
  "name": "respond_with",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::http::status","alias": "HttpStatus"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "initialize",
  "visibility": "protected",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "finalize",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "close",
  "visibility": "protected",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::thread","alias": "thread"},
"doc": "docs/Crails/ActionController/start_thread.html",
  "static": false,
  "name": "start_thread",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "invokable","alias": "function<void ()>"}]
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::Params","visibility": "protected","static": false,"name": "params","alias": "Params"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","visibility": "protected","static": false,"name": "vars","alias": "SharedVars"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","visibility": "protected","static": false,"name": "session","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","visibility": "protected","static": false,"name": "request","alias": "HttpRequest"},{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","visibility": "protected","static": false,"name": "response","alias": "BuildingResponse"},{"const": false,"ref": 0,"ptr": 0,"type": "::Utils::Timer","visibility": "private","static": false,"name": "timer","alias": "Timer"},{"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Context>","visibility": "private","static": false,"name": "context","alias": "shared_ptr<Context>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","visibility": "private","static": false,"name": "callback","alias": "function<void ()>"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "close_on_deletion"}]
}
,
{
"type": "class",
"name": "Logger",
"full_name": "::Crails::Logger",
"inherits": [],
"module": "libcrails-logger",
"include": "crails/logger.hpp",
"doc": "docs/Crails/Logger.html",
"excerpt": "<p>Handles logging for Crails applications. Each log is provided with a <code>log_level</code>. The logger is thread-safe, and can aggregate the logs from several threads into a single [std::ostream].</p>",
"constructors": [
{
  "static": false,
  "name": "Logger",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "set_stdout",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "stream","alias": "ostream"}]
}
,{
  "static": false,
  "name": "set_stderr",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "stream","alias": "ostream"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Logger","alias": "Logger"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Symbol","name": "level","alias": "Symbol"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::Crails::Logger"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Logger","alias": "Logger"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "static": false,
  "name": "flush",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned char"},
  "const": true,
  "static": false,
  "name": "get_log_level",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_log_level",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Symbol","name": "value","alias": "Symbol"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Symbol","visibility": "private","static": true,"name": "log_level","alias": "Symbol"},{"const": false,"ref": 0,"ptr": 0,"type": "::Buffer","visibility": "private","static": true,"name": "buffer","alias": "Buffer"},{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "private","static": false,"name": "mutex","alias": "mutex"},{"const": false,"ref": 0,"ptr": 1,"type": "std::ostream","visibility": "private","static": false,"name": "stdout_","alias": "ostream"},{"const": false,"ref": 0,"ptr": 1,"type": "std::ostream","visibility": "private","static": false,"name": "stderr_","alias": "ostream"}]
}
,
{
"type": "struct",
"name": "Buffer",
"full_name": "::Crails::Logger::Buffer",
"inherits": [],
"module": "libcrails-logger",
"include": "crails/logger.hpp",
"constructors": [
{
  "static": false,
  "name": "Buffer",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "public","static": false,"name": "stream","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "::Symbol","visibility": "public","static": false,"name": "level","alias": "Symbol"}]
}
,
{
"type": "class",
"name": "WebSocketRoute",
"full_name": "::Crails::WebSocketRoute",
"inherits": [],
"module": "libcrails-action",
"include": "crails/actions/websocket.hpp",
"template_params": [{"type": "typename","name": "WEBSOCKET"}],
"doc": "docs/Crails/WebSocketRoute.html",
"excerpt": "<p>Route handler for [WebSocket].</p>",
"constructors": [
]
,
"methods": [
{
  "static": true,
  "name": "trigger",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "::Method","name": "method","alias": "Method"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Router",
"full_name": "::Crails::Router",
"inherits": ["::Crails::RouterBase"],
"module": "libcrails-action",
"include": "crails/router.hpp",
"constructors": [
{
  "static": false,
  "name": "Router",
  "visibility": "protected",
  "params": []
}
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"}]
}
,
{
"type": "class",
"name": "Renderer",
"full_name": "::Crails::Renderer",
"inherits": [],
"module": "libcrails-renderer",
"include": "crails/renderer.hpp",
"doc": "docs/Crails/Renderer.html",
"excerpt": "<p>Interface and helpers for Renderers. A Renderer is an object used to attempt to try and render templates matching a given <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">mimetype format</a>.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "get_mimetypes",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
"doc": "docs/Crails/Renderer/can_render.html",
  "static": false,
  "name": "can_render",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"}]
}
,{
  "virtual": 2,
  "const": true,
"doc": "docs/Crails/Renderer/render_template.html",
  "static": false,
  "name": "render_template",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Templates","alias": "Templates"},
  "const": true,
  "static": false,
  "name": "get_templates",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "merge",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Renderer","alias": "Renderer"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::Renderer","alias": "Renderer"},
"doc": "docs/Crails/Renderer/pick_renderer.html",
  "static": true,
  "name": "pick_renderer",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "accept","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"doc": "docs/Crails/Renderer/has_renderer.html",
  "static": true,
  "name": "has_renderer",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "accept","alias": "string"}]
}
,{
"doc": "docs/Crails/Renderer/render.html",
  "static": true,
  "name": "render",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "accept","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Templates","visibility": "protected","static": false,"name": "templates","alias": "Templates"}]
}
,
{
"type": "struct",
"name": "MissingTemplate",
"full_name": "::Crails::MissingTemplate",
"inherits": ["::boost_ext::exception"],
"module": "libcrails-renderer",
"include": "crails/renderer.hpp",
"doc": "docs/Crails/MissingTemplate.html",
"excerpt": "<p>Exception thrown when a [Renderer] was requested to render a [Template] that does not exist.</p>",
"constructors": [
{
  "static": false,
  "name": "MissingTemplate",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "accept","alias": "string"},{"const": true,"ref": 0,"ptr": 1,"type": "::Renderer","alias": "Renderer"}]
}
,{
  "static": false,
  "name": "MissingTemplate",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 0,"ptr": 1,"type": "::Renderer","alias": "Renderer"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
,{
  "const": true,
  "static": false,
  "name": "debug",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "message","alias": "string"},{"const": true,"ref": 0,"ptr": 1,"type": "::Renderer","visibility": "public","static": false,"name": "renderer","alias": "Renderer"}]
}
,
{
"type": "class",
"name": "Renderers",
"full_name": "::Crails::Renderers",
"inherits": [],
"module": "libcrails-renderer",
"include": "crails/renderer.hpp",
"constructors": [
{
  "static": false,
  "name": "Renderers",
  "visibility": "protected",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "RendererList::const_iterator","alias": "const_iterator"},
  "const": true,
  "static": false,
  "name": "begin",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "RendererList::const_iterator","alias": "const_iterator"},
  "const": true,
  "static": false,
  "name": "end",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_default_format",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "default_format","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::RendererList","visibility": "protected","static": false,"name": "renderers","alias": "RendererList"}]
}
,
{
"type": "class",
"name": "ArchiveRenderer",
"full_name": "::Crails::ArchiveRenderer",
"inherits": ["::Crails::Renderer"],
"module": "libcrails-archive",
"include": "crails/renderers/archive_renderer.hpp",
"constructors": [
{
  "static": false,
  "name": "ArchiveRenderer",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_mimetypes",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "can_render",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "render_template",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","name": "response","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestArchiveParser",
"full_name": "::Crails::RequestArchiveParser",
"inherits": ["::Crails::BodyParser"],
"module": "libcrails-archive",
"include": "crails/request_parsers/archive_parser.hpp",
"doc": "docs/Crails/RequestArchiveParser.html",
"excerpt": "<p>Implementation of the [RequestParser] interface designed to intercept requests using the <code>crails/archive</code> format. The archive's content will be stored in the [Params] object under the <code>archive_data</code> key.</p>",
"constructors": [
{
  "static": false,
  "name": "RequestArchiveParser",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "parameter_key","alias": "char"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","name": "callback","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "private","static": false,"name": "parameter_key","alias": "char"}]
}
,
{
"type": "class",
"name": "Attachment",
"full_name": "::Crails::Attachment",
"inherits": ["std::string"],
"module": "libcrails-attachment",
"include": "crails/attachment.hpp",
"doc": "docs/Crails/Attachment.html",
"excerpt": "<p>Represents a file in a persistent storage. The reference to that file can be stored in database using a string of characters.</p>",
"constructors": [
{
  "static": false,
  "name": "Attachment",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Attachment",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uid","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_extension",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_mimetype",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "use_uploaded_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::Crails::Params::File","name": "file","alias": "File"}]
}
,{
  "static": false,
  "name": "use_filesystem",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "use_name",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "link_to",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Attachment","alias": "Attachment"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "cleanup_files",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_store_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_filepath",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_filename",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "new_uid",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "generate_uid",
  "visibility": "protected",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "extension","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "mimetype","alias": "string"}]
}
,
{
"type": "class",
"name": "Challenge",
"full_name": "::Crails::Captcha::Challenge",
"inherits": [],
"module": "libcrails-captcha",
"include": "crails/captcha.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_form_key",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_element_id",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Params","alias": "Params"}]
}
,{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "check",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Params","alias": "Params"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Default",
"full_name": "::Crails::Captcha::Default",
"inherits": ["::Crails::Captcha::Challenge"],
"module": "libcrails-captcha",
"include": "crails/captcha/default.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Params","alias": "Params"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "check",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Params","alias": "Params"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
,{
  "static": true,
  "name": "set_font_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Google",
"full_name": "::Crails::Captcha::Google",
"inherits": ["::Crails::Captcha::Challenge"],
"module": "libcrails-captcha",
"include": "crails/captcha/google.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "get_api_key",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "get_api_secret",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "double"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_score_threshold",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Params","alias": "Params"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "check",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Params","alias": "Params"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (bool)>","name": "callback","alias": "function<void (bool)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_verify_url",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "captcha_id","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "ScaffoldModel",
"full_name": "::Crails::ScaffoldModel",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/scaffold_model.hpp",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "options_description",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "boost::program_options::options_description","name": "desc","alias": "options_description"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "virtual": 2,
  "static": false,
  "name": "create",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "boost::program_options::variables_map","alias": "variables_map"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "static": true,
  "name": "properties_help",
  "visibility": "protected",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"},
  "static": true,
  "name": "properties_option",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "boost::program_options::variables_map","alias": "variables_map"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "WithPath",
"full_name": "::Crails::WithPath",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/with_path.hpp",
"doc": "docs/Crails/WithPath.html",
"excerpt": "<p><a href=\"https://stackoverflow.com/questions/31365013/what-is-scopeguard-in-c\">Scope guard</a> temporarily changing the application's current directory to a given [std::filesystem::path].</p>",
"constructors": [
{
  "static": false,
  "name": "WithPath",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::filesystem::path","name": "new_path","alias": "path"}]
}
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::filesystem::path","visibility": "private","static": false,"name": "old_path","alias": "path"}]
}
,
{
"type": "struct",
"name": "ExecutableCommand",
"full_name": "::Crails::ExecutableCommand",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::filesystem::path","alias": "path"},
  "const": true,
  "static": false,
  "name": "absolute_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "v","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "v","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "v","alias": "char"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","visibility": "public","static": false,"name": "arguments","alias": "vector<std::string>"}]
}
,
{
"type": "class",
"name": "CMakeBuilder",
"full_name": "::CMakeBuilder",
"inherits": ["::Crails::WithPath"],
"module": "libcrails-cli",
"include": "crails/cli/cmake_builder.hpp",
"constructors": [
{
  "static": false,
  "name": "CMakeBuilder",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","name": "project_directory","alias": "path"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","name": "build_directory","alias": "path"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "options"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::CMakeBuilder","alias": "CMakeBuilder"},
  "static": false,
  "name": "option",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "installed",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "boost::process::native_environment","alias": "native_environment"},
  "static": false,
  "name": "environment",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "configure",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "make",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "clean",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "build",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::filesystem::path","visibility": "private","static": false,"name": "project_directory","alias": "path"},{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "private","static": false,"name": "options","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "verbose"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "should_clean"}]
}
,
{
"type": "class",
"name": "Build2Builder",
"full_name": "::Build2Builder",
"inherits": ["::Crails::WithPath"],
"module": "libcrails-cli",
"include": "crails/cli/build2_builder.hpp",
"constructors": [
{
  "static": false,
  "name": "Build2Builder",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "package_name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","name": "project_directory","alias": "path"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","name": "build_directory","alias": "path"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "options"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "installed",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "create",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "directory","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","name": "options","alias": "map<std::string, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "verbose"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "configure",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "build",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "build",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "package_name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "only_configure"}]
}
,{
  "static": false,
  "name": "use_system_package",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "ARRAY"}],
  "static": false,
  "name": "use_system_packages",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::filesystem::path","visibility": "private","static": false,"name": "project_directory","alias": "path"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "package_name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "int","visibility": "private","static": false,"name": "options"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","visibility": "private","static": false,"name": "system_packages","alias": "vector<std::string>"}]
}
,
{
"type": "class",
"name": "FileRendererBase",
"full_name": "::Crails::FileRendererBase",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/file_renderer.hpp",
"template_params": [{"type": "typename","name": "RENDERER"}],
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "generate_file",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "template_name","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "generate_file",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "template_name","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "filepath","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "render_file",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::string_view","name": "template_name","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "std::filesystem::path","name": "path","alias": "path"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::RENDERER","visibility": "public","static": false,"name": "renderer","alias": "RENDERER"},{"const": false,"ref": 0,"ptr": 0,"type": "Crails::SharedVars","visibility": "public","static": false,"name": "vars","alias": "SharedVars"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "should_overwrite"}]
}
,
{
"type": "class",
"name": "Command",
"full_name": "::Crails::Command",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/command.hpp",
"doc": "docs/Crails/Command.html",
"excerpt": "<p>Interface for implementing commands and sub-commands in Crails CLI applications.</p>",
"constructors": [
{
  "static": false,
  "name": "Command",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "virtual": 1,
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "description",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "options_description",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "boost::program_options::options_description","alias": "options_description"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "boost::program_options::variables_map","visibility": "protected","static": false,"name": "options","alias": "variables_map"}]
}
,
{
"type": "struct",
"name": "NamingConvention",
"full_name": "::Crails::NamingConvention",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/conventions.hpp",
"constructors": [
{
  "static": false,
  "name": "NamingConvention",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "load_from_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Transformation","visibility": "public","static": false,"name": "filenames","alias": "Transformation"},{"const": false,"ref": 0,"ptr": 0,"type": "::Transformation","visibility": "public","static": false,"name": "classnames","alias": "Transformation"},{"const": false,"ref": 0,"ptr": 0,"type": "::Transformation","visibility": "public","static": false,"name": "functions","alias": "Transformation"},{"const": false,"ref": 0,"ptr": 0,"type": "::Transformation","visibility": "public","static": false,"name": "keys","alias": "Transformation"}]
}
,
{
"type": "class",
"name": "Scaffold",
"full_name": "::Crails::Scaffold",
"inherits": ["::Crails::Command"],
"module": "libcrails-cli",
"include": "crails/cli/scaffold.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "description",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Scaffolds","alias": "Scaffolds"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "available_scaffolds",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "options_description",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "boost::program_options::options_description","name": "desc","alias": "options_description"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "virtual": 1,
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "type","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<ScaffoldModel>","visibility": "private","static": false,"name": "model","alias": "unique_ptr<ScaffoldModel>"}]
}
,
{
"type": "struct",
"name": "Notifier",
"full_name": "::Crails::Notifier",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/notifier.hpp",
"doc": "docs/Crails/Notifier.html",
"excerpt": "<p>Interface for helpers used by terminal applications to send notifications to the user. Possible implementations are [TerminalNotifier], [KDialogNotifier] or [NotifySendNotifier].</p>",
"constructors": [
{
  "static": false,
  "name": "Notifier",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "bin_name","alias": "char"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "is_available",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "notify",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "title","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mood","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "bin","alias": "string"}]
}
,
{
"type": "class",
"name": "KDialogNotifier",
"full_name": "::Crails::KDialogNotifier",
"inherits": ["::Crails::Notifier"],
"module": "libcrails-cli",
"include": "crails/cli/notifier.hpp",
"doc": "docs/Crails/KDialogNotifier.html",
"excerpt": "<p>Implements [Notifier]. Triggers notifications using <a href=\"https://invent.kde.org/utilities/kdialog\">KDialog</a>, if available on the system.</p>",
"constructors": [
{
  "static": false,
  "name": "KDialogNotifier",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "notify",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "title","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mood","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "NotifySendNotifier",
"full_name": "::Crails::NotifySendNotifier",
"inherits": ["::Crails::Notifier"],
"module": "libcrails-cli",
"include": "crails/cli/notifier.hpp",
"doc": "docs/Crails/NotifySendNotifier.html",
"excerpt": "<p>Implements [Notifier]. Display notifications to the terminal user using <a href=\"https://gitlab.gnome.org/GNOME/libnotify\">notify-send</a>.</p>",
"constructors": [
{
  "static": false,
  "name": "NotifySendNotifier",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "notify",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "title","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mood","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "TerminalNotifier",
"full_name": "::Crails::TerminalNotifier",
"inherits": ["::Crails::Notifier"],
"module": "libcrails-cli",
"include": "crails/cli/notifier.hpp",
"doc": "docs/Crails/TerminalNotifier.html",
"excerpt": "<p>Implements [Notifier]. Implements [Notifier]. Typical last case scenario for sending notifications for terminal applications: when no other methods are available, just printing a message on the terminal will do the trick.</p>",
"constructors": [
{
  "static": false,
  "name": "TerminalNotifier",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "notify",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "title","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mood","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "Terminal",
"full_name": "::Crails::Terminal",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/terminal.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "reset_color","alias": "char"}]
}
,
{
"type": "struct",
"name": "Color",
"full_name": "::Crails::Terminal::Color",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/terminal.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "black","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "red","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "green","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "yellow","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "blue","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "magenta","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "cyan","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "gray","alias": "char"}]
}
,
{
"type": "struct",
"name": "Background",
"full_name": "::Crails::Terminal::Background",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/terminal.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "black","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "red","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "green","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "yellow","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "blue","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "magenta","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "cyan","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","visibility": "public","static": true,"name": "gray","alias": "char"}]
}
,
{
"type": "class",
"name": "ProjectVariables",
"full_name": "::Crails::ProjectVariables",
"inherits": [],
"module": "libcrails-cli",
"include": "crails/cli/project_variables.hpp",
"constructors": [
{
  "static": false,
  "name": "ProjectVariables",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "filename","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "lookup_variable_path",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "load",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "save",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "append_to_string",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "has_variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "variable_or",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "fallback","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "static": false,
  "name": "variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "filename","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "filepath","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","visibility": "protected","static": false,"name": "variables","alias": "map<std::string, std::string>"}]
}
,
{
"type": "class",
"name": "CommandIndex",
"full_name": "::Crails::CommandIndex",
"inherits": ["::Crails::Command"],
"module": "libcrails-cli",
"include": "crails/cli/command_index.hpp",
"doc": "docs/Crails/CommandIndex.html",
"excerpt": "<p>A CLI command that indexes and allow the user to pick a [Crails::Command].</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "virtual": 1,
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "add_command",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "::CommandCtor","name": "ctor","alias": "CommandCtor"}]
}
,{
  "static": false,
  "name": "list_commands",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Command>","alias": "shared_ptr<Command>"},
  "static": false,
  "name": "find_command",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::CommandCtors","visibility": "private","static": false,"name": "commands","alias": "CommandCtors"},{"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Command>","visibility": "private","static": false,"name": "command","alias": "shared_ptr<Command>"}]
}
,
{
"type": "class",
"name": "BasicAuthenticationController",
"full_name": "::Crails::BasicAuthenticationController",
"inherits": ["::Crails::ActionController"],
"module": "libcrails-controllers",
"include": "crails/controller/basic_authentication.hpp",
"doc": "docs/Crails/BasicAuthenticationController.html",
"excerpt": "<p>The basic authentication controller brings <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">HTTP Basic Authentication</a> to your controllers. It is typically used through the [Crails::Controller] class, which inherits this cla...</p>",
"constructors": [
{
  "static": false,
  "name": "BasicAuthenticationController",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"doc": "docs/Crails/BasicAuthenticationController/require_basic_authentication.html",
  "static": false,
  "name": "require_basic_authentication",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "username","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"doc": "docs/Crails/BasicAuthenticationController/require_basic_authentication.html",
  "static": false,
  "name": "require_basic_authentication",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (const std::string &, const std::string &)>","alias": "function<bool (const std::string &, const std::string &)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "check_basic_authentication_header",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "header","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (const std::string &, const std::string &)>","alias": "function<bool (const std::string &, const std::string &)>"}]
}
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "ExceptionCSRF",
"full_name": "::Crails::ExceptionCSRF",
"inherits": ["std::exception"],
"module": "libcrails-controllers",
"include": "crails/controller/csrf.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "CsrfController",
"full_name": "::Crails::CsrfController",
"inherits": ["::Crails::BasicAuthenticationController"],
"module": "libcrails-controllers",
"include": "crails/controller/csrf.hpp",
"doc": "docs/Crails/CsrfController.html",
"excerpt": "<p>Controller component providing tools to implement protection against <a href=\"https://fr.wikipedia.org/wiki/Cross-site_request_forgery\">Cross-Site Request Forgery</a>.When enabled, it will create a variable into the <code>session</code> [Data] object p...</p>",
"constructors": [
{
  "static": false,
  "name": "CsrfController",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "must_protect_from_forgery",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "protect_from_forgery",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "check_csrf_token",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RenderController",
"full_name": "::Crails::RenderController",
"inherits": ["::Crails::CsrfController"],
"module": "libcrails-controllers",
"include": "crails/controller/render.hpp",
"doc": "docs/Crails/RenderController.html",
"excerpt": "<p>Controller component that renders content to a [BuildingResponse] using a [Renderer]. While the <code>RenderController</code> is mostly designed to provide a simple API for rendering view templates, it also provides helpers to set a response's body from...</p>",
"constructors": [
{
  "static": false,
  "name": "RenderController",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
]
,
"methods": [
{
"doc": "docs/Crails/RenderController/render.html",
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"}]
}
,{
"doc": "docs/Crails/RenderController/render.html",
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","alias": "SharedVars"}]
}
,{
  "static": false,
  "name": "render_accepting",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "accept","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","alias": "SharedVars"}]
}
,{
"doc": "docs/Crails/RenderController/render.html",
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::RenderType","name": "type","alias": "RenderType"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "value","alias": "Data"}]
}
,{
"doc": "docs/Crails/RenderController/render.html",
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::RenderType","name": "type","alias": "RenderType"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_accept_header",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_content_type",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::RenderType","alias": "RenderType"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "FlashController",
"full_name": "::Crails::FlashController",
"inherits": ["::Crails::RenderController"],
"module": "libcrails-controllers",
"include": "crails/controller/flash.hpp",
"doc": "docs/Crails/FlashController.html",
"excerpt": "<p>Controller component providing the [DataTree] <code>flash</code> protected property for controllers.</p>",
"constructors": [
{
  "static": false,
  "name": "FlashController",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "finalize",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "protected","static": false,"name": "received_flash","alias": "DataTree"},{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "protected","static": false,"name": "flash","alias": "DataTree"}]
}
,
{
"type": "struct",
"name": "CookieData",
"full_name": "::Crails::CookieData",
"inherits": ["::DataTree"],
"module": "libcrails-cookies",
"include": "crails/cookie_data.hpp",
"doc": "docs/Crails/CookieData.html",
"excerpt": "<p>Extends on [DataTree], adding method to serialize and unserialize its contents in or from a cookie. If <code>use_encryption</code> is set to true, the cookie's contents will be encrypted using AES-256.</p>",
"constructors": [
{
  "static": false,
  "name": "CookieData",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "static": false,
  "name": "CookieData",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "unserialize",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "serialize",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "password","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "salt","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "use_encryption"}]
}
,
{
"type": "class",
"name": "CookieStore",
"full_name": "::Crails::CookieStore",
"inherits": ["::Crails::SessionStore"],
"module": "libcrails-cookies",
"include": "crails/session_store/cookie_store.hpp",
"doc": "docs/Crails/CookieStore.html",
"excerpt": "<p>Implementation of [SessionStore] based on cookies. Session variables are stored within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie\">Cookie and Set-Cookie</a> headers.</p>",
"constructors": [
{
  "static": false,
  "name": "CookieStore",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "static": false,
  "name": "CookieStore",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "load",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","alias": "HttpRequest"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "finalize",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::BuildingResponse","alias": "BuildingResponse"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 1,
  "static": false,
  "name": "to_data",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "to_data",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::CookieData","visibility": "private","static": false,"name": "cookies","alias": "CookieData"}]
}
,
{
"type": "class",
"name": "Factory",
"full_name": "::Crails::CookieStore::Factory",
"inherits": ["::Crails::SessionStore::Factory"],
"module": "libcrails-cookies",
"include": "crails/session_store/cookie_store.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SessionStore>","alias": "unique_ptr<SessionStore>"},
  "virtual": 1,
  "static": false,
  "name": "make",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Crontab",
"full_name": "::Crails::Crontab",
"inherits": [],
"module": "libcrails-crontab",
"include": "crails/crontab.hpp",
"doc": "docs/Crails/Crontab.html",
"excerpt": "<p>Utility class to load, edit and save <a href=\"https://fr.wikipedia.org/wiki/Cron\">crontab</a> files.</p>",
"constructors": [
{
  "static": false,
  "name": "Crontab",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
"doc": "docs/Crails/Crontab/load.html",
  "static": false,
  "name": "load",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"doc": "docs/Crails/Crontab/save.html",
  "static": false,
  "name": "save",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "load_from_string",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "save_to_string",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::optional<Task>","alias": "optional<Task>"},
  "const": true,
  "static": false,
  "name": "get_task",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::optional<std::string>","alias": "optional<std::string>"},
  "const": true,
  "static": false,
  "name": "get_variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"}]
}
,{
"doc": "docs/Crails/Crontab/set_task.html",
  "static": false,
  "name": "set_task",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "schedule","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "command","alias": "string_view"}]
}
,{
  "static": false,
  "name": "remove_task",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"}]
}
,{
  "static": false,
  "name": "set_variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "value","alias": "string_view"}]
}
,{
  "static": false,
  "name": "remove_variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>:iterator","alias": "vector<Task>:iterator"},
  "static": false,
  "name": "begin",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>:iterator","alias": "vector<Task>:iterator"},
  "static": false,
  "name": "end",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>:iterator","alias": "vector<Task>:iterator"},
  "static": false,
  "name": "erase",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>:iterator","name": "it","alias": "vector<Task>:iterator"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>:const_iterator","alias": "vector<Task>:const_iterator"},
  "const": true,
  "static": false,
  "name": "cbegin",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>:const_iterator","alias": "vector<Task>:const_iterator"},
  "const": true,
  "static": false,
  "name": "cend",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","visibility": "private","static": false,"name": "variables","alias": "map<std::string, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Task>","visibility": "private","static": false,"name": "tasks","alias": "vector<Task>"}]
}
,
{
"type": "struct",
"name": "Task",
"full_name": "::Crails::Crontab::Task",
"inherits": [],
"module": "libcrails-crontab",
"include": "crails/crontab.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "value","alias": "string_view"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "schedule","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "command","alias": "string"}]
}
,
{
"type": "class",
"name": "Paginator",
"full_name": "::Crails::Paginator",
"inherits": [],
"module": "libcrails-paginator",
"include": "crails/paginator.hpp",
"constructors": [
{
  "static": false,
  "name": "Paginator",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "set_enabled",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "enabled"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "is_enabled",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_max_items_per_page",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "value"}]
}
,{
  "static": false,
  "name": "set_default_items_per_page",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "value"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"},
  "const": true,
  "static": false,
  "name": "get_items_per_page",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"},
  "const": true,
  "static": false,
  "name": "get_current_offset",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"},
  "const": true,
  "static": false,
  "name": "get_current_page",
  "visibility": "public",
  "params": []
}
,{
  "const": true,
  "static": false,
  "name": "decorate_view",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "Crails::SharedVars","name": "vars","alias": "SharedVars"},{"const": false,"ref": 0,"ptr": 0,"type": "::CountCallback","name": "get_total_items","alias": "CountCallback"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "enabled"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","visibility": "private","static": false,"name": "params","alias": "Data"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "max_items_per_page"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "default_items_per_page"}]
}
,
{
"type": "class",
"name": "BaseController",
"full_name": "::Crud::BaseController",
"inherits": ["BASE"],
"module": "libcrails-crud",
"include": "crails/crud/base_controller.hpp",
"template_params": [{"type": "typename","name": "BASE"},{"type": "typename","name": "MODEL"}],
"constructors": [
{
  "static": false,
  "name": "BaseController<BASE, MODEL>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "virtual": 2,
  "static": false,
  "name": "index",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "show",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "create",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "update",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 2,
  "static": false,
  "name": "find_model",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 2,
  "static": false,
  "name": "find_models",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "initialize_crud",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_view_path",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_show_view",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_index_view",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_actions_with_model",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "static": false,
  "name": "initialize_model",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "static": false,
  "name": "edit_model",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "static": false,
  "name": "validate",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},
  "virtual": 1,
  "static": false,
  "name": "get_model_params",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "require_model",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_id_param_name",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::Paginator","visibility": "public","static": false,"name": "paginator","alias": "Paginator"},{"const": false,"ref": 0,"ptr": 0,"type": "::safe_ptr<MODEL>","visibility": "public","static": false,"name": "model","alias": "safe_ptr<MODEL>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<MODEL>","visibility": "public","static": false,"name": "models","alias": "vector<MODEL>"}]
}
,
{
"type": "class",
"name": "Databases",
"full_name": "::Crails::Databases",
"inherits": [],
"module": "libcrails-databases",
"include": "crails/databases.hpp",
"doc": "docs/Crails/Databases.html",
"excerpt": "<p>Initializes and maintains a connection to remote databases represented by the [Database] interface, in a multi-threading friendly fashion. Instances of [Database] are created for each thread as soon as they are required, and are maintained until the thr...</p>",
"constructors": [
{
  "static": false,
  "name": "Databases",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
"doc": "docs/Crails/Databases/cleanup_databases.html",
  "static": false,
  "name": "cleanup_databases",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/Databases/cleanup_database.html",
  "static": false,
  "name": "cleanup_database",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Database","alias": "Database"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::Database","alias": "Database"},
"doc": "docs/Crails/Databases/get_database_from_name.html",
  "static": false,
  "name": "get_database_from_name",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "TYPE","default": "::Crails::Databases::Database"}],
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::Database","alias": "Database"},
  "static": false,
  "name": "initialize_database",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::any>","alias": "DatabaseSettings"}]
}
,{
  "template_params": [{"type": "typename","name": "TYPE"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::TYPE","alias": "TYPE"},
  "static": false,
  "name": "get_database",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::any>","alias": "DatabaseSettings"}]
}
,{
  "template_params": [{"type": "typename","name": "TYPE"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::TYPE","alias": "TYPE"},
  "static": false,
  "name": "get_database",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::any>","alias": "DatabaseSettings"},
  "const": true,
  "static": false,
  "name": "get_database_settings_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::DatabaseList","visibility": "private","static": false,"name": "databases","alias": "DatabaseList"}]
}
,
{
"type": "class",
"name": "Settings",
"full_name": "::Crails::Databases::Settings",
"inherits": ["SettingsMap"],
"module": "libcrails-databases",
"include": "crails/databases.hpp",
"constructors": [
{
  "static": false,
  "name": "Settings",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::SettingsMap","name": "data","alias": "SettingsMap"}]
}
,{
  "static": false,
  "name": "Settings",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"}]
}
,
{
"type": "class",
"name": "Database",
"full_name": "::Crails::Databases::Database",
"inherits": [],
"module": "libcrails-databases",
"include": "crails/databases.hpp",
"doc": "docs/Crails/Databases/Database.html",
"excerpt": "<p>Interface for database implementations managed by the [Databases] class.</p>",
"constructors": [
{
  "static": false,
  "name": "Database",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "type","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_type",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": false,"name": "type","alias": "string"}]
}
,
{
"type": "struct",
"name": "Exception",
"full_name": "::Crails::Databases::Exception",
"inherits": ["::boost_ext::exception"],
"module": "libcrails-databases",
"include": "crails/databases.hpp",
"constructors": [
{
  "static": false,
  "name": "Exception",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "message","alias": "string"}]
}
,
{
"type": "struct",
"name": "DatabaseUrl",
"full_name": "::Crails::DatabaseUrl",
"inherits": [],
"module": "libcrails-database-url",
"include": "crails/database_url.hpp",
"doc": "docs/Crails/DatabaseUrl.html",
"excerpt": "<p>Parses a database URL and provides an easy access to each individual fragment through the <code>type</code>, <code>hostname</code>, <code>username</code>, <code>password</code> and <code>database_name</code> attributes.</p>",
"constructors": [
{
  "static": false,
  "name": "DatabaseUrl",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "DatabaseUrl",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"}]
}
,{
  "static": false,
  "name": "DatabaseUrl",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_string",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "static": false,
  "name": "substr",
  "visibility": "private",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "url","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "std::pair<int, int>","name": "range","alias": "pair<int, int>"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "type","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "hostname","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "username","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "password","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "database_name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "public","static": false,"name": "port"}]
}
,
{
"type": "class",
"name": "Cipher",
"full_name": "::Cipher",
"inherits": [],
"module": "libcrails-encrypt",
"include": "crails/cipher.hpp",
"constructors": [
{
  "static": false,
  "name": "Cipher",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Cipher",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "cipher","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "digest","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::uint","name": "count","alias": "uint"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "embed"}]
}
]
,
"methods": [
{
  "static": true,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "encrypt",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "plaintext","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "pass","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "static": false,
  "name": "encrypt_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "ifn","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "ofn","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "pass","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "decrypt",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "ciphertext","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "pass","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "static": false,
  "name": "decrypt_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "ifn","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "ofn","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "pass","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "encode_base64",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::uchar","name": "ciphertext","alias": "uchar"},{"const": false,"ref": 0,"ptr": 0,"type": "::uint","name": "ciphertext_len","alias": "uint"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::kv1_t","alias": "kv1_t"},
  "const": true,
  "static": false,
  "name": "encode_cipher",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "plaintext","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::kv1_t","alias": "kv1_t"},
  "const": true,
  "static": false,
  "name": "decode_base64",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mimetext","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "decode_cipher",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::uchar","name": "ciphertext","alias": "uchar"},{"const": false,"ref": 0,"ptr": 0,"type": "::uint","name": "ciphertext_len","alias": "uint"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "file_read",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "fn","alias": "string"}]
}
,{
  "const": true,
  "static": false,
  "name": "file_write",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "fn","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "data","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "nl"}]
}
,{
  "static": false,
  "name": "debug",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "b"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "debug",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_salt",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "salt","alias": "string"}]
}
,{
  "static": false,
  "name": "init",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "pass","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "m_pass","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "m_cipher","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "m_digest","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::aes_salt_t","visibility": "private","static": false,"name": "m_salt","alias": "aes_salt_t"},{"const": false,"ref": 0,"ptr": 0,"type": "::aes_key_t","visibility": "private","static": false,"name": "m_key","alias": "aes_key_t"},{"const": false,"ref": 0,"ptr": 0,"type": "::aes_iv_t","visibility": "private","static": false,"name": "m_iv","alias": "aes_iv_t"},{"const": false,"ref": 0,"ptr": 0,"type": "::uint","visibility": "private","static": false,"name": "m_count","alias": "uint"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "m_embed"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "m_debug"}]
}
,
{
"type": "class",
"name": "Digest",
"full_name": "::Crails::Digest",
"inherits": [],
"module": "libcrails-encrypt",
"include": "crails/digest.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_string",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_base64",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::unsigned char[64]","visibility": "protected","static": false,"name": "md_value","alias": "unsigned char[64]"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "protected","static": false,"name": "md_len"}]
}
,
{
"type": "class",
"name": "MessageDigest",
"full_name": "::Crails::MessageDigest",
"inherits": ["::Crails::Digest"],
"module": "libcrails-encrypt",
"include": "crails/message_digest.hpp",
"doc": "docs/Crails/MessageDigest.html",
"excerpt": "<p>Simple interface for encrypting [std::string] using OpenSSL.</p>",
"constructors": [
{
  "static": false,
  "name": "MessageDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::EVP_MD","name": "md","alias": "EVP_MD"}]
}
,{
  "static": false,
  "name": "MessageDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "strategy","alias": "string"}]
}
,{
  "static": false,
  "name": "MessageDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::MessageDigest","alias": "MessageDigest"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MessageDigest","alias": "MessageDigest"},
"doc": "docs/Crails/MessageDigest/operator<<.html",
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "input","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MessageDigest","alias": "MessageDigest"},
"doc": "docs/Crails/MessageDigest/operator<<.html",
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","name": "input","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MessageDigest","alias": "MessageDigest"},
"doc": "docs/Crails/MessageDigest/operator>>.html",
  "static": false,
  "name": "operator>>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::string","name": "output","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/MessageDigest/to_string.html",
  "static": false,
  "name": "to_string",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/MessageDigest/to_base64.html",
  "static": false,
  "name": "to_base64",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR","default": "::Crails::MessageDigest"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MessageDigest","alias": "MessageDigest"},
"doc": "docs/Crails/MessageDigest/insert.html",
  "static": false,
  "name": "insert",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"}]
}
,{
  "static": false,
  "name": "initialize",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "finalize",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 1,"type": "::EVP_MD_CTX","visibility": "private","static": false,"name": "context","alias": "EVP_MD_CTX"},{"const": true,"ref": 0,"ptr": 1,"type": "::EVP_MD","visibility": "private","static": false,"name": "md","alias": "EVP_MD"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "initialized"}]
}
,
{
"type": "class",
"name": "HmacDigest",
"full_name": "::Crails::HmacDigest",
"inherits": ["::Crails::Digest"],
"module": "libcrails-encrypt",
"include": "crails/hmac.hpp",
"doc": "docs/Crails/HmacDigest.html",
"excerpt": "<p><a href=\"https://en.wikipedia.org/wiki/HMAC\">HMAC</a> is a <a href=\"https://en.wikipedia.org/wiki/Message_authentication_code\">MAC</a> (message authentication code) involving a cryptographic hash function and a secret cryptographic key. It may be used b...</p>",
"constructors": [
{
  "static": false,
  "name": "HmacDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::EVP_MD","alias": "EVP_MD"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
,{
  "static": false,
  "name": "HmacDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HmacDigest","alias": "HmacDigest"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "Md5Digest",
"full_name": "::Crails::Md5Digest",
"inherits": ["::Crails::MessageDigest"],
"module": "libcrails-encrypt",
"include": "crails/md5.hpp",
"constructors": [
{
  "static": false,
  "name": "Md5Digest",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "HmacMd5Digest",
"full_name": "::Crails::HmacMd5Digest",
"inherits": ["::Crails::HmacDigest"],
"module": "libcrails-encrypt",
"include": "crails/md5.hpp",
"doc": "docs/Crails/HmacMd5Digest.html",
"excerpt": "<p>Checks the authenticity of a message using the HMAC-MD5 algorithm. See [HmacDigest] for more details.</p>",
"constructors": [
{
  "static": false,
  "name": "HmacMd5Digest",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Pbkdf2HmacDigest",
"full_name": "::Crails::Pbkdf2HmacDigest",
"inherits": ["::Crails::Digest"],
"module": "libcrails-encrypt",
"include": "crails/pbkdf2_hmac.hpp",
"constructors": [
{
  "static": false,
  "name": "Pbkdf2HmacDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "password","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "salt","alias": "string_view"},{"const": true,"ref": 0,"ptr": 1,"type": "::EVP_MD","alias": "EVP_MD"}]
}
,{
  "static": false,
  "name": "Pbkdf2HmacDigest",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Pbkdf2HmacDigest","alias": "Pbkdf2HmacDigest"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "password_hash",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "iteration_count"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "salt","alias": "string"},{"const": true,"ref": 0,"ptr": 1,"type": "::EVP_MD","visibility": "private","static": false,"name": "digest","alias": "EVP_MD"}]
}
,
{
"type": "class",
"name": "FontIconTheme",
"full_name": "::Crails::FontIconTheme",
"inherits": [],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","name": "icon","alias": "IconIdentity"},{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "style"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "default_icon",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "tag",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","name": "icon","alias": "IconIdentity"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "tag",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","name": "icon","alias": "IconIdentity"},{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "style"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "stylesheet_cdn_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_json",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<FontIcon::IconIdentity, std::string>","visibility": "protected","static": false,"name": "icons","alias": "map<FontIcon::IconIdentity, std::string>"}]
}
,
{
"type": "class",
"name": "ThemeBase",
"full_name": "::Crails::FontAwesome::ThemeBase",
"inherits": ["::Crails::FontIconTheme"],
"module": "libcrails-fonticons",
"include": "crails/icons/fontawesome.hpp",
"constructors": [
{
  "static": false,
  "name": "ThemeBase",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Style","name": "value","alias": "Style"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "style_prefix",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "style"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","name": "icon","alias": "IconIdentity"},{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "style"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::Style","visibility": "protected","static": false,"name": "default_style","alias": "Style"}]
}
,
{
"type": "class",
"name": "V6",
"full_name": "::Crails::FontAwesome::V6",
"inherits": ["::Crails::FontAwesome::ThemeBase"],
"module": "libcrails-fonticons",
"include": "crails/icons/fontawesome.hpp",
"constructors": [
{
  "static": false,
  "name": "V6",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Style","name": "default_style","alias": "Style"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "style_prefix",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "style"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "stylesheet_cdn_url",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "V5",
"full_name": "::Crails::FontAwesome::V5",
"inherits": ["::Crails::FontAwesome::ThemeBase"],
"module": "libcrails-fonticons",
"include": "crails/icons/fontawesome.hpp",
"constructors": [
{
  "static": false,
  "name": "V5",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Style","name": "default_style","alias": "Style"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "style_prefix",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "short","name": "style"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "stylesheet_cdn_url",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestFormParser",
"full_name": "::Crails::RequestFormParser",
"inherits": ["::Crails::BodyParser"],
"module": "libcrails-form-parser",
"include": "crails/request_parsers/form_parser.hpp",
"doc": "docs/Crails/RequestFormParser.html",
"excerpt": "<p>Implementation of the [RequestParser] interface that parses variables from a request body provided using the <code>application/x-www-urlencoded</code> format, typically used for sending HTML forms.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "HtmlRenderer",
"full_name": "::Crails::HtmlRenderer",
"inherits": ["::Crails::Renderer"],
"module": "libcrails-html-views",
"include": "crails/renderers/html.hpp",
"doc": "docs/Crails/HtmlRenderer.html",
"excerpt": "<p>Implementation of the [Renderer] interface for HTML documents.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_mimetypes",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "render_template",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Template",
"full_name": "::Crails::Template",
"inherits": [],
"module": "libcrails-templates",
"include": "crails/template.hpp",
"doc": "docs/Crails/Template.html",
"excerpt": "<p>Base class for templates that may be rendered by a [Renderer].</p>",
"constructors": [
{
  "static": false,
  "name": "Template",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Renderer","name": "renderer","alias": "Renderer"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","name": "target","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/Template/partial.html",
  "static": false,
  "name": "partial",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "has_partial",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "static": false,
  "name": "apply_post_render_filters",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","visibility": "protected","static": false,"name": "vars","alias": "SharedVars"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","visibility": "protected","static": false,"name": "target","alias": "RenderTarget"},{"const": true,"ref": 1,"ptr": 0,"type": "::Renderer","visibility": "private","static": false,"name": "renderer","alias": "Renderer"}]
}
,
{
"type": "class",
"name": "HtmlTemplate",
"full_name": "::Crails::HtmlTemplate",
"inherits": ["::Crails::Template"],
"module": "libcrails-html-views",
"include": "crails/html_template.hpp",
"doc": "docs/Crails/HtmlTemplate.html",
"excerpt": "<p>Implementation of the [Template] class for HTML documents. When writing HTML templates for <a href=\"https://github.com/crails-framework/ecpp\">ecpp</a>, you should consider that the contents of your template will be implementing the <code>HtmlTemplate</c...</p>",
"constructors": [
{
  "static": false,
  "name": "HtmlTemplate",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Renderer","name": "renderer","alias": "Renderer"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","name": "target","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/HtmlTemplate/html_escape.html",
  "static": true,
  "name": "html_escape",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "data","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/HtmlTemplate/tag.html",
  "static": true,
  "name": "tag",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/HtmlTemplate/tag.html",
  "static": true,
  "name": "tag",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"doc": "docs/Crails/HtmlTemplate/tag.html",
  "static": true,
  "name": "tag",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "name","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/form.html",
  "static": false,
  "name": "form",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/link.html",
  "static": false,
  "name": "link",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","name": "label","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/link.html",
  "static": false,
  "name": "link",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/link.html",
  "static": false,
  "name": "link",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","name": "content","alias": "Yieldable"}]
}
,{
  "template_params": [{"type": "typename","name": "MODEL","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/form_for.html",
  "static": false,
  "name": "form_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::MODEL","alias": "MODEL"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "template_params": [{"type": "typename","name": "MODEL","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/form_for.html",
  "static": false,
  "name": "form_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::MODEL","alias": "MODEL"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "hidden_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "mail_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "date_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "value","alias": "time_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "date_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "datetime_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "value","alias": "time_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "datetime_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "password_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "number_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "boolean_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "value"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "upload_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "multiple_upload_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/select_field.html",
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/select_field.html",
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<VALUE>","alias": "vector<VALUE>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
"doc": "docs/Crails/HtmlTemplate/select_field.html",
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::set<VALUE>","alias": "set<VALUE>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "render_select_options",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (VALUE)>","alias": "function<bool (VALUE)>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "FormBuilderBase",
"full_name": "::Crails::FormBuilderBase",
"inherits": [],
"module": "libcrails-html-views",
"include": "crails/html_form_builder.hpp",
"constructors": [
{
  "static": false,
  "name": "FormBuilderBase",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::HtmlTemplate","name": "parent","alias": "HtmlTemplate"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "scope","alias": "string_view"}]
}
,{
  "static": false,
  "name": "FormBuilderBase",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::HtmlTemplate","name": "parent","alias": "HtmlTemplate"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "scope","alias": "string"}]
}
,{
  "static": false,
  "name": "FormBuilderBase",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::HtmlTemplate","name": "parent","alias": "HtmlTemplate"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "scope","alias": "char"}]
}
,{
  "static": false,
  "name": "FormBuilderBase",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::FormBuilderBase","name": "copy","alias": "FormBuilderBase"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "scoped_name",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "label_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "label","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "label_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "label_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string ()>","name": "yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "hidden_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "mail_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "date_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "value","alias": "time_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "datetime_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "boolean_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "value"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "password_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "upload_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "multiple_upload_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<VALUE>","alias": "vector<VALUE>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::HtmlTemplate","visibility": "protected","static": false,"name": "html_template","alias": "HtmlTemplate"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "protected","static": false,"name": "scope","alias": "string_view"}]
}
,
{
"type": "class",
"name": "FormBuilder",
"full_name": "::Crails::FormBuilder",
"inherits": ["::Crails::FormBuilderBase"],
"module": "libcrails-html-views",
"include": "crails/html_form_builder.hpp",
"template_params": [{"type": "typename","name": "MODEL"}],
"doc": "docs/Crails/FormBuilder.html",
"excerpt": "<p>Helper class generating HTML forms for Models. The <code>FormBuilder</code> template class creates &lt;form&gt; and its &lt;input&gt; elements with <em>scoped</em> names.</p>",
"constructors": [
{
  "static": false,
  "name": "FormBuilder<MODEL>",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::HtmlTemplate","name": "parent","alias": "HtmlTemplate"},{"const": true,"ref": 1,"ptr": 0,"type": "::MODEL","name": "model","alias": "MODEL"}]
}
,{
  "static": false,
  "name": "FormBuilder<MODEL>",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::FormBuilderBase","name": "source","alias": "FormBuilderBase"},{"const": true,"ref": 1,"ptr": 0,"type": "::MODEL","name": "model","alias": "MODEL"}]
}
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "hidden_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "mail_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "date_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "datetime_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "boolean_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "number_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "password_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "VALUE &(MODEL::*)() const","alias": "*)() const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "VALUE &(MODEL::*)() const","alias": "*)() const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE"},{"type": "typename","name": "METHOD","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "label_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "label","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "label_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "label_for",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string ()>","name": "yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "hidden_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "mail_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "date_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "value","alias": "time_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "datetime_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "boolean_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "value"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "password_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "upload_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "multiple_upload_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","name": "attrs","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "i18n_text_area",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<VALUE>","alias": "vector<VALUE>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
,{
  "template_params": [{"type": "typename","name": "VALUE","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "select_field",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<VALUE, std::string>","alias": "map<VALUE, std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "::VALUE","alias": "VALUE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "::MODEL","visibility": "protected","static": false,"name": "model","alias": "MODEL"}]
}
,
{
"type": "struct",
"name": "ClientInterface",
"full_name": "::Crails::ClientInterface",
"inherits": [],
"module": "libcrails-http-client",
"include": "crails/client.hpp",
"doc": "docs/Crails/ClientInterface.html",
"excerpt": "<p>Common components for the HTTP [Client] and [Ssl::Client] classes.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "disconnect",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Response","alias": "Response"},
  "virtual": 2,
  "static": false,
  "name": "query",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Request","name": "request","alias": "Request"}]
}
,{
  "virtual": 2,
  "static": false,
  "name": "async_query",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Request","name": "request","alias": "Request"},{"const": false,"ref": 0,"ptr": 0,"type": "::AsyncCallback","alias": "AsyncCallback"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "protected","static": false,"name": "connected"}]
}
,
{
"type": "class",
"name": "Client",
"full_name": "::Crails::Client",
"inherits": ["::Crails::ClientInterface","std::enable_shared_from_this"],
"module": "libcrails-http-client",
"include": "crails/client.hpp",
"doc": "docs/Crails/Client.html",
"excerpt": "<p>HTTP client allowing you to send HTTP queries using the same [boost::asio::io_context] as your [Crails::Server].</p>",
"constructors": [
{
  "static": false,
  "name": "Client",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "host","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "port"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Response","alias": "Response"},
  "virtual": 1,
  "static": false,
  "name": "query",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Request","alias": "Request"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "async_query",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Request","alias": "Request"},{"const": false,"ref": 0,"ptr": 0,"type": "::AsyncCallback","alias": "AsyncCallback"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "disconnect",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "host","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "private","static": false,"name": "port"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::tcp_stream","visibility": "private","static": false,"name": "stream","alias": "tcp_stream"}]
}
,
{
"type": "class",
"name": "Client",
"full_name": "::Crails::Ssl::Client",
"inherits": ["::Crails::ClientInterface","std::enable_shared_from_this"],
"module": "libcrails-http-client",
"include": "crails/client.hpp",
"doc": "docs/Crails/Ssl/Client.html",
"excerpt": "<p>HTTP client allowing you to send HTTPS queries using the same [boost::asio::io_context] as your [Crails::Server].</p>",
"constructors": [
{
  "static": false,
  "name": "Client",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "host","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "port"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Response","alias": "Response"},
  "virtual": 1,
  "static": false,
  "name": "query",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Request","alias": "Request"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "async_query",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Request","alias": "Request"},{"const": false,"ref": 0,"ptr": 0,"type": "::AsyncCallback","alias": "AsyncCallback"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "disconnect",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "host","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "private","static": false,"name": "port"},{"const": false,"ref": 1,"ptr": 0,"type": "boost::asio::io_context","visibility": "private","static": false,"name": "ioc","alias": "io_context"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ssl::context","visibility": "private","static": false,"name": "ctx","alias": "context"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::ssl_stream<boost::beast::tcp_stream>","visibility": "private","static": false,"name": "stream","alias": "ssl_stream<boost::beast::tcp_stream>"}]
}
,
{
"type": "class",
"name": "QueryController",
"full_name": "::Crails::QueryController",
"inherits": ["SUPER"],
"module": "libcrails-http-client",
"include": "crails/controller/query.hpp",
"template_params": [{"type": "typename","name": "SUPER"}],
"constructors": [
{
  "static": false,
  "name": "QueryController<SUPER>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "Client::Response","alias": "Response"},
  "static": false,
  "name": "http_query",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Url","name": "url","alias": "Url"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "Client::Response","alias": "Response"},
  "static": false,
  "name": "http_query",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Url","name": "url","alias": "Url"},{"const": false,"ref": 0,"ptr": 0,"type": "Client::Request","name": "request","alias": "Request"}]
}
,{
  "static": false,
  "name": "async_http_query",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Url","name": "url","alias": "Url"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const Response &, boost::beast::error_code)>","name": "callback","alias": "AsyncCallback"}]
}
,{
  "static": false,
  "name": "async_http_query",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Url","name": "url","alias": "Url"},{"const": false,"ref": 0,"ptr": 0,"type": "Client::Request","name": "request","alias": "Request"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const Response &, boost::beast::error_code)>","name": "callback","alias": "AsyncCallback"}]
}
,{
  "template_params": [{"type": "typename","name": "CLIENT_TYPE","default": "::Crails::Client"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "Client::Response","alias": "Response"},
  "static": false,
  "name": "make_http_query",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Url","alias": "Url"},{"const": true,"ref": 1,"ptr": 0,"type": "Client::Request","alias": "Request"}]
}
,{
  "template_params": [{"type": "typename","name": "CLIENT_TYPE"}],
  "static": false,
  "name": "make_async_http_query",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Url","alias": "Url"},{"const": true,"ref": 1,"ptr": 0,"type": "Client::Request","alias": "Request"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const Response &, boost::beast::error_code)>","alias": "AsyncCallback"}]
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::Context","visibility": "private","static": false,"name": "_context","alias": "Context"}]
}
,
{
"type": "class",
"name": "Settings",
"full_name": "::i18n::Settings",
"inherits": [],
"module": "libcrails-i18n",
"include": "crails/i18n_settings.hpp",
"constructors": [
{
  "static": false,
  "name": "Settings",
  "visibility": "protected",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_current_locale",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "directory","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "default_locale","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","visibility": "public","static": false,"name": "locales","alias": "vector<std::string>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": true,"name": "current_locale","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::I18nData","visibility": "public","static": false,"name": "t","alias": "I18nData"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "use_localized_strings"}]
}
,
{
"type": "struct",
"name": "I18nData",
"full_name": "::i18n::I18nData",
"inherits": [],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp",
"constructors": [
{
  "static": false,
  "name": "I18nData",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"}]
}
,{
  "static": false,
  "name": "I18nData",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "add_locale",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "locale","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "asset_path","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, DataTree>","visibility": "public","static": false,"name": "data","alias": "map<std::string, DataTree>"},{"const": true,"ref": 1,"ptr": 0,"type": "::Settings","visibility": "public","static": false,"name": "settings","alias": "Settings"}]
}
,
{
"type": "class",
"name": "I18nController",
"full_name": "::Crails::I18nController",
"inherits": ["Crails::Controller"],
"module": "libcrails-i18n",
"include": "crails/controller/i18n.hpp",
"constructors": [
{
  "static": false,
  "name": "I18nController",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_current_locale",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "static": false,
  "name": "json_locale",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "find_request_locale",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "find_current_locale_from_header",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "::i18n::Settings","visibility": "private","static": false,"name": "i18n_settings","alias": "Settings"}]
}
,
{
"type": "struct",
"name": "String",
"full_name": "::i18n::String",
"inherits": ["::DataTree"],
"module": "libcrails-i18n",
"include": "crails/i18n_string.hpp",
"constructors": [
{
  "static": false,
  "name": "String",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "String",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "base_value","alias": "string"}]
}
,{
  "static": false,
  "name": "String",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::String","name": "copy","alias": "String"}]
}
,{
  "static": false,
  "name": "String",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "item","alias": "Data"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "is_localized",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "has_translation",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "from_data",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::String","alias": "String"},
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","name": "val","alias": "string_view"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::String","alias": "String"},
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "val","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_localized_string",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_string",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "const": true,
  "static": false,
  "name": "available_locales",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "BasicImage",
"full_name": "::Crails::BasicImage",
"inherits": ["::Crails::Attachment"],
"module": "libcrails-image",
"include": "crails/image.hpp",
"doc": "docs/Crails/BasicImage.html",
"excerpt": "<p>Implementation of the [Attachment] class from <code>libcrails-attachment</code> which provides methods that help you resize or crop images to a given sizes.</p>",
"constructors": [
{
  "static": false,
  "name": "BasicImage",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "BasicImage",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uid","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_default_image_quality",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::pair<std::size_t, std::size_t>","alias": "pair<std::size_t, std::size_t>"},
  "const": true,
  "static": false,
  "name": "size",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::BasicImage","alias": "BasicImage"},
  "static": false,
  "name": "resized",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "x"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "y"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "options"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::BasicImage","alias": "BasicImage"},
  "static": false,
  "name": "cropped",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "max_x"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "max_y"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "options"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestJsonParser",
"full_name": "::Crails::RequestJsonParser",
"inherits": ["::Crails::BodyParser"],
"module": "libcrails-json-parser",
"include": "crails/request_parsers/json_parser.hpp",
"doc": "docs/Crails/RequestJsonParser.html",
"excerpt": "<p>Implementation of the [RequestParser] interface that parses a body provided with the <code>application/json</code> format and stores it in the [Params] object.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "JsonRenderer",
"full_name": "::Crails::JsonRenderer",
"inherits": ["::Crails::Renderer"],
"module": "libcrails-json-views",
"include": "crails/renderers/json.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_mimetypes",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "render_template",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","name": "response","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "JsonTemplate",
"full_name": "::Crails::JsonTemplate",
"inherits": ["::Crails::Template"],
"module": "libcrails-json-views",
"include": "crails/json_template.hpp",
"constructors": [
{
  "static": false,
  "name": "JsonTemplate",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Renderer","name": "renderer","alias": "Renderer"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","name": "target","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "static": false,
  "name": "apply_post_render_filters",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "json",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "static": false,
  "name": "json",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "object","alias": "function<void ()>"}]
}
,{
  "template_params": [{"type": "typename","name": "ARRAY"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"}]
}
,{
  "template_params": [{"type": "typename","name": "ARRAY"},{"type": "typename","name": "T"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (T)>","alias": "function<void (T)>"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"},{"type": "typename","name": "T"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (T)>","alias": "function<void (T)>"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "value","alias": "Data"}]
}
,{
  "template_params": [{"type": "typename","name": "ARRAY"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"}]
}
,{
  "template_params": [{"type": "typename","name": "ARRAY"},{"type": "typename","name": "T"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (T)>","alias": "function<void (T)>"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"},{"type": "typename","name": "T"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (T)>","alias": "function<void (T)>"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"}],
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "json_array",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "value","alias": "Data"}]
}
,{
  "template_params": [{"type": "typename","name": "MAP"}],
  "static": false,
  "name": "json_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::MAP","alias": "MAP"}]
}
,{
  "template_params": [{"type": "typename","name": "MAP"}],
  "static": false,
  "name": "json_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::MAP","alias": "MAP"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (typename MAP::mapped_type)>","alias": "function<void (typename MAP::mapped_type)>"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}]
}
,{
  "template_params": [{"type": "typename","name": "MAP"}],
  "static": false,
  "name": "json_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::MAP","alias": "MAP"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "MAP"}],
  "static": false,
  "name": "json_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::MAP","alias": "MAP"}]
}
,{
  "template_params": [{"type": "typename","name": "MAP"}],
  "static": false,
  "name": "json_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::MAP","alias": "MAP"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (typename MAP::mapped_type)>","alias": "function<void (typename MAP::mapped_type)>"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}]
}
,{
  "template_params": [{"type": "typename","name": "MAP"}],
  "static": false,
  "name": "json_map",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::MAP","alias": "MAP"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "partial",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
,{
  "static": false,
  "name": "partial",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
,{
  "static": false,
  "name": "inline_partial",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "add_value",
  "visibility": "private",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "template_params": [{"type": "typename","name": "ITERATOR"}],
  "static": false,
  "name": "add_array",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (ITERATOR)>","alias": "function<void (ITERATOR)>"}]
}
,{
  "static": false,
  "name": "add_value_with_key",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "add_separator",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "add_key",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "static": false,
  "name": "add_key",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned long","name": "number"}]
}
,{
  "static": false,
  "name": "add_object",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "func","alias": "function<void ()>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "javascript_escape",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "val","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "protected","static": false,"name": "stream","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "first_item_in_object"}]
}
,
{
"type": "class",
"name": "Server",
"full_name": "::Smtp::Server",
"inherits": [],
"module": "libcrails-mail",
"include": "crails/smtp.hpp",
"constructors": [
{
  "static": false,
  "name": "Server",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "start_tls",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "hostname","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "port"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "hostname","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "port"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "username","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::AuthenticationProtocol","name": "auth","alias": "AuthenticationProtocol"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "disconnect",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Mail","name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_server_id",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_error_callback",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ErrorCallback","name": "value","alias": "ErrorCallback"}]
}
,{
  "static": false,
  "name": "smtp_read_answer",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string)>","name": "callback","alias": "function<void (std::string)>"}]
}
,{
  "static": false,
  "name": "smtp_read_answer",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "expected_return"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string)>","name": "callback","alias": "function<void (std::string)>"}]
}
,{
  "static": false,
  "name": "smtp_write_message",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_write_and_read",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string)>","name": "callback","alias": "function<void (std::string)>"}]
}
,{
  "static": false,
  "name": "smtp_write_and_read",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "expected_return"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (std::string)>","name": "callback","alias": "function<void (std::string)>"}]
}
,{
  "static": false,
  "name": "smtp_ehlo",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_body",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Mail","name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_recipients",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Mail","name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_new_mail",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Mail","name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_handshake",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_handshake_end",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_quit",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_data_address",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "field","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "static": false,
  "name": "smtp_data_addresses",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "field","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::Mail","name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "flag"}]
}
,{
  "const": true,
  "static": false,
  "name": "report_error",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::exception","alias": "exception"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::AsyncHandler","alias": "AsyncHandler"},
  "const": true,
  "static": false,
  "name": "protect_handler",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::AsyncHandler","alias": "AsyncHandler"}]
}
,{
  "static": false,
  "name": "smtp_auth_plain",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_auth_login",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_auth_digest_md5",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_auth_md5",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_auth_cram_md5",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "smtp_auth_login_step",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "username","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "server_id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "private","static": false,"name": "server_message","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::asio::ssl::context","visibility": "private","static": false,"name": "ssl_context","alias": "context"},{"const": false,"ref": 0,"ptr": 0,"type": "::SslSocket","visibility": "private","static": false,"name": "ssl_sock","alias": "SslSocket"},{"const": false,"ref": 1,"ptr": 0,"type": "boost::asio::ip::tcp::socket","visibility": "private","static": false,"name": "sock","alias": "socket"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "tls_enabled"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "send_buffer","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ErrorCallback","visibility": "private","static": false,"name": "on_error","alias": "ErrorCallback"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<AuthenticationProtocol, SmtpAuthMethod>","visibility": "private","static": true,"name": "auth_methods","alias": "map<AuthenticationProtocol, SmtpAuthMethod>"}]
}
,
{
"type": "class",
"name": "Mail",
"full_name": "::Crails::Mail",
"inherits": ["::Crails::RenderTarget"],
"module": "libcrails-mail",
"include": "crails/mail.hpp",
"doc": "docs/Crails/Mail.html",
"excerpt": "<p>Represents an email with its various attributes: content, sender, recipients...</p>",
"constructors": [
]
,
"methods": [
{
"doc": "docs/Crails/Mail/set_sender.html",
  "static": false,
  "name": "set_sender",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
"doc": "docs/Crails/Mail/add_recipient.html",
  "static": false,
  "name": "add_recipient",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","name": "flags"}]
}
,{
  "static": false,
  "name": "del_recipient",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "set_header",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "header","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "size","alias": "size_t"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_id",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_id",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "id","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Sender","alias": "Sender"},
  "const": true,
  "static": false,
  "name": "get_sender",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/Mail/set_sender.html",
  "static": false,
  "name": "set_sender",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Sender","name": "sender","alias": "Sender"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_subject",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_subject",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "subject","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_reply_to",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_reply_to",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "reply_to","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_content_type",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_content_type",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "content_type","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_charset",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_charset",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "charset","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Recipients","alias": "Recipients"},
  "const": true,
  "static": false,
  "name": "get_recipients",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_recipients",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Recipients","name": "recipients","alias": "Recipients"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_html",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_text",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Recipients","visibility": "private","static": false,"name": "recipients","alias": "Recipients"},{"const": false,"ref": 0,"ptr": 0,"type": "::Sender","visibility": "private","static": false,"name": "sender","alias": "Sender"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "subject","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "html","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "text","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "reply_to","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "content_type","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "charset","alias": "string"}]
}
,
{
"type": "struct",
"name": "Identity",
"full_name": "::Crails::Mail::Identity",
"inherits": [],
"module": "libcrails-mail",
"include": "crails/mail.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "to_string",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "address","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "name","alias": "string"}]
}
,
{
"type": "struct",
"name": "Recipient",
"full_name": "::Crails::Mail::Recipient",
"inherits": ["::Crails::Mail::Identity"],
"module": "libcrails-mail",
"include": "crails/mail.hpp",
"constructors": [
{
  "static": false,
  "name": "Recipient",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Recipient",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","name": "type"}]
}
,{
  "static": false,
  "name": "Recipient",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "address","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","name": "type"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "unsigned char","visibility": "public","static": false,"name": "type"}]
}
,
{
"type": "class",
"name": "MailServer",
"full_name": "::Crails::MailServer",
"inherits": [],
"module": "libcrails-mail",
"include": "crails/mail_servers.hpp",
"doc": "docs/Crails/MailServer.html",
"excerpt": "<p>This class helps you define mail server configurations for the [MailServers] class.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "backend",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::MailServers::Backend","name": "value","alias": "Backend"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "hostname",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "port",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "value"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "use_authentication",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "value"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "use_tls",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "value"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "authentication_protocol",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Smtp::Server::AuthenticationProtocol","name": "value","alias": "AuthenticationProtocol"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "username",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::MailServer","alias": "MailServer"},
  "static": false,
  "name": "password",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::MailServers::Conf","visibility": "private","static": false,"name": "conf","alias": "Conf"}]
}
,
{
"type": "struct",
"name": "MailServiceInterface",
"full_name": "::Crails::MailServiceInterface",
"inherits": [],
"module": "libcrails-mail",
"include": "crails/mail_servers.hpp",
"doc": "docs/Crails/MailServiceInterface.html",
"excerpt": "<p>The [MailServiceInterface] allows you to connect to a mail service and use it to send mails, without having to care about which backend you're using.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
"doc": "docs/Crails/MailServiceInterface/connect.html",
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "virtual": 2,
"doc": "docs/Crails/MailServiceInterface/send.html",
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "virtual": 2,
"doc": "docs/Crails/MailServiceInterface/send_batch.html",
  "static": false,
  "name": "send_batch",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Mail>","alias": "vector<Mail>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "virtual": 2,
"doc": "docs/Crails/MailServiceInterface/set_error_callback.html",
  "static": false,
  "name": "set_error_callback",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const std::exception &)>","alias": "function<void (const std::exception &)>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "MailServers",
"full_name": "::Crails::MailServers",
"inherits": [],
"module": "libcrails-mail",
"include": "crails/mail_servers.hpp",
"doc": "docs/Crails/MailServers.html",
"excerpt": "<p>This singleton class is used to create instances of mail services, used to send mails through one of the provided backends.</p>",
"constructors": [
{
  "static": false,
  "name": "MailServers",
  "visibility": "protected",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<MailServiceInterface>","alias": "shared_ptr<MailServiceInterface>"},
  "const": true,
  "static": false,
  "name": "create",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "conf_name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<MailServiceInterface>","alias": "shared_ptr<MailServiceInterface>"},
  "const": true,
  "static": false,
  "name": "create",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Conf","alias": "Conf"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "::List","visibility": "protected","static": false,"name": "servers","alias": "List"}]
}
,
{
"type": "class",
"name": "Conf",
"full_name": "::Crails::MailServers::Conf",
"inherits": [],
"module": "libcrails-mail",
"include": "crails/mail_servers.hpp",
"constructors": [
{
  "static": false,
  "name": "Conf",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Backend","visibility": "public","static": false,"name": "backend","alias": "Backend"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "hostname","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": false,"name": "port"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "use_authentication"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "use_tls"},{"const": false,"ref": 0,"ptr": 0,"type": "::Smtp::Server::AuthenticationProtocol","visibility": "public","static": false,"name": "authentication_protocol","alias": "AuthenticationProtocol"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "username","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "password","alias": "string"}]
}
,
{
"type": "struct",
"name": "SmtpMailService",
"full_name": "::Crails::SmtpMailService",
"inherits": ["::Crails::MailServiceInterface"],
"module": "libcrails-mail",
"include": "crails/smtp_mail_service.hpp",
"constructors": [
{
  "static": false,
  "name": "SmtpMailService",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::MailServers::Conf","name": "settings","alias": "Conf"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "send_batch",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Mail>","alias": "vector<Mail>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "set_error_callback",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const std::exception &)>","alias": "function<void (const std::exception &)>"}]
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::MailServers::Conf","visibility": "private","static": false,"name": "settings","alias": "Conf"},{"const": false,"ref": 0,"ptr": 0,"type": "::Smtp::Server","visibility": "private","static": false,"name": "server","alias": "Server"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "connected"}]
}
,
{
"type": "class",
"name": "Mailer",
"full_name": "::Crails::Mailer",
"inherits": ["std::enable_shared_from_this"],
"module": "libcrails-mail",
"include": "crails/mailer.hpp",
"doc": "docs/Crails/Mailer.html",
"excerpt": "<p>The Mailer class helps you quickly rendering emails using Crails views.The relevant <code>render</code> methods provided in [Crails::RenderController] are alsoimplemented in the [Crails::Mailer] class.</p>",
"constructors": [
{
  "static": false,
  "name": "Mailer",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Controller","name": "controller","alias": "Controller"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "configuration","alias": "string"}]
}
,{
  "static": false,
  "name": "Mailer",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "configuration","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Mail","alias": "Mail"},
  "static": false,
  "name": "get_mail",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::RenderController::RenderType","name": "type","alias": "RenderType"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","alias": "SharedVars"}]
}
,{
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "on_sent",
  "visibility": "protected",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "on_error_occured",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::exception","alias": "exception"}]
}
,{
  "static": false,
  "name": "create_server",
  "visibility": "private",
  "params": []
}
,{
  "static": false,
  "name": "render_content_type",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "type","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","alias": "SharedVars"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Controller>","visibility": "protected","static": false,"name": "controller","alias": "shared_ptr<Controller>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<MailServiceInterface>","visibility": "protected","static": false,"name": "service","alias": "shared_ptr<MailServiceInterface>"},{"const": false,"ref": 0,"ptr": 0,"type": "::Mail","visibility": "protected","static": false,"name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "::SharedVars","visibility": "protected","static": false,"name": "vars","alias": "SharedVars"},{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "protected","static": false,"name": "params","alias": "DataTree"},{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "protected","static": false,"name": "response","alias": "DataTree"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "configuration","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "is_connected"}]
}
,
{
"type": "class",
"name": "MailgunService",
"full_name": "::Crails::MailgunService",
"inherits": ["::Crails::MailServiceInterface"],
"module": "libcrails-mail",
"include": "crails/mailgun_mail_service.hpp",
"constructors": [
{
  "static": false,
  "name": "MailgunService",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::MailServers::Conf","name": "settings","alias": "Conf"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "domain","alias": "string"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "send",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Mail","name": "mail","alias": "Mail"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "send_batch",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<Mail>","alias": "vector<Mail>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","alias": "function<void ()>"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "set_error_callback",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const std::exception &)>","name": "value","alias": "function<void (const std::exception &)>"}]
}
,{
  "template_params": [{"type": "typename","name": "PARTS","default": "std::string"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "uri",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::PARTS...","alias": "PARTS..."}]
}
,{
  "static": false,
  "name": "error_occured",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::error_code","name": "error","alias": "error_code"}]
}
,{
  "static": false,
  "name": "received_error_status",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::HttpStatus","alias": "HttpStatus"}]
}
]
,
"fields":[{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::MailServers::Conf","visibility": "private","static": false,"name": "settings","alias": "Conf"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "domain","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::Ssl::Client","visibility": "private","static": false,"name": "http","alias": "Client"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const std::exception &)>","visibility": "private","static": false,"name": "error_callback","alias": "function<void (const std::exception &)>"}]
}
,
{
"type": "struct",
"name": "MultimediaConvertFailure",
"full_name": "::Crails::MultimediaConvertFailure",
"inherits": ["::boost_ext::runtime_error"],
"module": "libcrails-multimedia",
"include": "crails/multimedia_convert_failure.hpp",
"constructors": [
{
  "static": false,
  "name": "MultimediaConvertFailure",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "msg","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "VideoFile",
"full_name": "::Crails::VideoFile",
"inherits": ["::Crails::Attachment"],
"module": "libcrails-multimedia",
"include": "crails/videofile.hpp",
"constructors": [
{
  "static": false,
  "name": "VideoFile",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "VideoFile",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uid","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::VideoFile","alias": "VideoFile"},
  "static": false,
  "name": "as_format",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Format","alias": "Format"}]
}
,{
  "static": false,
  "name": "convert",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "extension","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mimetype","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "video_codec","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "audio_codec","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "AudioFile",
"full_name": "::Crails::AudioFile",
"inherits": ["::Crails::Attachment"],
"module": "libcrails-multimedia",
"include": "crails/audiofile.hpp",
"constructors": [
{
  "static": false,
  "name": "AudioFile",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "AudioFile",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uid","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::AudioFile","alias": "AudioFile"},
  "const": true,
  "static": false,
  "name": "as_format",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Format","alias": "Format"}]
}
,{
  "static": false,
  "name": "convert",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "extension","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mimetype","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "codec","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "Settings",
"full_name": "::Crails::OAuth::Settings",
"inherits": [],
"module": "libcrails-oauth",
"include": "crails/oauth/api.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"},
  "static": false,
  "name": "with_id",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"},
  "static": false,
  "name": "with_secret",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"},
  "static": false,
  "name": "with_redirect_url",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"},
  "static": false,
  "name": "with_code",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "value","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "secret","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "redirect_url","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "code","alias": "string"}]
}
,
{
"type": "class",
"name": "Api",
"full_name": "::Crails::OAuth::Api",
"inherits": [],
"module": "libcrails-oauth",
"include": "crails/oauth/api.hpp",
"constructors": [
{
  "static": false,
  "name": "Api",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Settings","alias": "Settings"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "fetch_access_token",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"},
  "static": false,
  "name": "get_user_data",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "access_token_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "get_oauth_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_oauth_id",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_oauth_secret",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_redirect_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "grant_type",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 2,
  "static": false,
  "name": "fetch_user_data",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "require_access_token",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "require_user_data",
  "visibility": "protected",
  "params": []
}
,{
  "static": false,
  "name": "prepare",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Tests::Request","alias": "Request"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "http_query",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "use_token"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "http_query",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "use_token"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Settings","visibility": "protected","static": false,"name": "settings","alias": "Settings"},{"const": false,"ref": 0,"ptr": 0,"type": "::AccessToken","visibility": "protected","static": false,"name": "access_token","alias": "AccessToken"},{"const": false,"ref": 0,"ptr": 0,"type": "std::optional<::DataTree>","visibility": "protected","static": false,"name": "user_data","alias": "optional<::DataTree>"}]
}
,
{
"type": "class",
"name": "Session",
"full_name": "::Crails::Session",
"inherits": [],
"module": "libcrails-signin",
"include": "crails/signin/session.hpp",
"template_params": [{"type": "typename","name": "USER"}],
"doc": "docs/Crails/Session.html",
"excerpt": "<p>Loads and stores the session data for an [AuthenticableModel] implementation using a query's [SessionStore].</p>",
"constructors": [
{
  "static": false,
  "name": "Session<USER>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "Odb::Connection","name": "database","alias": "Connection"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "session_data","alias": "Data"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},
  "static": false,
  "name": "get_min_sign_in_time",
  "visibility": "public",
  "params": []
}
,{
"doc": "docs/Crails/Session/set_current_user.html",
  "static": false,
  "name": "set_current_user",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::UserPtr","name": "user","alias": "UserPtr"}]
}
,{
"doc": "docs/Crails/Session/set_current_user.html",
  "static": false,
  "name": "set_current_user",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::USER","name": "user","alias": "USER"}]
}
,{
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::UserPtr","alias": "UserPtr"},
"doc": "docs/Crails/Session/get_current_user.html",
  "static": false,
  "name": "get_current_user",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::UserPtr","alias": "UserPtr"},
  "const": true,
"doc": "docs/Crails/Session/const_get_current_user.html",
  "static": false,
  "name": "const_get_current_user",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "to_json",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "Odb::Connection","visibility": "private","static": false,"name": "database","alias": "Connection"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","visibility": "private","static": false,"name": "session_data","alias": "Data"},{"const": false,"ref": 0,"ptr": 0,"type": "::UserPtr","visibility": "private","static": false,"name": "current_user","alias": "UserPtr"}]
}
,
{
"type": "class",
"name": "Controller",
"full_name": "::Crails::OAuth::Controller",
"inherits": ["SUPER"],
"module": "libcrails-oauth",
"include": "crails/oauth/controller.hpp",
"template_params": [{"type": "typename","name": "USER"},{"type": "typename","name": "API"},{"type": "typename","name": "SUPER"}],
"constructors": [
{
  "static": false,
  "name": "Controller<USER, API, SUPER>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Settings","alias": "Settings"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "settings",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<USER>","alias": "shared_ptr<USER>"},
  "virtual": 2,
  "static": false,
  "name": "find_user",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "email","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<USER>","alias": "shared_ptr<USER>"},
  "virtual": 2,
  "static": false,
  "name": "create_user",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::API","name": "api","alias": "API"}]
}
,{
  "virtual": 2,
  "static": false,
  "name": "update_user",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::API","name": "api","alias": "API"},{"const": false,"ref": 1,"ptr": 0,"type": "::USER","name": "user","alias": "USER"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "is_acceptable_new_user",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::API","name": "api","alias": "API"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "must_protect_from_forgery",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "create",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "callback",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Session<USER>","visibility": "private","static": false,"name": "current_session","alias": "Session<USER>"}]
}
,
{
"type": "class",
"name": "Google",
"full_name": "::Crails::OAuth::Google",
"inherits": ["::Crails::OAuth::Api","::Crails::OAuth::Api","::Crails::OAuth::Api"],
"module": "libcrails-oauth",
"include": "crails/oauth/google.hpp",
"constructors": [
{
  "static": false,
  "name": "Google",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::OAuth::Settings","name": "settings","alias": "Settings"}]
}
,{
  "static": false,
  "name": "Facebook",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::OAuth::Settings","name": "settings","alias": "Settings"}]
}
,{
  "static": false,
  "name": "Live",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::OAuth::Settings","name": "settings","alias": "Settings"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_email",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_avatar",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_firstname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_lastname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_locale",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "access_token_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_oauth_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "fetch_user_data",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_email",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_firstname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_lastname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_avatar",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "access_token_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_oauth_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "grant_type",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "fetch_user_data",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_email",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_firstname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_lastname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_avatar",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "access_token_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_oauth_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "fetch_user_data",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Facebook",
"full_name": "::Crails::OAuth::Facebook",
"inherits": ["::Crails::OAuth::Api"],
"module": "libcrails-oauth",
"include": "crails/oauth/facebook.hpp",
"constructors": [
{
  "static": false,
  "name": "Facebook",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::OAuth::Settings","name": "settings","alias": "Settings"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_email",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_firstname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_lastname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_avatar",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "access_token_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_oauth_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "grant_type",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "fetch_user_data",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Live",
"full_name": "::Crails::OAuth::Live",
"inherits": ["::Crails::OAuth::Api"],
"module": "libcrails-oauth",
"include": "crails/oauth/live.hpp",
"constructors": [
{
  "static": false,
  "name": "Live",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::OAuth::Settings","name": "settings","alias": "Settings"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_email",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_firstname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_lastname",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_user_avatar",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "access_token_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_oauth_url",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "fetch_user_data",
  "visibility": "private",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "ProxyRequestHandler",
"full_name": "::Crails::ProxyRequestHandler",
"inherits": ["::Crails::BodyParser"],
"module": "libcrails-proxy",
"include": "crails/request_parsers/proxy.hpp",
"doc": "docs/Crails/ProxyRequestHandler.html",
"excerpt": "<p>Implementation of [RequestHandler] that filters queries matching a set of [ProxyRequestHandler::Rules] and treat them accordingly.</p>",
"constructors": [
{
  "static": false,
  "name": "ProxyRequestHandler",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Rules","alias": "Rules"},{"const": true,"ref": 0,"ptr": 0,"type": "::Mode","name": "default_mode","alias": "Mode"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "const": true,
  "static": false,
  "name": "execute_rule",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Rule","alias": "Rule"},{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "const": true,
  "static": false,
  "name": "proxy",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Rule","alias": "Rule"},{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "get_proxyfied_url",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ProxyRequest","alias": "ProxyRequest"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::Mode","visibility": "private","static": false,"name": "default_mode","alias": "Mode"},{"const": true,"ref": 0,"ptr": 0,"type": "::Rules","visibility": "private","static": false,"name": "rules","alias": "Rules"}]
}
,
{
"type": "struct",
"name": "ProxyRequest",
"full_name": "::Crails::ProxyRequestHandler::ProxyRequest",
"inherits": ["ClientRequest"],
"module": "libcrails-proxy",
"include": "crails/request_parsers/proxy.hpp",
"doc": "docs/Crails/ProxyRequestHandler/ProxyRequest.html",
"excerpt": "<p>Describes a request to be run by [ProxyRequestHandler]. It is returned by [Rule] using [ProxyRequestHandler::RuleSolver].</p>",
"constructors": [
{
  "static": false,
  "name": "ProxyRequest",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "ProxyRequest",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::http::verb","name": "method","alias": "verb"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "host","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "port"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "target","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "http_version"}]
}
,{
  "static": false,
  "name": "ProxyRequest",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "boost::beast::http::verb","name": "method","alias": "verb"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "host","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","name": "target","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::ProxyRequest","alias": "ProxyRequest"},
  "static": false,
  "name": "with_ssl",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "ssl"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "host","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": false,"name": "port"}]
}
,
{
"type": "struct",
"name": "Rule",
"full_name": "::Crails::ProxyRequestHandler::Rule",
"inherits": [],
"module": "libcrails-proxy",
"include": "crails/request_parsers/proxy.hpp",
"doc": "docs/Crails/ProxyRequestHandler/Rule.html",
"excerpt": "<p>Defines a pattern to match in a URI, as well as a policy or function defining how matching HTTP requests shall be treated.</p>",
"constructors": [
{
  "static": false,
  "name": "Rule",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "regex","alias": "char"},{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "target","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::Mode","alias": "Mode"}]
}
,{
  "static": false,
  "name": "Rule",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "regex","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::RuleSolver","name": "solver","alias": "RuleSolver"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "uri","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::ProxyRequest","alias": "ProxyRequest"},
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","name": "source","alias": "HttpRequest"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::ProxyRequest","alias": "ProxyRequest"},
  "static": true,
  "name": "defaultSolver",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ProxyRequest","name": "base","alias": "ProxyRequest"},{"const": true,"ref": 1,"ptr": 0,"type": "::HttpRequest","name": "source","alias": "HttpRequest"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::smatch","alias": "smatch"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::regex","visibility": "public","static": false,"name": "matcher","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "::Mode","visibility": "public","static": false,"name": "mode","alias": "Mode"},{"const": false,"ref": 0,"ptr": 0,"type": "::RuleSolver","visibility": "public","static": false,"name": "solver","alias": "RuleSolver"}]
}
,
{
"type": "class",
"name": "Database",
"full_name": "::Crails::Redis::Database",
"inherits": ["Crails::class Databases::Database"],
"module": "libcrails-redis",
"include": "crails/redis/database.hpp",
"constructors": [
{
  "static": false,
  "name": "Database",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::any>","alias": "DatabaseSettings"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "ClassType",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "sw::redis::Transaction","alias": "Transaction"},
  "static": false,
  "name": "transaction",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "sw::redis::Redis","alias": "Redis"},
  "static": false,
  "name": "operator->",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "sw::redis::Redis","alias": "Redis"},
  "static": false,
  "name": "operator*",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "sw::redis::ConnectionOptions","visibility": "private","static": false,"name": "options","alias": "ConnectionOptions"},{"const": false,"ref": 0,"ptr": 0,"type": "std::optional<sw::redis::Redis>","visibility": "private","static": false,"name": "connection","alias": "optional<sw::redis::Redis>"}]
}
,
{
"type": "class",
"name": "SortedList",
"full_name": "::Crails::Redis::SortedList",
"inherits": [],
"module": "libcrails-redis",
"include": "crails/redis/list.hpp",
"template_params": [{"type": "typename","name": "VALUE_TYPE"},{"type": "typename","name": "HANDLE"}],
"constructors": [
{
  "static": false,
  "name": "SortedList<VALUE_TYPE, HANDLE>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::HANDLE","name": "connection","alias": "HANDLE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "key","alias": "string_view"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "insert",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::value_type","name": "value","alias": "value_type"}]
}
,{
  "static": false,
  "name": "emplace",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","name": "value","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "double","name": "score"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::optional<value_type>","alias": "optional<value_type>"},
  "static": false,
  "name": "pop_front",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::optional<value_type>","alias": "optional<value_type>"},
  "static": false,
  "name": "pop_back",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "CONTAINER"}],
  "const": true,
  "static": false,
  "name": "copy",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::CONTAINER","alias": "CONTAINER"},{"const": false,"ref": 0,"ptr": 0,"type": "long long"},{"const": false,"ref": 0,"ptr": 0,"type": "long long"}]
}
,{
  "template_params": [{"type": "typename","name": "CONTAINER"}],
  "const": true,
  "static": false,
  "name": "copy",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::CONTAINER","alias": "CONTAINER"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "count",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "double","name": "from"},{"const": false,"ref": 0,"ptr": 0,"type": "double","name": "to"},{"const": false,"ref": 0,"ptr": 0,"type": "sw::redis::BoundType","name": "bound_type","alias": "BoundType"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "count",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "key","alias": "string_view"},{"const": false,"ref": 1,"ptr": 0,"type": "::HANDLE","visibility": "private","static": false,"name": "connection","alias": "HANDLE"}]
}
,
{
"type": "class",
"name": "List",
"full_name": "::Crails::Redis::List",
"inherits": [],
"module": "libcrails-redis",
"include": "crails/redis/list.hpp",
"template_params": [{"type": "typename","name": "VALUE_TYPE"},{"type": "typename","name": "HANDLE"}],
"constructors": [
{
  "static": false,
  "name": "List<VALUE_TYPE, HANDLE>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::HANDLE","name": "connection","alias": "HANDLE"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "value","alias": "string_view"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "push_back",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","name": "value","alias": "VALUE_TYPE"}]
}
,{
  "static": false,
  "name": "push_front",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","name": "value","alias": "VALUE_TYPE"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},
  "static": false,
  "name": "pop_back",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},
  "static": false,
  "name": "pop_front",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},
  "const": true,
  "static": false,
  "name": "at",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "long long","name": "position"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "long long","name": "position"}]
}
,{
  "returns": {"const": true,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "size",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<VALUE_TYPE>","alias": "vector<VALUE_TYPE>"},
  "const": true,
  "static": false,
  "name": "to_vector",
  "visibility": "public",
  "params": []
}
,{
  "const": true,
  "static": false,
  "name": "append_to",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::vector<VALUE_TYPE>","name": "array","alias": "vector<VALUE_TYPE>"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","visibility": "private","static": false,"name": "key","alias": "string_view"},{"const": false,"ref": 1,"ptr": 0,"type": "::HANDLE","visibility": "private","static": false,"name": "connection","alias": "HANDLE"}]
}
,
{
"type": "class",
"name": "Connection",
"full_name": "::Crails::Redis::Connection",
"inherits": [],
"module": "libcrails-redis",
"include": "crails/redis/connection.hpp",
"constructors": [
{
  "static": false,
  "name": "Connection",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Connection",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "require",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "sw::redis::Redis","alias": "Redis"},
  "const": true,
  "static": false,
  "name": "operator->",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "sw::redis::Redis","alias": "Redis"},
  "const": true,
  "static": false,
  "name": "operator*",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "TYPE"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::List<TYPE, Connection>","alias": "List<TYPE, Connection>"},
  "static": false,
  "name": "make_list",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}]
}
,{
  "template_params": [{"type": "typename","name": "TYPE"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::SortedList<TYPE, Connection>","alias": "SortedList<TYPE, Connection>"},
  "static": false,
  "name": "make_sorted_list",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 1,"type": "::Database","visibility": "private","static": false,"name": "database","alias": "Database"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "database_name","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "default_configuration_name","alias": "string"}]
}
,
{
"type": "class",
"name": "Controller",
"full_name": "::Crails::Redis::Controller",
"inherits": ["SUPER"],
"module": "libcrails-redis",
"include": "crails/redis/controller.hpp",
"template_params": [{"type": "typename","name": "SUPER"},{"type": "typename","name": "DATABASE"}],
"constructors": [
{
  "static": false,
  "name": "Controller<SUPER, DATABASE>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::DATABASE","visibility": "protected","static": false,"name": "database","alias": "DATABASE"}]
}
,
{
"type": "class",
"name": "RenderFile",
"full_name": "::Crails::RenderFile",
"inherits": ["::Crails::RenderTarget"],
"module": "libcrails-renderer",
"include": "crails/render_file.hpp",
"doc": "docs/Crails/RenderFile.html",
"excerpt": "<p>A [RenderTarget] implementation that forward rendered content to a file.</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "open",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "path","alias": "string_view"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "set_body",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::size_t","name": "size","alias": "size_t"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::ofstream","visibility": "private","static": false,"name": "file","alias": "ofstream"}]
}
,
{
"type": "class",
"name": "RssTemplate",
"full_name": "::Crails::RssTemplate",
"inherits": ["::Crails::Template"],
"module": "libcrails-rss-views",
"include": "crails/rss_template.hpp",
"constructors": [
{
  "static": false,
  "name": "RssTemplate",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Renderer","name": "renderer","alias": "Renderer"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","name": "target","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "xml_header",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "encoding","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "title",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "link",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "description",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "description",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Yieldable","alias": "Yieldable"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "author",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "category",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "publication_date",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "last_build_date",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "enclosure",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","name": "length","alias": "size_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "mimetype","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "guid",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "guid",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned long long"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RssRenderer",
"full_name": "::Crails::RssRenderer",
"inherits": ["::Crails::Renderer"],
"module": "libcrails-rss-views",
"include": "crails/renderers/rss.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_name",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "get_mimetypes",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "render_template",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "view","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::RenderTarget","alias": "RenderTarget"},{"const": false,"ref": 1,"ptr": 0,"type": "::SharedVars","name": "vars","alias": "SharedVars"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "SeleniumServer",
"full_name": "::Crails::Tests::SeleniumServer",
"inherits": [],
"module": "libcrails-selenium",
"include": "crails/tests/selenium_server.hpp",
"constructors": [
{
  "static": false,
  "name": "SeleniumServer",
  "visibility": "private",
  "params": []
}
]
,
"methods": [
{
  "static": true,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "static": true,
  "name": "finalize",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SeleniumServer>","visibility": "private","static": true,"name": "instance","alias": "unique_ptr<SeleniumServer>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<boost::process::child>","visibility": "private","static": false,"name": "process","alias": "unique_ptr<boost::process::child>"}]
}
,
{
"type": "class",
"name": "SeleniumDriver",
"full_name": "::Crails::Tests::SeleniumDriver",
"inherits": [],
"module": "libcrails-selenium",
"include": "crails/tests/selenium.hpp",
"constructors": [
{
  "static": false,
  "name": "SeleniumDriver",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumDriver","alias": "SeleniumDriver"},
  "static": false,
  "name": "visit",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "url","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumDriver","alias": "SeleniumDriver"},
  "static": false,
  "name": "back",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumDriver","alias": "SeleniumDriver"},
  "static": false,
  "name": "forward",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumDriver","alias": "SeleniumDriver"},
  "static": false,
  "name": "refresh",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "webdriverxx::Element","alias": "Element"},
  "static": false,
  "name": "find",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "selector","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "expect",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "close",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "use_browser",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "static": false,
  "name": "set_max_wait_time",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","name": "wait_time"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "webdriverxx::WebDriver","alias": "WebDriver"},
  "static": false,
  "name": "get_driver",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "initialize_driver",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "private","static": true,"name": "default_max_wait_time"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "driver_initialized"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "private","static": false,"name": "max_wait_time"},{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<webdriverxx::WebDriver>","visibility": "private","static": false,"name": "driver","alias": "unique_ptr<webdriverxx::WebDriver>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "browser_name","alias": "string"}]
}
,
{
"type": "class",
"name": "SeleniumExpectation",
"full_name": "::Crails::Tests::SeleniumExpectation",
"inherits": [],
"module": "libcrails-selenium",
"include": "crails/tests/selenium.hpp",
"constructors": [
{
  "static": false,
  "name": "SeleniumExpectation",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumDriver","name": "driver","alias": "SeleniumDriver"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "to_have_element",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "selector","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "with_content",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "content","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "selected",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "not_selected",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "visible",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumExpectation","alias": "SeleniumExpectation"},
  "static": false,
  "name": "not_visible",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::SeleniumDriver","visibility": "private","static": false,"name": "driver","alias": "SeleniumDriver"},{"const": false,"ref": 0,"ptr": 0,"type": "webdriverxx::Element","visibility": "private","static": false,"name": "element","alias": "Element"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "selector","alias": "string"}]
}
,
{
"type": "class",
"name": "BackgroundServer",
"full_name": "::Crails::Tests::BackgroundServer",
"inherits": [],
"module": "libcrails-selenium",
"include": "crails/tests/background_server.hpp",
"constructors": [
]
,
"methods": [
{
  "static": true,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "static": true,
  "name": "finalize",
  "visibility": "public",
  "params": []
}
,{
  "static": true,
  "name": "start_server",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::pid_t","visibility": "private","static": true,"name": "pid","alias": "pid_t"}]
}
,
{
"type": "struct",
"name": "ExpectationFailed",
"full_name": "::Crails::Tests::ExpectationFailed",
"inherits": [],
"module": "libcrails-tests",
"include": "crails/tests/helper.hpp",
"constructors": [
{
  "static": false,
  "name": "ExpectationFailed",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "expectation_text","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "file_reference","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "obtained","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "expected","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "expectation_text","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "file_reference","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "expected","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "obtained","alias": "string"}]
}
,
{
"type": "struct",
"name": "Helper",
"full_name": "::Crails::Tests::Helper",
"inherits": [],
"module": "libcrails-tests",
"include": "crails/tests/helper.hpp",
"constructors": [
{
  "static": false,
  "name": "Helper",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "run",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "run_test",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Group","alias": "Group"},{"const": false,"ref": 0,"ptr": 0,"type": "::Test","alias": "Test"}]
}
,{
  "static": false,
  "name": "run_protected_test",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Group","alias": "Group"},{"const": false,"ref": 0,"ptr": 0,"type": "::Test","alias": "Test"}]
}
,{
  "static": false,
  "name": "after_test",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Group","alias": "Group"}]
}
,{
  "static": false,
  "name": "display_test_results",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Test","alias": "Test"}]
}
,{
  "static": false,
  "name": "before",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "after",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "describe",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "block","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "xit",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "description","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "block","alias": "function<void ()>"}]
}
,{
  "static": false,
  "name": "it",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "description","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "block","alias": "function<void ()>"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Groups","visibility": "private","static": false,"name": "groups","alias": "Groups"},{"const": false,"ref": 0,"ptr": 0,"type": "::Group","visibility": "private","static": false,"name": "current_group","alias": "Group"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","visibility": "private","static": false,"name": "before_all","alias": "function<void ()>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","visibility": "private","static": false,"name": "after_all","alias": "function<void ()>"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "current_test_result"},{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "public","static": false,"name": "current_test_output","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "public","static": false,"name": "current_test_stdout","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": false,"name": "passed_count"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": false,"name": "failed_count"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": false,"name": "pending_count"}]
}
,
{
"type": "struct",
"name": "SeleniumHelper",
"full_name": "::Crails::Tests::SeleniumHelper",
"inherits": ["::Crails::Tests::Helper"],
"module": "libcrails-selenium",
"include": "crails/tests/selenium_helper.hpp",
"constructors": [
{
  "static": false,
  "name": "SeleniumHelper",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<SeleniumDriver>","visibility": "public","static": false,"name": "page","alias": "unique_ptr<SeleniumDriver>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "browser","alias": "string"}]
}
,
{
"type": "class",
"name": "SentrySettings",
"full_name": "::Crails::SentrySettings",
"inherits": [],
"module": "libcrails-sentry",
"include": "crails/sentry.hpp",
"constructors": [
]
,
"methods": [
{
  "static": false,
  "name": "key",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "secret",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "version",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "project_id",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "server_url",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
,{
  "static": false,
  "name": "server_protocol",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"}]
}
,
{
"type": "class",
"name": "Sentry",
"full_name": "::Crails::Sentry",
"inherits": [],
"module": "libcrails-sentry",
"include": "crails/sentry.hpp",
"constructors": [
{
  "static": false,
  "name": "Sentry",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": true,
  "name": "capture_exception",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::exception","alias": "exception"}]
}
,{
  "static": true,
  "name": "set_message_context",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}]
}
,{
  "static": true,
  "name": "set_message_request",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "message","alias": "Data"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
,{
  "static": true,
  "name": "initialize_exception_message",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "message","alias": "Data"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::exception","alias": "exception"}]
}
,{
  "static": true,
  "name": "initialize_backtrace",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::backtrace","alias": "backtrace"}]
}
,{
  "static": true,
  "name": "send_message",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "sentry_auth_header",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "get_endpoint",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "sentry_key","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "sentry_secret","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "sentry_version","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "project_id","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "server_url","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": true,"name": "server_protocol","alias": "string"}]
}
,
{
"type": "class",
"name": "SideTaskDatabase",
"full_name": "::Sidekix::SideTaskDatabase",
"inherits": [],
"module": "libcrails-sidekix",
"include": "crails/sidekix/database.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "pending_tasks",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "take",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "id","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "params","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "pop",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "params","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "schedule",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "schedule",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "timestamp","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::SideTaskDatabase","alias": "SideTaskDatabase"},
  "static": true,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::SideTaskDatabase","alias": "SideTaskDatabase"},
  "static": true,
  "name": "instance",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "FileDatabase",
"full_name": "::Sidekix::FileDatabase",
"inherits": ["::Sidekix::SideTaskDatabase"],
"module": "libcrails-sidekix",
"include": "crails/sidekix/file_database.hpp",
"constructors": [
{
  "static": false,
  "name": "FileDatabase",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","name": "storage_path","alias": "path"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "should_run_after",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "timestamp","alias": "time_t"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "pending_tasks",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "take",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "id","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "task_data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "pop",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "task_data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "schedule",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::filesystem::path","visibility": "private","static": false,"name": "storage_path","alias": "path"}]
}
,
{
"type": "class",
"name": "Database",
"full_name": "::Sidekix::Tests::Database",
"inherits": ["::Sidekix::SideTaskDatabase"],
"module": "libcrails-sidekix",
"include": "crails/sidekix/test_database.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "pending_tasks",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "take",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "id","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "task_data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "pop",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "task_data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "schedule",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
,{
  "const": true,
  "static": false,
  "name": "each_task",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (const std::string &, const DataTree &)>","name": "callback","alias": "function<void (const std::string &, const DataTree &)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "count",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "has_task",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "scheduled_at",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "timestamp","alias": "time_t"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::vector<DataTree>>","visibility": "private","static": false,"name": "tasks","alias": "map<std::string, std::vector<DataTree>>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","visibility": "public","static": false,"name": "current_timestamp","alias": "time_t"}]
}
,
{
"type": "class",
"name": "SidetaskLogger",
"full_name": "::Sidekix::SidetaskLogger",
"inherits": [],
"module": "libcrails-sidekix",
"include": "crails/sidekix/logger.hpp",
"constructors": [
{
  "static": false,
  "name": "SidetaskLogger",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "read_logs",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","name": "path","alias": "path"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SidetaskLogger","alias": "SidetaskLogger"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::Logger::Symbol","name": "symbol","alias": "Symbol"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::Sidekix::SidetaskLogger"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::SidetaskLogger","alias": "SidetaskLogger"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
  "static": false,
  "name": "get_output_stream",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "exit_status",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "value"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "output","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "private","static": false,"name": "stream","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 0,"type": "int","visibility": "private","static": false,"name": "status"}]
}
,
{
"type": "class",
"name": "RedisDatabase",
"full_name": "::Sidekix::RedisDatabase",
"inherits": ["::Sidekix::SideTaskDatabase"],
"module": "libcrails-sidekix",
"include": "crails/sidekix/redis_database.hpp",
"constructors": [
{
  "static": false,
  "name": "RedisDatabase",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "database","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "pending_tasks",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "take",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "task_data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "pop",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","name": "task_data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "schedule",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "schedule",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "timestamp","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "params","alias": "Data"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::Redis::Connection","visibility": "private","static": false,"name": "connection","alias": "Connection"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "storage_key","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::List","visibility": "private","static": false,"name": "task_list","alias": "List"}]
}
,
{
"type": "class",
"name": "Process",
"full_name": "::Sidekix::Process",
"inherits": [],
"module": "libcrails-sidekix",
"include": "crails/sidekix/process.hpp",
"constructors": [
{
  "static": false,
  "name": "Process",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "argc"},{"const": true,"ref": 0,"ptr": 2,"type": "::char","name": "argv","alias": "char"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "watch",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","name": "command","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "sidekix_bin",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "transform_logpath",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<boost::process::child>","visibility": "private","static": false,"name": "process","alias": "unique_ptr<boost::process::child>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::unique_ptr<std::thread>","visibility": "private","static": false,"name": "watcher","alias": "unique_ptr<std::thread>"},{"const": false,"ref": 0,"ptr": 0,"type": "boost::process::detail::api::pid_t","visibility": "private","static": false,"name": "pid","alias": "pid_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::atomic_bool","visibility": "private","static": false,"name": "auto_restart","alias": "atomic_bool"},{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "private","static": false,"name": "mutex","alias": "mutex"}]
}
,
{
"type": "class",
"name": "AuthController",
"full_name": "::Crails::AuthController",
"inherits": ["SUPER"],
"module": "libcrails-signin",
"include": "crails/signin/auth_controller.hpp",
"template_params": [{"type": "typename","name": "USER"},{"type": "typename","name": "SUPER"}],
"doc": "docs/Crails/AuthController.html",
"excerpt": "<p>Controller component for access-protected content, where the access is granted to users that have an opened [Session]. The <code>USER</code> model should implement the [AuthenticableModel] component.</p>",
"constructors": [
{
  "static": false,
  "name": "AuthController<USER, SUPER>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "initialize",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "require_authentified_user",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
"doc": "docs/Crails/AuthController/on_user_not_authenticated.html",
  "static": false,
  "name": "on_user_not_authenticated",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "initialize_required_user",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"doc": "docs/Crails/AuthController/initialize_current_user.html",
  "static": false,
  "name": "initialize_current_user",
  "visibility": "protected",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Session<USER>","visibility": "protected","static": false,"name": "user_session","alias": "Session<USER>"}]
}
,
{
"type": "class",
"name": "AuthenticableModel",
"full_name": "::Crails::AuthenticableModel",
"inherits": [],
"module": "libcrails-signin",
"include": "crails/signin/model.hpp",
"doc": "docs/Crails/AuthenticableModel.html",
"excerpt": "<p>Model component for authenticable users. Models including this component can be used with [Session], [SessionController] and [AuthController].</p>",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_authentication_token",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},
  "const": true,
  "static": false,
  "name": "get_sign_in_at",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_authentication_token",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "v","alias": "string"}]
}
,{
  "static": false,
  "name": "set_sign_in_at",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","name": "v","alias": "time_t"}]
}
,{
  "static": false,
  "name": "generate_authentication_token",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},
  "const": true,
  "static": false,
  "name": "get_token_expires_in",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::time_t","visibility": "public","static": true,"name": "session_duration","alias": "time_t"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "authentication_token","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","visibility": "private","static": false,"name": "sign_in_at","alias": "time_t"}]
}
,
{
"type": "class",
"name": "SessionController",
"full_name": "::Crails::SessionController",
"inherits": ["SUPER"],
"module": "libcrails-signin",
"include": "crails/signin/session_controller.hpp",
"template_params": [{"type": "typename","name": "USER"},{"type": "typename","name": "SUPER"}],
"constructors": [
{
  "static": false,
  "name": "SessionController<USER, SUPER>",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "static": false,
  "name": "on_session_created",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "on_session_destroyed",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "on_session_not_created",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "show",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "create",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::UserPtr","alias": "UserPtr"},
  "virtual": 2,
  "static": false,
  "name": "find_user",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Session<USER>","visibility": "private","static": false,"name": "user_session","alias": "Session<USER>"}]
}
,
{
"type": "struct",
"name": "Password",
"full_name": "::Crails::Password",
"inherits": ["std::string"],
"module": "libcrails-signin",
"include": "crails/signin/password.hpp",
"doc": "docs/Crails/Password.html",
"excerpt": "<p>Helper class to store and check encrypted passwords. It extends [std::string], but encrypts any content assigned to it using <code>operator=</code>.</p>",
"constructors": [
{
  "static": false,
  "name": "Password",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Password",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Password","name": "str","alias": "Password"}]
}
,{
  "static": false,
  "name": "Password",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
,{
  "static": false,
  "name": "Password",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Password","alias": "Password"},
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Password","alias": "Password"},
  "static": false,
  "name": "operator=",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Password","name": "str","alias": "Password"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Password","name": "str","alias": "Password"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "operator==",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "str","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "encrypt",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "md5",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": true,
  "name": "aes",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": true,"name": "encrypt_key","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "protected","static": true,"name": "encrypt_salt","alias": "string"}]
}
,
{
"type": "class",
"name": "Scp",
"full_name": "::Crails::Ssh::Scp",
"inherits": [],
"module": "libcrails-ssh",
"include": "crails/ssh/scp.hpp",
"constructors": [
{
  "static": false,
  "name": "Scp",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ssh_session","name": "session_handle","alias": "ssh_session"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ScpMode","name": "mode","alias": "ScpMode"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "open",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "close",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "push_directory",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "mode"}]
}
,{
  "static": false,
  "name": "push_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "source","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "target","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "mode"}]
}
,{
  "static": false,
  "name": "push_text",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "text","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "target","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "mode"}]
}
,{
  "static": false,
  "name": "pull_file",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}]
}
,{
  "static": false,
  "name": "pull_file",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "target","alias": "string"}]
}
,{
  "static": false,
  "name": "require_opened_session",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ssh_scp","visibility": "private","static": false,"name": "handle","alias": "ssh_scp"},{"const": false,"ref": 0,"ptr": 0,"type": "::ssh_session","visibility": "private","static": false,"name": "session_handle","alias": "ssh_session"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "is_open"}]
}
,
{
"type": "class",
"name": "Session",
"full_name": "::Crails::Ssh::Session",
"inherits": [],
"module": "libcrails-ssh",
"include": "crails/ssh/session.hpp",
"constructors": [
{
  "static": false,
  "name": "Session",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "should_accept_unknown_hosts",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "val"}]
}
,{
  "static": false,
  "name": "connect",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "user","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "ip","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "port","alias": "string"}]
}
,{
  "static": false,
  "name": "authentify_with_password",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"}]
}
,{
  "static": false,
  "name": "authentify_with_pubkey",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Channel>","alias": "shared_ptr<Channel>"},
  "static": false,
  "name": "make_channel",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "read_timeout"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::shared_ptr<Scp>","alias": "shared_ptr<Scp>"},
  "static": false,
  "name": "make_scp_session",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "path","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ScpMode","name": "mode","alias": "ScpMode"}]
}
,{
  "static": false,
  "name": "raise",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
,{
  "template_params": [{"type": "typename","name": "STREAM"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "exec",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::STREAM","alias": "STREAM"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}]
}
,{
  "template_params": [{"type": "typename","name": "STREAM"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "exec",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::STREAM","alias": "STREAM"},{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::milliseconds","alias": "milliseconds"}]
}
,{
  "static": false,
  "name": "set_verbosity",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "value"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "static": false,
  "name": "get_error",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::ssh_session","visibility": "private","static": false,"name": "handle","alias": "ssh_session"},{"const": false,"ref": 0,"ptr": 0,"type": "int","visibility": "private","static": false,"name": "vbs"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "accepts_unknown_hosts"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "is_open"}]
}
,
{
"type": "class",
"name": "Channel",
"full_name": "::Crails::Ssh::Channel",
"inherits": [],
"module": "libcrails-ssh",
"include": "crails/ssh/channel.hpp",
"constructors": [
]
,
"methods": [
{
  "template_params": [{"type": "typename","name": "STREAM"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "exec",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::STREAM","alias": "STREAM"}]
}
,{
  "template_params": [{"type": "typename","name": "STREAM_A"},{"type": "typename","name": "STREAM_B"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "exec",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::STREAM_A","alias": "STREAM_A"},{"const": false,"ref": 1,"ptr": 0,"type": "::STREAM_B","alias": "STREAM_B"}]
}
,{
  "static": false,
  "name": "set_timeout_duration",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "value"}]
}
,{
  "static": false,
  "name": "set_timeout_duration",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::milliseconds","name": "duration","alias": "milliseconds"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "exec",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "command","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (char)>","name": "output","alias": "function<void (char)>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "poll",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::char","name": "buffer","alias": "char"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "static": false,
  "name": "poll",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 1,"type": "::char","name": "buffer","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "::InputType","name": "type","alias": "InputType"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::ssh_channel","visibility": "private","static": false,"name": "handle","alias": "ssh_channel"},{"const": false,"ref": 0,"ptr": 0,"type": "int","visibility": "private","static": false,"name": "timeout_ms"},{"const": false,"ref": 0,"ptr": 0,"type": "::InputType","visibility": "private","static": false,"name": "currently_reading","alias": "InputType"}]
}
,
{
"type": "class",
"name": "Channel",
"full_name": "::Crails::Sync::Channel",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/channel.hpp",
"constructors": [
{
  "static": false,
  "name": "Channel",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::mutex","alias": "mutex"},
  "static": false,
  "name": "mutex",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "add_listener",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Listener","name": "listener","alias": "Listener"}]
}
,{
  "static": false,
  "name": "remove_listener",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Listener","name": "listener","alias": "Listener"}]
}
,{
  "static": false,
  "name": "broadcast",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
,{
  "static": false,
  "name": "set_password",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::ClientMode","name": "mode","alias": "ClientMode"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "can_read",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "can_write",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "password","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::size_t","alias": "size_t"},
  "const": true,
  "static": false,
  "name": "count",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "private","static": false,"name": "object_mutex","alias": "mutex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::list<std::shared_ptr<Listener>>","visibility": "private","static": false,"name": "listeners","alias": "list<std::shared_ptr<Listener>>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "read_password","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "write_password","alias": "string"}]
}
,
{
"type": "struct",
"name": "ChannelHandle",
"full_name": "::Crails::Sync::ChannelHandle",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/channel.hpp",
"constructors": [
{
  "static": false,
  "name": "ChannelHandle",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Channel","name": "channel","alias": "Channel"}]
}
,{
  "static": false,
  "name": "ChannelHandle",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ChannelHandle","name": "copy","alias": "ChannelHandle"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::Channel","alias": "Channel"},
  "static": false,
  "name": "operator->",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 1,"ptr": 0,"type": "::Channel","visibility": "private","static": false,"name": "channel","alias": "Channel"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "owner"}]
}
,
{
"type": "struct",
"name": "IUpdate",
"full_name": "::Crails::Sync::IUpdate",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/transaction.hpp",
"constructors": [
]
,
"methods": [
{
  "virtual": 2,
  "static": false,
  "name": "render",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "scope",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 2,
  "const": true,
  "static": false,
  "name": "uid",
  "visibility": "public",
  "params": []
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Update",
"full_name": "::Crails::Sync::Update",
"inherits": ["::Crails::Sync::IUpdate"],
"module": "libcrails-sync",
"include": "crails/sync/transaction.hpp",
"template_params": [{"type": "typename","name": "T"}],
"constructors": [
]
,
"methods": [
{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "scope",
  "visibility": "private",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "uid",
  "visibility": "private",
  "params": []
}
,{
  "virtual": 1,
  "static": false,
  "name": "render",
  "visibility": "private",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::T","visibility": "private","static": false,"name": "object","alias": "T"}]
}
,
{
"type": "class",
"name": "Transaction",
"full_name": "::Crails::Sync::Transaction",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/transaction.hpp",
"constructors": [
]
,
"methods": [
{
  "static": false,
  "name": "set_channel",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Channel","name": "value","alias": "Channel"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 1,"type": "::Channel","alias": "Channel"},
  "const": true,
  "static": false,
  "name": "get_channel",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Transaction","alias": "Transaction"},
  "static": true,
  "name": "get",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "is_enabled",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "commit",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "rollback",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "MODEL"}],
  "static": false,
  "name": "save",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::MODEL","alias": "MODEL"}]
}
,{
  "template_params": [{"type": "typename","name": "MODEL"}],
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::MODEL","alias": "MODEL"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (DataTree &)>","visibility": "public","static": true,"name": "on_commit","alias": "function<void (DataTree &)>"},{"const": false,"ref": 0,"ptr": 1,"type": "::Channel","visibility": "private","static": false,"name": "channel","alias": "Channel"},{"const": false,"ref": 0,"ptr": 0,"type": "::UpdateList","visibility": "private","static": false,"name": "updates","alias": "UpdateList"},{"const": false,"ref": 0,"ptr": 0,"type": "::UpdateList","visibility": "private","static": false,"name": "removals","alias": "UpdateList"}]
}
,
{
"type": "class",
"name": "Connection",
"full_name": "::Crails::Odb::Sync::Connection",
"inherits": ["Odb::Connection"],
"module": "libcrails-sync",
"include": "crails/odb/sync_connection.hpp",
"constructors": [
{
  "static": false,
  "name": "Connection",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "commit",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "rollback",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "MODEL"}],
  "static": false,
  "name": "save",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::MODEL","alias": "MODEL"}]
}
,{
  "template_params": [{"type": "typename","name": "MODEL"}],
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::MODEL","alias": "MODEL"}]
}
,{
  "template_params": [{"type": "typename","name": "MODEL"}],
  "static": false,
  "name": "destroy",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "odb::query<MODEL>","alias": "query<MODEL>"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": false,"name": "use_sync_transaction"},{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Sync::Transaction","visibility": "public","static": false,"name": "sync_transaction","alias": "Transaction"}]
}
,
{
"type": "class",
"name": "ConnectionHandle",
"full_name": "::Crails::Odb::Sync::ConnectionHandle",
"inherits": ["::Crails::Odb::Sync::Connection"],
"module": "libcrails-sync",
"include": "crails/odb/sync_connection.hpp",
"constructors": [
{
  "static": false,
  "name": "ConnectionHandle",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Channels",
"full_name": "::Crails::Sync::Channels",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/channels.hpp",
"constructors": [
]
,
"methods": [
{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Channel","alias": "Channel"},
  "static": false,
  "name": "require_unlocked_channel",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::ChannelHandle","alias": "ChannelHandle"},
  "static": false,
  "name": "require_channel",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
,{
  "static": false,
  "name": "broadcast",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
,{
  "static": false,
  "name": "cleanup",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "cleanup",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "key","alias": "string"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::char *const","visibility": "private","static": true,"name": "_singleton_typename","alias": "char *const"},{"const": false,"ref": 0,"ptr": 0,"type": "std::mutex","visibility": "private","static": false,"name": "channels_mutex","alias": "mutex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, Channel *>","visibility": "private","static": false,"name": "channels","alias": "map<std::string, Channel *>"}]
}
,
{
"type": "class",
"name": "ChannelListener",
"full_name": "::Crails::Sync::ChannelListener",
"inherits": ["::Crails::WebSocket"],
"module": "libcrails-sync",
"include": "crails/sync/channel_client.hpp",
"constructors": [
{
  "static": false,
  "name": "ChannelListener",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "channel_name","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "acceptable",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 1,"ptr": 0,"type": "::ChannelHandle","name": "channel","alias": "ChannelHandle"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::ChannelHandle","alias": "ChannelHandle"},
  "const": true,
  "static": false,
  "name": "channel",
  "visibility": "public",
  "params": []
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "disconnected",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "channel_name","alias": "string"}]
}
,
{
"type": "class",
"name": "ChannelClient",
"full_name": "::Crails::Sync::ChannelClient",
"inherits": ["::Crails::Sync::ChannelListener"],
"module": "libcrails-sync",
"include": "crails/sync/channel_client.hpp",
"constructors": [
{
  "static": false,
  "name": "ChannelClient",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "channel_name","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "acceptable",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 1,"ptr": 0,"type": "::ChannelHandle","name": "channel","alias": "ChannelHandle"}]
}
,{
  "virtual": 1,
  "static": false,
  "name": "received",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::MessageType","name": "type","alias": "MessageType"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "ChannelRoute",
"full_name": "::Crails::Sync::ChannelRoute",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/channel_actions.hpp",
"template_params": [{"type": "typename","name": "WEBSOCKET","default": "::Crails::Sync::ChannelListener"}],
"constructors": [
]
,
"methods": [
{
  "static": true,
  "name": "trigger",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "BroadcastRoute",
"full_name": "::Crails::Sync::BroadcastRoute",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/channel_actions.hpp",
"constructors": [
]
,
"methods": [
{
  "static": true,
  "name": "trigger",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void ()>","name": "callback","alias": "function<void ()>"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": true,
  "name": "try_to_broadcast",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"},{"const": false,"ref": 0,"ptr": 1,"type": "::Channels","name": "channels","alias": "Channels"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "channel_name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string_view","name": "body","alias": "string_view"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "Task",
"full_name": "::Crails::Sync::Task",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/task.hpp",
"constructors": [
{
  "static": false,
  "name": "Task",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "task_count"}]
}
,{
  "static": false,
  "name": "Task",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "scope","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "task_count"}]
}
,{
  "static": false,
  "name": "Task",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "scope","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "task_count"}]
}
,{
  "static": false,
  "name": "Task",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Task","alias": "Task"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "uri",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_scope",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "get_id",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "is_mute",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "set_mute",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "value"}]
}
,{
  "static": false,
  "name": "set_task_count",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}]
}
,{
  "static": false,
  "name": "set_notification_step",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "value"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"},
  "const": true,
  "static": false,
  "name": "notification_step",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "increment",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "progress"}]
}
,{
  "static": false,
  "name": "notify",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "notify",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "scope","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "private","static": false,"name": "id","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "last_notification"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "task_progress"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "task_count"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","visibility": "private","static": false,"name": "notification_step_perc"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "private","static": false,"name": "mute"},{"const": false,"ref": 0,"ptr": 0,"type": "::DataTree","visibility": "public","static": false,"name": "metadata","alias": "DataTree"}]
}
,
{
"type": "struct",
"name": "Settings",
"full_name": "::Crails::Sync::Task::Settings",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/task.hpp",
"constructors": [
]
,
"methods": [
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": true,"name": "hostname","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short","visibility": "public","static": true,"name": "port"},{"const": false,"ref": 0,"ptr": 0,"type": "bool","visibility": "public","static": true,"name": "ssl"}]
}
,
{
"type": "class",
"name": "Stream",
"full_name": "::Crails::Sync::Stream",
"inherits": [],
"module": "libcrails-sync",
"include": "crails/sync/stream.hpp",
"constructors": [
{
  "static": false,
  "name": "Stream",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Sync::Task","name": "task","alias": "Task"}]
}
,{
  "static": false,
  "name": "Stream",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "output","alias": "ostream"}]
}
,{
  "static": false,
  "name": "Stream",
  "visibility": "public",
  "params": []
}
]
,
"methods": [
{
  "static": false,
  "name": "add_output",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Sync::Task","name": "value","alias": "Task"}]
}
,{
  "static": false,
  "name": "add_output",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","name": "value","alias": "ostream"}]
}
,{
  "template_params": [{"type": "typename","name": "T","default": "::Crails::Sync::Stream"}],
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Stream","alias": "Stream"},
  "static": false,
  "name": "operator<<",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::T","alias": "T"}]
}
,{
  "returns": {"const": false,"ref": 1,"ptr": 0,"type": "::Stream","alias": "Stream"},
  "static": false,
  "name": "put",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","name": "c","alias": "char"}]
}
,{
  "static": false,
  "name": "on_new_line",
  "visibility": "private",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::stringstream","visibility": "private","static": false,"name": "stream","alias": "stringstream"},{"const": false,"ref": 0,"ptr": 1,"type": "::Crails::Sync::Task","visibility": "public","static": false,"name": "task","alias": "Task"},{"const": false,"ref": 0,"ptr": 1,"type": "std::ostream","visibility": "public","static": false,"name": "output","alias": "ostream"}]
}
,
{
"type": "struct",
"name": "Runner",
"full_name": "::Crails::Tests::Runner",
"inherits": [],
"module": "libcrails-tests",
"include": "crails/tests/runner.hpp",
"constructors": [
]
,
"methods": [
{
  "static": false,
  "name": "setup",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "shutdown",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "static": false,
  "name": "execute",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::list<std::shared_ptr<Helper>>","visibility": "private","static": false,"name": "helpers","alias": "list<std::shared_ptr<Helper>>"}]
}
,
{
"type": "class",
"name": "RequestUrlParser",
"full_name": "::Crails::RequestUrlParser",
"inherits": ["::Crails::RequestParser"],
"module": "libcrails-url-parser",
"include": "crails/request_parsers/url_parser.hpp",
"doc": "docs/Crails/RequestUrlParser.html",
"excerpt": "<p>Implementation of the [RequestParser] interface which loads variables from URL parameters found in the [HttpRequest] included in the provided [Context].</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestXmlParser",
"full_name": "::Crails::RequestXmlParser",
"inherits": ["::Crails::BodyParser"],
"module": "libcrails-xml-parser",
"include": "crails/request_parsers/xml_parser.hpp",
"doc": "docs/Crails/RequestXmlParser.html",
"excerpt": "<p>Implementation of the [RequestParser] interface that parses a body provided with the <code>application/xml</code> or <code>text/xml</code> format, and stores it in the [Params] object.</p>",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "RequestYamlParser",
"full_name": "::Crails::RequestYamlParser",
"inherits": ["::Crails::BodyParser"],
"module": "libcrails-yaml-parser",
"include": "crails/request_parsers/yaml_parser.hpp",
"constructors": [
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "operator()",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<void (RequestParser::Status)>","alias": "function<void (RequestParser::Status)>"}]
}
,{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "body_received",
  "visibility": "private",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Context","alias": "Context"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "body","alias": "string"}]
}
]
,
"fields":[]
}
,
{
"type": "class",
"name": "CastMethod",
"full_name": "::XmlRpc::CastMethod",
"inherits": [],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/variable.hpp",
"template_params": [{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"},{"type": "typename","name": "T"}],
"constructors": [
]
,
"methods": [
]
,
"fields":[]
}
,
{
"type": "struct",
"name": "Variable",
"full_name": "::XmlRpc::Variable",
"inherits": [],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/variable.hpp",
"doc": "docs/XmlRpc/Variable.html",
"excerpt": "<p>The [Variable] class represents any parameter or return value in the <a href=\"https://en.wikipedia.org/wiki/XML-RPC\">XML-RPC</a> protocol, and gives you tools to easily convert them to native C++ types, or to directly interact with them.</p>",
"constructors": [
{
  "static": false,
  "name": "Variable",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Variable",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "number"}]
}
,{
  "static": false,
  "name": "Variable",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "double","name": "number"}]
}
,{
  "static": false,
  "name": "Variable",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "bool","name": "boolean"}]
}
,{
  "static": false,
  "name": "Variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "str","alias": "string"}]
}
]
,
"methods": [
{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Variable","alias": "Variable"},
  "static": true,
  "name": "from_data",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::Data","name": "data_value","alias": "Data"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Variable","alias": "Variable"},
  "static": true,
  "name": "from_date",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "static": false,
  "name": "Variable",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Variable","alias": "Variable"},
  "const": true,
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","name": "name","alias": "char"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Variable","alias": "Variable"},
  "const": true,
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "name","alias": "string"}]
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "::Variable","alias": "Variable"},
  "const": true,
  "static": false,
  "name": "operator[]",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int","name": "i"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "is_nil",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "const": true,
  "static": false,
  "name": "as_int",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "double"},
  "const": true,
  "static": false,
  "name": "as_double",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "as_boolean",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
  "const": true,
  "static": false,
  "name": "as_string",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},
  "const": true,
  "static": false,
  "name": "as_date",
  "visibility": "public",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"},
  "const": true,
  "static": false,
  "name": "as_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::typename CastMethod<T>:Type","alias": "typename CastMethod<T>:Type"}]
}
,{
  "template_params": [{"type": "typename","name": "T"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::vector<T>","alias": "vector<T>"},
  "const": true,
  "static": false,
  "name": "as_array",
  "visibility": "public",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "::typename CastMethod<T>:TypeRef","alias": "typename CastMethod<T>:TypeRef"}]
}
,{
  "const": true,
  "static": false,
  "name": "to_xml",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::stringstream","alias": "stringstream"}]
}
,{
  "const": true,
  "static": false,
  "name": "validate_type_or_raise",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "type","alias": "string"}]
}
,{
  "static": false,
  "name": "from_struct",
  "visibility": "private",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
,{
  "static": false,
  "name": "from_array",
  "visibility": "private",
  "params": [{"const": true,"ref": 0,"ptr": 0,"type": "::Data","name": "data","alias": "Data"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "name","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::string","visibility": "public","static": false,"name": "value","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, Variable>","visibility": "public","static": false,"name": "members","alias": "map<std::string, Variable>"},{"const": false,"ref": 0,"ptr": 0,"type": "std::list<Variable>","visibility": "public","static": false,"name": "array","alias": "list<Variable>"}]
}
,
{
"type": "class",
"name": "Controller",
"full_name": "::XmlRpc::Controller",
"inherits": ["Crails::Controller"],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/controller.hpp",
"doc": "docs/XmlRpc/Controller.html",
"excerpt": "<p>The [XmlRpc::Controller] class allows you to implement an <a href=\"https://en.wikipedia.org/wiki/XML-RPC\">XML-RPC</a> endpoint that integrates within a Crails server and its [Crails::Router]. The functions you want to expose using the XML-RPC protocol a...</p>",
"constructors": [
{
  "static": false,
  "name": "Controller",
  "visibility": "public",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Context","name": "context","alias": "Context"}]
}
]
,
"methods": [
{
  "static": false,
  "name": "endpoint",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "must_protect_from_forgery",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "respond_with",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::XmlRpc::Variable","alias": "Variable"}]
}
,{
  "static": false,
  "name": "respond_with_fault",
  "visibility": "protected",
  "params": [{"const": false,"ref": 0,"ptr": 0,"type": "int","name": "code"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "message","alias": "string"}]
}
,{
  "static": false,
  "name": "raise_unknown_method",
  "visibility": "protected",
  "params": []
}
,{
  "template_params": [{"type": "typename","name": "KLASS"},{"type": "typename","name": "Args"}],
  "static": false,
  "name": "register_method",
  "visibility": "protected",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "void (KLASS::*)(Args...)","alias": "*)(Args...)"}]
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "std::vector<std::unique_ptr<IMethod>>","visibility": "protected","static": false,"name": "methods","alias": "vector<std::unique_ptr<IMethod>>"}]
}
,
{
"type": "class",
"name": "Struct",
"full_name": "::XmlRpc::Struct",
"inherits": [],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/struct.hpp",
"doc": "docs/XmlRpc/Struct.html",
"excerpt": "<p>The struct class helps you interact, send and receive <code>&lt;struct&gt;</code> elements from the XML-RPC protocol.</p>",
"constructors": [
{
  "static": false,
  "name": "Struct",
  "visibility": "public",
  "params": []
}
,{
  "static": false,
  "name": "Struct",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Variable","name": "variable","alias": "Variable"}]
}
]
,
"methods": [
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::Variable","visibility": "protected","static": false,"name": "data","alias": "Variable"}]
}
,
{
"type": "class",
"name": "Client",
"full_name": "::XmlRpc::Client",
"inherits": [],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/client.hpp",
"doc": "docs/XmlRpc/Client.html",
"excerpt": "<p>The [XmlRpc::Client] class allows you to call a remote function using the <a href=\"https://en.wikipedia.org/wiki/XML-RPC\">XML-RPC</a> protocol using C++ semantics.</p>",
"constructors": [
{
  "static": false,
  "name": "Client",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","name": "endpoint","alias": "string"}]
}
]
,
"methods": [
{
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "decorate_request",
  "visibility": "protected",
  "params": [{"const": false,"ref": 1,"ptr": 0,"type": "::Crails::Tests::Request","name": "request","alias": "Request"}]
}
,{
  "template_params": [{"type": "typename","name": "Args","default": "::XmlRpc::Variable"}],
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::Variable","alias": "Variable"},
  "static": false,
  "name": "call",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
  "const": true,
  "static": false,
  "name": "is_faulty_response",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::DataTree","name": "data","alias": "DataTree"}]
}
,{
  "const": true,
  "static": false,
  "name": "raise_xmlrpc_fault",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::DataTree","name": "data","alias": "DataTree"}]
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "::XmlRpc::Variable","alias": "Variable"},
  "const": true,
  "static": false,
  "name": "get_response_variable",
  "visibility": "private",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::DataTree","name": "data","alias": "DataTree"}]
}
]
,
"fields":[{"const": true,"ref": 0,"ptr": 0,"type": "::Crails::Url","visibility": "protected","static": false,"name": "endpoint","alias": "Url"},{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::Ssl::Client","visibility": "protected","static": false,"name": "client","alias": "Client"}]
}
,
{
"type": "class",
"name": "Fault",
"full_name": "::XmlRpc::Fault",
"inherits": ["std::exception"],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/fault.hpp",
"constructors": [
{
  "static": false,
  "name": "Fault",
  "visibility": "public",
  "params": [{"const": true,"ref": 1,"ptr": 0,"type": "::XmlRpc::Variable","name": "variable","alias": "Variable"}]
}
]
,
"methods": [
{
  "returns": {"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},
  "virtual": 1,
  "const": true,
  "static": false,
  "name": "what",
  "visibility": "public",
  "params": []
}
,{
  "returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
  "const": true,
  "static": false,
  "name": "fault_code",
  "visibility": "public",
  "params": []
}
]
,
"fields":[{"const": false,"ref": 0,"ptr": 0,"type": "::XmlRpc::Variable","visibility": "private","static": false,"name": "variable","alias": "Variable"}]
}
  ],  "functions": [
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_mimetype",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::get_mimetype",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/mimetype.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "get_mimetype",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::get_mimetype",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/mimetype.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "get_mimetype",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::get_mimetype",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/mimetype.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "getenv",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::getenv",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/getenv.hpp"
}
,
{
"name": "getenv_as",
"doc": "docs/Crails/getenv_as.html",
"excerpt": "<p>Returns an environment variable as the specified type.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::T","alias": "T"},
"full_name": "::Crails::getenv_as",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::T","alias": "T"}],
"module": "libcrails",
"include": "crails/getenv.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "cgi2params",
"full_name": "::Crails::cgi2params",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "uri",
"doc": "docs/Crails/uri.html",
"excerpt": "<p>Builds an <a href=\"https://developer.mozilla.org/fr/docs/Glossary/URI\">URI</a> from a list of arguments. Each parameter will be URI-encoded and appended as a fragment of the newly built URI:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::uri",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "to_unique_list",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},
"full_name": "::Crails::to_unique_list",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "unique_list",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST","alias": "LIST"},
"full_name": "::Crails::unique_list",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "exclude_nullptr",
"doc": "docs/Crails/exclude_nullptr.html",
"excerpt": "<p>Takes a list of pointers as parameter, and returns a list of the same type cleared out of any null pointers.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST","alias": "LIST"},
"full_name": "::Crails::exclude_nullptr",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "collect",
"doc": "docs/Crails/collect.html",
"excerpt": "<p>Return a subset of an iterable list of objects or object pointers.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::auto","alias": "auto"},
"full_name": "::Crails::collect",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "parse_cookie_values",
"full_name": "::Crails::parse_cookie_values",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (const std::string &, const std::string &)>","alias": "function<bool (const std::string &, const std::string &)>"}],
"module": "libcrails",
"include": "crails/utils/parse_cookie_values.hpp"
}
,
{
"name": "to_unique_list",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},
"full_name": "::Crails::to_unique_list",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "unique_list",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST","alias": "LIST"},
"full_name": "::Crails::unique_list",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "exclude_nullptr",
"doc": "docs/Crails/exclude_nullptr.html",
"excerpt": "<p>Takes a list of pointers as parameter, and returns a list of the same type cleared out of any null pointers.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST","alias": "LIST"},
"full_name": "::Crails::exclude_nullptr",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "collect",
"doc": "docs/Crails/collect.html",
"excerpt": "<p>Return a subset of an iterable list of objects or object pointers.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::auto","alias": "auto"},
"full_name": "::Crails::collect",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::METHOD","alias": "METHOD"},{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/utils/arrays.hpp"
}
,
{
"name": "parse_cookie_values",
"full_name": "::Crails::parse_cookie_values",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<bool (const std::string &, const std::string &)>","alias": "function<bool (const std::string &, const std::string &)>"}],
"module": "libcrails",
"include": "crails/utils/parse_cookie_values.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "unserialize",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},
"full_name": "::unserialize",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "::IArchive","alias": "IArchive"},{"const": false,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"}],
"module": "libtext-archive",
"include": "crails/unserializer.hpp"
}
,
{
"name": "serialize",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},
"full_name": "::serialize",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "::OArchive","alias": "OArchive"},{"const": true,"ref": 1,"ptr": 0,"type": "::ARRAY","alias": "ARRAY"}],
"module": "libtext-archive",
"include": "crails/serializer.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "require_folder",
"doc": "docs/Crails/require_folder.html",
"excerpt": "<p>Recursively creates a given folder. Arguments are: <code>task_name</code>, identifier for the process that's creating the directories, and <code>path</code> which is the path of the final directory to create.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_folder",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "prompt_write_file",
"doc": "docs/Crails/prompt_write_file.html",
"excerpt": "<p>Checks if a file can be written on or overwritten. Arguments are: <code>task_name</code>, identifier for the process that's prompting the file writing, and <code>path</code> which is the path of the file to write.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::prompt_write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "write_file",
"doc": "docs/Crails/write_file.html",
"excerpt": "<p>Writes a file if needed, and returns sucess status. Arguments are: <code>task_name</code>, an identifier for the process that's writing the file, a <code>path</code> defining where to write the file, and <code>contents</code> for the expected contents o...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "move_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::move_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "require_folder",
"doc": "docs/Crails/require_folder.html",
"excerpt": "<p>Recursively creates a given folder. Arguments are: <code>task_name</code>, identifier for the process that's creating the directories, and <code>path</code> which is the path of the final directory to create.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_folder",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "prompt_write_file",
"doc": "docs/Crails/prompt_write_file.html",
"excerpt": "<p>Checks if a file can be written on or overwritten. Arguments are: <code>task_name</code>, identifier for the process that's prompting the file writing, and <code>path</code> which is the path of the file to write.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::prompt_write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "write_file",
"doc": "docs/Crails/write_file.html",
"excerpt": "<p>Writes a file if needed, and returns sucess status. Arguments are: <code>task_name</code>, an identifier for the process that's writing the file, a <code>path</code> defining where to write the file, and <code>contents</code> for the expected contents o...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "move_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::move_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "cli_notification",
"doc": "docs/Crails/cli_notification.html",
"excerpt": "<p>Displays a message to the user on the terminal and, if possible, using desktop notifications through the [Notifier] class.</p>",
"full_name": "::Crails::cli_notification",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/notifier.hpp"
}
,
{
"name": "prompt",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::prompt",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-cli",
"include": "crails/cli/prompt.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "require_folder",
"doc": "docs/Crails/require_folder.html",
"excerpt": "<p>Recursively creates a given folder. Arguments are: <code>task_name</code>, identifier for the process that's creating the directories, and <code>path</code> which is the path of the final directory to create.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_folder",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "prompt_write_file",
"doc": "docs/Crails/prompt_write_file.html",
"excerpt": "<p>Checks if a file can be written on or overwritten. Arguments are: <code>task_name</code>, identifier for the process that's prompting the file writing, and <code>path</code> which is the path of the file to write.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::prompt_write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "write_file",
"doc": "docs/Crails/write_file.html",
"excerpt": "<p>Writes a file if needed, and returns sucess status. Arguments are: <code>task_name</code>, an identifier for the process that's writing the file, a <code>path</code> defining where to write the file, and <code>contents</code> for the expected contents o...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "move_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::move_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "require_folder",
"doc": "docs/Crails/require_folder.html",
"excerpt": "<p>Recursively creates a given folder. Arguments are: <code>task_name</code>, identifier for the process that's creating the directories, and <code>path</code> which is the path of the final directory to create.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_folder",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "prompt_write_file",
"doc": "docs/Crails/prompt_write_file.html",
"excerpt": "<p>Checks if a file can be written on or overwritten. Arguments are: <code>task_name</code>, identifier for the process that's prompting the file writing, and <code>path</code> which is the path of the file to write.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::prompt_write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "write_file",
"doc": "docs/Crails/write_file.html",
"excerpt": "<p>Writes a file if needed, and returns sucess status. Arguments are: <code>task_name</code>, an identifier for the process that's writing the file, a <code>path</code> defining where to write the file, and <code>contents</code> for the expected contents o...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::write_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "move_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::move_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"},{"const": true,"ref": 1,"ptr": 0,"type": "std::filesystem::path","alias": "path"}],
"module": "libcrails-cli",
"include": "crails/cli/filesystem.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "cli_notification",
"doc": "docs/Crails/cli_notification.html",
"excerpt": "<p>Displays a message to the user on the terminal and, if possible, using desktop notifications through the [Notifier] class.</p>",
"full_name": "::Crails::cli_notification",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/notifier.hpp"
}
,
{
"name": "prompt",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::prompt",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-cli",
"include": "crails/cli/prompt.hpp"
}
,
{
"name": "which",
"doc": "docs/Crails/which.html",
"excerpt": "<p>Returns the entire path of a given binary if it can be found using the PATH environment variable.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::which",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "run_command",
"doc": "docs/Crails/run_command.html",
"excerpt": "<p>Runs a single shell command, wait for it to end, and returns <code>true</code> if the exit status was zero. Standard and error output will be displayed on the terminal.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::run_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::ExecutableCommand","alias": "ExecutableCommand"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "require_command",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::require_command",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "execve",
"doc": "docs/Crails/execve.html",
"excerpt": "<p>Multiplatform implementation of <a href=\"https://www.man7.org/linux/man-pages/man2/execve.2.html\">execve</a>. Replaces the current process with a new one running the command and parameters sent as parameters.</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::Crails::execve",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::vector<std::string>","alias": "vector<std::string>"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::Crails::ExecutableCommand","alias": "ExecutableCommand"}],
"module": "libcrails-cli",
"include": "crails/cli/process.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "md5",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::md5",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"}],
"module": "libcrails-encrypt",
"include": "crails/md5.hpp"
}
,
{
"name": "md5",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::md5",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-encrypt",
"include": "crails/md5.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "fonticon_tag",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::fonticon_tag",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","alias": "IconIdentity"}],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp"
}
,
{
"name": "fonticon_cdn_header",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::fonticon_cdn_header",
"params": [],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "fonticon_tag",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::fonticon_tag",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","alias": "IconIdentity"}],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp"
}
,
{
"name": "fonticon_cdn_header",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::fonticon_cdn_header",
"params": [],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "fonticon_tag",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::fonticon_tag",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Crails::FontIcon::IconIdentity","alias": "IconIdentity"}],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp"
}
,
{
"name": "fonticon_cdn_header",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::fonticon_cdn_header",
"params": [],
"module": "libcrails-fonticons",
"include": "crails/icons.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "cgi2params",
"full_name": "::Crails::cgi2params",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "uri",
"doc": "docs/Crails/uri.html",
"excerpt": "<p>Builds an <a href=\"https://developer.mozilla.org/fr/docs/Glossary/URI\">URI</a> from a list of arguments. Each parameter will be URI-encoded and appended as a fragment of the newly built URI:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::uri",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "cgi2params",
"full_name": "::Crails::cgi2params",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "uri",
"doc": "docs/Crails/uri.html",
"excerpt": "<p>Builds an <a href=\"https://developer.mozilla.org/fr/docs/Glossary/URI\">URI</a> from a list of arguments. Each parameter will be URI-encoded and appended as a fragment of the newly built URI:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::uri",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "_t_replace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_replace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "locale_name",
"returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::locale_name",
"params": [],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "_t_replace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_replace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "locale_name",
"returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::locale_name",
"params": [],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "_t_replace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_replace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::i18n::String","alias": "String"}],
"module": "libcrails-i18n",
"include": "crails/i18n_string.hpp"
}
,
{
"name": "_t_replace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_replace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "locale_name",
"returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::locale_name",
"params": [],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "i18n_text_field",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::i18n_text_field",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "::i18n::String","alias": "String"},{"const": false,"ref": 0,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}],
"module": "libcrails-i18n",
"include": "crails/i18n_html_input.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "_t_replace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_replace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "locale_name",
"returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::locale_name",
"params": [],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::i18n::String","alias": "String"}],
"module": "libcrails-i18n",
"include": "crails/i18n_string.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "_t_replace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_replace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "_t_part",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::_t_part",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n_to_string.hpp"
}
,
{
"name": "locale_name",
"returns": {"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::locale_name",
"params": [],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::map<std::string, std::string>","alias": "map<std::string, std::string>"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "t",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::i18n::t",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::PARAM","alias": "PARAM"}],
"module": "libcrails-i18n",
"include": "crails/i18n.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "cgi2params",
"full_name": "::Crails::cgi2params",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "uri",
"doc": "docs/Crails/uri.html",
"excerpt": "<p>Builds an <a href=\"https://developer.mozilla.org/fr/docs/Glossary/URI\">URI</a> from a list of arguments. Each parameter will be URI-encoded and appended as a fragment of the newly built URI:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::uri",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "async_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::async_task",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "async_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::async_task",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "async_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::async_task",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::time_point<std::chrono::system_clock>","alias": "time_point<std::chrono::system_clock>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::time_point<std::chrono::system_clock>","alias": "time_point<std::chrono::system_clock>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::time_point<std::chrono::system_clock>","alias": "time_point<std::chrono::system_clock>"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task_in",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task_in",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task_in",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task_in",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task_in",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task_in",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::time_t","alias": "time_t"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task_in",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task_in",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::seconds","alias": "seconds"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Data","alias": "Data"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task_in",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task_in",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::seconds","alias": "seconds"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "::DataTree","alias": "DataTree"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "schedule_task_in",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Sidekix::schedule_task_in",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::chrono::seconds","alias": "seconds"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-sidekix",
"include": "crails/sidekix.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "read_file",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::read_file",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-readfile",
"include": "crails/read_file.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "generate_random_string",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::generate_random_string",
"params": [{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned short"}],
"module": "libcrails-random",
"include": "crails/utils/random_string.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "environment_name",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::environment_name",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::Environment","alias": "Environment"}],
"module": "libcrails",
"include": "crails/environment.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 0,"ptr": 1,"type": "::unsigned char","alias": "unsigned char"},{"const": false,"ref": 0,"ptr": 0,"type": "unsigned int"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_encode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_encode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "base64_decode",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::base64_decode",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/base64.hpp"
}
,
{
"name": "is_alphanumerical",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "bool"},
"full_name": "::Crails::is_alphanumerical",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "remove_duplicate_characters",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::remove_duplicate_characters",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "underscore",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::underscore",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "camelize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::camelize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::CamelizeOption","alias": "CamelizeOption"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "dasherize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::dasherize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "humanize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::humanize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "strip",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::strip",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "singularize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::singularize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "pluralize",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::pluralize",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails-semantics",
"include": "crails/utils/semantics.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": true,"ref": 0,"ptr": 0,"type": "std::string_view","alias": "string_view"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "replace_all_occurences",
"doc": "docs/Crails/replace_all_occurences.html",
"excerpt": "<p>Replaces all occurences of a pattern found within a [std::string]. The pattern can be expressed either as a [std::string_view] or a [std::regex]. The replacement can be expressed through a [std::string_view], or may be generated dynamically using a lamb...</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::replace_all_occurences",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": true,"ref": 1,"ptr": 0,"type": "std::regex","alias": "regex"},{"const": false,"ref": 0,"ptr": 0,"type": "std::function<std::string (const std::string_view)>","alias": "function<std::string (const std::string_view)>"}],
"module": "libcrails-semantics",
"include": "crails/utils/string_replace.hpp"
}
,
{
"name": "split",
"doc": "docs/Crails/split.html",
"excerpt": "<p>Splits a string in several pieces delimited by a separator. Parameters are:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::LIST_TYPE","alias": "LIST_TYPE"},
"full_name": "::Crails::split",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::VALUE_TYPE","alias": "VALUE_TYPE"},{"const": false,"ref": 0,"ptr": 0,"type": "::char","alias": "char"},{"const": false,"ref": 0,"ptr": 0,"type": "bool"}],
"module": "libcrails-semantics",
"include": "crails/utils/split.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::ITERATOR","alias": "ITERATOR"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "join",
"doc": "docs/Crails/join.html",
"excerpt": "<p>Concatenates a iterable list as a single string. The parameters are :</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::join",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::LIST","alias": "LIST"},{"const": false,"ref": 0,"ptr": 0,"type": "::SEPARATOR","alias": "SEPARATOR"}],
"module": "libcrails-semantics",
"include": "crails/utils/join.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "xml_for_method_call",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::XmlRpc::xml_for_method_call",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/xml_for_method_call.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "cgi2params",
"full_name": "::Crails::cgi2params",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "uri",
"doc": "docs/Crails/uri.html",
"excerpt": "<p>Builds an <a href=\"https://developer.mozilla.org/fr/docs/Glossary/URI\">URI</a> from a list of arguments. Each parameter will be URI-encoded and appended as a fragment of the newly built URI:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::uri",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "xml_for_method_call",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::XmlRpc::xml_for_method_call",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/xml_for_method_call.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "xml_for_method_call",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::XmlRpc::xml_for_method_call",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/xml_for_method_call.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "cgi2params",
"full_name": "::Crails::cgi2params",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::Data","alias": "Data"},{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "uri",
"doc": "docs/Crails/uri.html",
"excerpt": "<p>Builds an <a href=\"https://developer.mozilla.org/fr/docs/Glossary/URI\">URI</a> from a list of arguments. Each parameter will be URI-encoded and appended as a fragment of the newly built URI:</p>",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::Crails::uri",
"params": [{"const": false,"ref": 0,"ptr": 0,"type": "::ARGS...","alias": "ARGS..."}],
"module": "libcrails",
"include": "crails/url.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "xml_for_method_call",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::XmlRpc::xml_for_method_call",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "std::string","alias": "string"},{"const": false,"ref": 0,"ptr": 0,"type": "::Args...","alias": "Args..."}],
"module": "libcrails-xmlrpc",
"include": "crails/xmlrpc/xml_for_method_call.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "int"},
"full_name": "::boost_ext::stack_trace::trace",
"params": [{"const": false,"ref": 0,"ptr": 2,"type": "::void","alias": "void"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "write_symbols",
"full_name": "::boost_ext::stack_trace::write_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"},{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbol",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbol",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void","alias": "void"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "get_symbols",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "std::string","alias": "string"},
"full_name": "::boost_ext::stack_trace::get_symbols",
"params": [{"const": false,"ref": 0,"ptr": 1,"type": "::void *const","alias": "void *const"},{"const": false,"ref": 0,"ptr": 0,"type": "int"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "operator<<",
"returns": {"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},
"full_name": "::boost_ext::details::operator<<",
"params": [{"const": false,"ref": 1,"ptr": 0,"type": "std::ostream","alias": "ostream"},{"const": true,"ref": 1,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
,
{
"name": "trace",
"returns": {"const": false,"ref": 0,"ptr": 0,"type": "::boost_ext::details::trace_manip","alias": "trace_manip"},
"full_name": "::boost_ext::trace",
"params": [{"const": true,"ref": 1,"ptr": 0,"type": "::E","alias": "E"}],
"module": "libbacktrace",
"include": "crails/utils/backtrace.hpp"
}
  ],  "namespaces": [
{
"name": "Crails",
"full_name": "::Crails"
}
,
{
"name": "boost_ext",
"full_name": "::boost_ext"
}
,
{
"name": "stack_trace",
"full_name": "::boost_ext::stack_trace"
}
,
{
"name": "details",
"full_name": "::boost_ext::details"
}
,
{
"name": "Utils",
"full_name": "::Utils"
}
,
{
"name": "Tests",
"full_name": "::Crails::Tests"
}
,
{
"name": "Captcha",
"full_name": "::Crails::Captcha"
}
,
{
"name": "Crud",
"full_name": "::Crud"
}
,
{
"name": "FontIcon",
"full_name": "::Crails::FontIcon"
}
,
{
"name": "FontAwesome",
"full_name": "::Crails::FontAwesome"
}
,
{
"name": "Ssl",
"full_name": "::Crails::Ssl"
}
,
{
"name": "i18n",
"full_name": "::i18n"
}
,
{
"name": "Smtp",
"full_name": "::Smtp"
}
,
{
"name": "OAuth",
"full_name": "::Crails::OAuth"
}
,
{
"name": "Redis",
"full_name": "::Crails::Redis"
}
,
{
"name": "Sidekix",
"full_name": "::Sidekix"
}
,
{
"name": "Tests",
"full_name": "::Sidekix::Tests"
}
,
{
"name": "Ssh",
"full_name": "::Crails::Ssh"
}
,
{
"name": "Sync",
"full_name": "::Crails::Sync"
}
,
{
"name": "Odb",
"full_name": "::Crails::Odb"
}
,
{
"name": "Sync",
"full_name": "::Crails::Odb::Sync"
}
,
{
"name": "XmlRpc",
"full_name": "::XmlRpc"
}
  ]
,"enums":[
{
"name": "Environment",
"full_name": "::Crails::Environment",
"module": "libcrails",
"values":[{"key": "Production","value": 0},{"key": "Staging","value": 1},{"key": "Development","value": 2},{"key": "Test","value": 3}]
}
,
{
"name": "MessageType",
"full_name": "::Crails::WebSocket::MessageType",
"module": "libcrails",
"values":[{"key": "TextMessage","value": 0},{"key": "BinaryMessage","value": 1}]
}
,
{
"name": "Status",
"full_name": "::Crails::RequestParser::Status",
"module": "libcrails",
"values":[{"key": "Continue","value": 0},{"key": "Stop","value": 1},{"key": "Abort","value": 2}]
}
,
{
"name": "Options",
"full_name": "::Crails::ProgramOptions::Options",
"module": "libcrails",
"values":[{"key": "AllowUnregistered","value": 1}]
}
,
{
"name": "CamelizeOption",
"full_name": "::Crails::CamelizeOption",
"module": "libcrails-semantics",
"values":[{"key": "UpperCamelcase","value": 0},{"key": "LowerCamelcase","value": 1}]
}
,
{
"name": "Symbol",
"full_name": "::Crails::Logger::Symbol",
"module": "libcrails-logger",
"values":[{"key": "Debug","value": 0},{"key": "Info","value": 1},{"key": "Warning","value": 2},{"key": "Error","value": 3},{"key": "endl","value": 4}]
}
,
{
"name": "BuildOptions",
"full_name": "::BuildOptions",
"module": "libcrails-cli",
"values":[{"key": "BuildVerbose","value": 1},{"key": "BuildClean","value": 2}]
}
,
{
"name": "RenderType",
"full_name": "::Crails::RenderController::RenderType",
"module": "libcrails-controllers",
"values":[{"key": "TEXT","value": 0},{"key": "HTML","value": 1},{"key": "XML","value": 2},{"key": "JSON","value": 3},{"key": "JSONP","value": 4},{"key": "RAW","value": 5}]
}
,
{
"name": "Options",
"full_name": "::Crails::Paginator::Options",
"module": "libcrails-paginator",
"values":[{"key": "NoOptions","value": 0},{"key": "UseDefaultOrderBy","value": 1}]
}
,
{
"name": "IconIdentity",
"full_name": "::Crails::FontIcon::IconIdentity",
"module": "libcrails-fonticons",
"values":[{"key": "ArrowLeft","value": 0},{"key": "ArrowRight","value": 1},{"key": "ArrowUp","value": 2},{"key": "ArrowDown","value": 3},{"key": "ChevronLeft","value": 4},{"key": "ChevronRight","value": 5},{"key": "ChevronUp","value": 6},{"key": "ChevronDown","value": 7},{"key": "ChevronDoubleLeft","value": 8},{"key": "ChevronDoubleRight","value": 9},{"key": "ChevronDoubleUp","value": 10},{"key": "ChevronDoubleDown","value": 11},{"key": "DeviceDesktop","value": 12},{"key": "DeviceMobile","value": 13},{"key": "DeviceTablet","value": 14},{"key": "DeviceLaptop","value": 15},{"key": "EllipsisVertical","value": 16},{"key": "Ellipsis","value": 17},{"key": "Exit","value": 18},{"key": "Layout","value": 19},{"key": "Add","value": 20},{"key": "Destroy","value": 21},{"key": "Save","value": 22},{"key": "Forbid","value": 23},{"key": "Share","value": 24},{"key": "Upload","value": 25},{"key": "Download","value": 26},{"key": "Move","value": 27},{"key": "Menu","value": 28},{"key": "MinusBox","value": 29},{"key": "PlusBox","value": 30},{"key": "Settings","value": 31},{"key": "Tools","value": 32},{"key": "Plugin","value": 33},{"key": "Refresh","value": 34},{"key": "Sync","value": 35},{"key": "Search","value": 36},{"key": "Magic","value": 37},{"key": "Preview","value": 38},{"key": "Sort","value": 39},{"key": "SortAsc","value": 40},{"key": "SortDesc","value": 41},{"key": "Star","value": 42},{"key": "HalfStar","value": 43},{"key": "Edit","value": 44},{"key": "ExternalLink","value": 45},{"key": "Check","value": 46},{"key": "Calendar","value": 47},{"key": "Cloud","value": 48},{"key": "MediaPlay","value": 49},{"key": "MediaPause","value": 50},{"key": "MediaStop","value": 51},{"key": "MediaBackward","value": 52},{"key": "MediaForward","value": 53},{"key": "AudioVolume","value": 54},{"key": "AudioVolumeUp","value": 55},{"key": "AudioVolumeDown","value": 56},{"key": "AudioVolumeMute","value": 57},{"key": "File","value": 58},{"key": "FileAudio","value": 59},{"key": "FileVideo","value": 60},{"key": "FilePicture","value": 61},{"key": "FileDocument","value": 62}]
}
,
{
"name": "Style",
"full_name": "::Crails::FontAwesome::Style",
"module": "libcrails-fonticons",
"values":[{"key": "Regular","value": 1},{"key": "Solid","value": 2},{"key": "Brands","value": 3},{"key": "Thin","value": 4},{"key": "Light","value": 5},{"key": "Duotone","value": 6}]
}
,
{
"name": "Option",
"full_name": "::Crails::BasicImage::Option",
"module": "libcrails-image",
"values":[{"key": "NoOption","value": 0},{"key": "PreserveAspectRatio","value": 1}]
}
,
{
"name": "RecipientType",
"full_name": "::Crails::Mail::RecipientType",
"module": "libcrails-mail",
"values":[{"key": "CarbonCopy","value": 1},{"key": "Blind","value": 2}]
}
,
{
"name": "AuthenticationProtocol",
"full_name": "::Smtp::Server::AuthenticationProtocol",
"module": "libcrails-mail",
"values":[{"key": "PLAIN","value": 0},{"key": "LOGIN","value": 1},{"key": "DIGEST_MD5","value": 2},{"key": "MD5","value": 3},{"key": "CRAM_MD5","value": 4}]
}
,
{
"name": "Backend",
"full_name": "::Crails::MailServers::Backend",
"module": "libcrails-mail",
"values":[{"key": "SMTP","value": 0},{"key": "MailGun","value": 1},{"key": "MailGunEurope","value": 2}]
}
,
{
"name": "Format",
"full_name": "::Crails::VideoFile::Format",
"module": "libcrails-multimedia",
"values":[{"key": "OggFormat","value": 0},{"key": "WebmFormat","value": 1},{"key": "Mp4Format","value": 2}]
}
,
{
"name": "Format",
"full_name": "::Crails::AudioFile::Format",
"module": "libcrails-multimedia",
"values":[{"key": "OggFormat","value": 0},{"key": "WebmFormat","value": 1},{"key": "Mp3Format","value": 2}]
}
,
{
"name": "Mode",
"full_name": "::Crails::ProxyRequestHandler::Mode",
"module": "libcrails-proxy",
"values":[{"key": "DefaultMode","value": 0},{"key": "Redirect302","value": 1},{"key": "Proxy","value": 2}]
}
,
{
"name": "ScpMode",
"full_name": "::Crails::Ssh::ScpMode",
"module": "libcrails-ssh",
"values":[{"key": "WriteMode","value": 0},{"key": "ReadMode","value": 1}]
}
,
{
"name": "InputType",
"full_name": "::Crails::Ssh::Channel::InputType",
"module": "libcrails-ssh",
"values":[{"key": "Stdout","value": 0},{"key": "Stderr","value": 1}]
}
,
{
"name": "ClientMode",
"full_name": "::Crails::Sync::Channel::ClientMode",
"module": "libcrails-sync",
"values":[{"key": "ReadMode","value": 0},{"key": "WriteMode","value": 1},{"key": "ReadWriteMode","value": 2}]
}
]
}